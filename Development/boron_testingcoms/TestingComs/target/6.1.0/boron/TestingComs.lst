
c:/Users/efarquh/Documents/GitHub/Boron-and-OpenMV/Development/boron_testingcoms/TestingComs/target/6.1.0/boron/TestingComs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002588  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b65a4  000b65a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e550  000b65c8  0000e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000023c  2003e5c0  2003e5c0  0001e5c0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6638  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b663c  000b663c  0001663c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6642  000b6642  00016642  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6666  000b6666  00016666  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001b0cf9  00000000  00000000  0001666a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017248  00000000  00000000  001c7363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0006152c  00000000  00000000  001de5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003468  00000000  00000000  0023fad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000f9c0  00000000  00000000  00242f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ed1b  00000000  00000000  002528ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000530fd  00000000  00000000  0029161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c37a0  00000000  00000000  002e4717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000096ec  00000000  00000000  004a7eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f802 	bl	b6046 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f002 f80a 	bl	b6062 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e550 	.word	0x2003e550
   b4058:	000b65c8 	.word	0x000b65c8
   b405c:	2003e5c0 	.word	0x2003e5c0
   b4060:	2003e5c0 	.word	0x2003e5c0
   b4064:	2003e7fc 	.word	0x2003e7fc

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 f90f 	bl	b5290 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b6580 	.word	0x000b6580
   b408c:	000b65a4 	.word	0x000b65a4

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b840 	b.w	b4114 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f87f 	bl	b4198 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 b8af 	b.w	b5200 <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f000 bcc7 	b.w	b4a34 <malloc>

000b40a6 <_Znaj>:
   b40a6:	f000 bcc5 	b.w	b4a34 <malloc>

000b40aa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40aa:	f000 bccb 	b.w	b4a44 <free>

000b40ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40ae:	7800      	ldrb	r0, [r0, #0]
   b40b0:	fab0 f080 	clz	r0, r0
   b40b4:	0940      	lsrs	r0, r0, #5
   b40b6:	4770      	bx	lr

000b40b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b8:	2301      	movs	r3, #1
   b40ba:	7003      	strb	r3, [r0, #0]
   b40bc:	4770      	bx	lr

000b40be <_ZN5Print5printIiLi0EEEjT_i.part.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
   b40be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40c0:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
   b40c2:	4607      	mov	r7, r0
   b40c4:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   b40c6:	da0c      	bge.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
   b40c8:	2a0a      	cmp	r2, #10
   b40ca:	d10a      	bne.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
            t = print('-');
   b40cc:	212d      	movs	r1, #45	; 0x2d
   b40ce:	f000 ff5d 	bl	b4f8c <_ZN5Print5printEc>
            val = -n;
   b40d2:	4261      	negs	r1, r4
            t = print('-');
   b40d4:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40d6:	b2f2      	uxtb	r2, r6
   b40d8:	4638      	mov	r0, r7
   b40da:	f000 ff70 	bl	b4fbe <_ZN5Print11printNumberEmh>
    }
}
   b40de:	4428      	add	r0, r5
   b40e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   b40e2:	4621      	mov	r1, r4
        size_t t = 0;
   b40e4:	2500      	movs	r5, #0
   b40e6:	e7f6      	b.n	b40d6 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x18>

000b40e8 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>:
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   b40e8:	b121      	cbz	r1, b40f4 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   b40ea:	888b      	ldrh	r3, [r1, #4]
   b40ec:	4283      	cmp	r3, r0
   b40ee:	d001      	beq.n	b40f4 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
                return start;
            }
            start = start->next;
   b40f0:	6889      	ldr	r1, [r1, #8]
        while (start) {
   b40f2:	e7f9      	b.n	b40e8 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
        }
        return nullptr;
    }
   b40f4:	4608      	mov	r0, r1
   b40f6:	4770      	bx	lr

000b40f8 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f8:	b40e      	push	{r1, r2, r3}
   b40fa:	b503      	push	{r0, r1, lr}
   b40fc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b40fe:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4100:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4104:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4106:	f000 ff78 	bl	b4ffa <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b410a:	b002      	add	sp, #8
   b410c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4110:	b003      	add	sp, #12
   b4112:	4770      	bx	lr

000b4114 <setup>:
const unsigned long EARLYBIRD_SECONDS = 0; // how long before desired time should I wake up? 
const unsigned long TIMEOUT_TINYCAM_MS = 5000;

String statement;

void setup() {
   b4114:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4116:	480f      	ldr	r0, [pc, #60]	; (b4154 <setup+0x40>)
   b4118:	2300      	movs	r3, #0
   b411a:	4619      	mov	r1, r3
   b411c:	461a      	mov	r2, r3
   b411e:	6840      	ldr	r0, [r0, #4]
   b4120:	f000 fc08 	bl	b4934 <network_off>
    Particle.connect();
  } else {
    Cellular.off(); // turn off cellular for prelim testing (uncomment)
  }

  Serial.begin(9600);
   b4124:	f001 fc54 	bl	b59d0 <_Z16_fetch_usbserialv>
   b4128:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b412c:	f001 fc44 	bl	b59b8 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600); // Initialize serial communication
   b4130:	f001 feda 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b4134:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4138:	f001 fd12 	bl	b5b60 <_ZN11USARTSerial5beginEm>
  pinMode(A0, OUTPUT); 
   b413c:	2101      	movs	r1, #1
   b413e:	2013      	movs	r0, #19
   b4140:	f001 fe8c 	bl	b5e5c <pinMode>
  Serial1.setTimeout(TIMEOUT_TINYCAM_MS);
   b4144:	f001 fed0 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
}
   b4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial1.setTimeout(TIMEOUT_TINYCAM_MS);
   b414c:	f241 3188 	movw	r1, #5000	; 0x1388
   b4150:	f000 bfae 	b.w	b50b0 <_ZN6Stream10setTimeoutEm>
   b4154:	2003e6d8 	.word	0x2003e6d8

000b4158 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4158:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b415a:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b415c:	2000      	movs	r0, #0
   b415e:	f000 fb8b 	bl	b4878 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4162:	b120      	cbz	r0, b416e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4164:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4166:	b913      	cbnz	r3, b416e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4168:	f000 fc2c 	bl	b49c4 <spark_process>
    }
   b416c:	e7fa      	b.n	b4164 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b416e:	7863      	ldrb	r3, [r4, #1]
   b4170:	f3bf 8f5b 	dmb	ish
   b4174:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4176:	b90b      	cbnz	r3, b417c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4178:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b417a:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b417c:	2000      	movs	r0, #0
   b417e:	f000 fb7b 	bl	b4878 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4182:	b120      	cbz	r0, b418e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b4184:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4186:	b913      	cbnz	r3, b418e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b4188:	f000 fc1c 	bl	b49c4 <spark_process>
    }
   b418c:	e7fa      	b.n	b4184 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b418e:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b4190:	2b01      	cmp	r3, #1
   b4192:	d1f1      	bne.n	b4178 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b4194:	7b20      	ldrb	r0, [r4, #12]
   b4196:	e7f0      	b.n	b417a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>

000b4198 <loop>:

void loop() {
   b4198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // Enter state machine
  switch (state) {
   b419c:	4eb3      	ldr	r6, [pc, #716]	; (b446c <loop+0x2d4>)
   b419e:	7835      	ldrb	r5, [r6, #0]
   b41a0:	2d01      	cmp	r5, #1
void loop() {
   b41a2:	b087      	sub	sp, #28
  switch (state) {
   b41a4:	f000 80a6 	beq.w	b42f4 <loop+0x15c>
   b41a8:	2d02      	cmp	r5, #2
   b41aa:	f000 810d 	beq.w	b43c8 <loop+0x230>
   b41ae:	2d00      	cmp	r5, #0
   b41b0:	f040 8091 	bne.w	b42d6 <loop+0x13e>
  case DATALOG_STATE: {
    Serial1.flush();
   b41b4:	f001 fe98 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b41b8:	6803      	ldr	r3, [r0, #0]
   b41ba:	69db      	ldr	r3, [r3, #28]
   b41bc:	4798      	blx	r3
    delay(100);
   b41be:	2064      	movs	r0, #100	; 0x64
   b41c0:	f000 ffd8 	bl	b5174 <delay>
    Serial1.begin(9600);
   b41c4:	f001 fe90 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b41c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41cc:	f001 fcc8 	bl	b5b60 <_ZN11USARTSerial5beginEm>
    delay(100);
   b41d0:	2064      	movs	r0, #100	; 0x64
   b41d2:	f000 ffcf 	bl	b5174 <delay>
    digitalWrite(A0, LOW);
   b41d6:	4629      	mov	r1, r5
   b41d8:	2013      	movs	r0, #19
   b41da:	f001 fe50 	bl	b5e7e <digitalWrite>
    delay(1000);
   b41de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b41e2:	f000 ffc7 	bl	b5174 <delay>
    digitalWrite(A0, HIGH);
   b41e6:	2101      	movs	r1, #1
   b41e8:	2013      	movs	r0, #19
   b41ea:	f001 fe48 	bl	b5e7e <digitalWrite>
    digitalWrite(A0, LOW);
   b41ee:	4629      	mov	r1, r5
   b41f0:	2013      	movs	r0, #19
   b41f2:	f001 fe44 	bl	b5e7e <digitalWrite>
    delay(2000);
   b41f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b41fa:	f000 ffbb 	bl	b5174 <delay>
    if(Serial1.available() > 0)
   b41fe:	f001 fe73 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b4202:	6803      	ldr	r3, [r0, #0]
   b4204:	691b      	ldr	r3, [r3, #16]
   b4206:	4798      	blx	r3
   b4208:	2800      	cmp	r0, #0
   b420a:	dd67      	ble.n	b42dc <loop+0x144>
    {
      statement = Serial1.readString();
   b420c:	f001 fe6c 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b4210:	4601      	mov	r1, r0
   b4212:	a802      	add	r0, sp, #8
   b4214:	f000 ff4e 	bl	b50b4 <_ZN6Stream10readStringEv>
   b4218:	4895      	ldr	r0, [pc, #596]	; (b4470 <loop+0x2d8>)
   b421a:	a902      	add	r1, sp, #8
   b421c:	f000 fe0a 	bl	b4e34 <_ZN6StringaSEOS_>
   b4220:	a802      	add	r0, sp, #8
   b4222:	f000 fd8a 	bl	b4d3a <_ZN6StringD1Ev>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b4226:	4c92      	ldr	r4, [pc, #584]	; (b4470 <loop+0x2d8>)
    } else {
        Serial.print("could not receive from openmv"); 
      }

    Serial.println(statement); 
    real_time = Time.now();
   b4228:	4d92      	ldr	r5, [pc, #584]	; (b4474 <loop+0x2dc>)
    Serial.println(statement); 
   b422a:	f001 fbd1 	bl	b59d0 <_Z16_fetch_usbserialv>
   b422e:	6821      	ldr	r1, [r4, #0]
   b4230:	f000 febb 	bl	b4faa <_ZN5Print7printlnEPKc>
    real_time = Time.now();
   b4234:	f000 ff84 	bl	b5140 <_ZN9TimeClass3nowEv>
   b4238:	6028      	str	r0, [r5, #0]

    Serial1.end();
   b423a:	f001 fe55 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b423e:	f001 fc92 	bl	b5b66 <_ZN11USARTSerial3endEv>
    Serial1.flush(); 
   b4242:	f001 fe51 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b4246:	6803      	ldr	r3, [r0, #0]
   b4248:	69db      	ldr	r3, [r3, #28]
   b424a:	4798      	blx	r3
    delay(100);
   b424c:	2064      	movs	r0, #100	; 0x64
   b424e:	f000 ff91 	bl	b5174 <delay>
    Serial1.begin(9600);
   b4252:	f001 fe49 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b4256:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b425a:	f001 fc81 	bl	b5b60 <_ZN11USARTSerial5beginEm>
    delay(1000); 
   b425e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4262:	f000 ff87 	bl	b5174 <delay>
    if(Serial1.available() > 0)
   b4266:	f001 fe3f 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b426a:	6803      	ldr	r3, [r0, #0]
   b426c:	691b      	ldr	r3, [r3, #16]
   b426e:	4798      	blx	r3
   b4270:	2800      	cmp	r0, #0
   b4272:	dd39      	ble.n	b42e8 <loop+0x150>
    {
      statement = Serial1.println(real_time);
   b4274:	f001 fe38 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b4278:	6829      	ldr	r1, [r5, #0]
   b427a:	220a      	movs	r2, #10
   b427c:	4680      	mov	r8, r0
inline size_t Print::print(T n, int base)
   b427e:	f7ff ff1e 	bl	b40be <_ZN5Print5printIiLi0EEEjT_i.part.0>
   b4282:	4607      	mov	r7, r0
        n += println();
   b4284:	4640      	mov	r0, r8
   b4286:	f000 fe84 	bl	b4f92 <_ZN5Print7printlnEv>
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    StringSumHelper(char c) : String(c) {}
    StringSumHelper(unsigned char num) : String(num) {}
    StringSumHelper(int num) : String(num) {}
    StringSumHelper(unsigned int num) : String(num) {}
   b428a:	220a      	movs	r2, #10
   b428c:	19c1      	adds	r1, r0, r7
   b428e:	a802      	add	r0, sp, #8
   b4290:	f000 fdf2 	bl	b4e78 <_ZN6StringC1Ejh>
   b4294:	a902      	add	r1, sp, #8
   b4296:	4620      	mov	r0, r4
   b4298:	f000 fdd4 	bl	b4e44 <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   b429c:	a802      	add	r0, sp, #8
   b429e:	f000 fd4c 	bl	b4d3a <_ZN6StringD1Ev>
    } else {
      Serial.print("could not send datetime to openmv"); 
    }

    delay(2000);
   b42a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b42a6:	f000 ff65 	bl	b5174 <delay>
    
    // Print out data buffer
    Serial.print(real_time);
   b42aa:	f001 fb91 	bl	b59d0 <_Z16_fetch_usbserialv>
inline size_t Print::print(T n, int base)
   b42ae:	220a      	movs	r2, #10
   b42b0:	6829      	ldr	r1, [r5, #0]
   b42b2:	f7ff ff04 	bl	b40be <_ZN5Print5printIiLi0EEEjT_i.part.0>
    Serial.print(",");
   b42b6:	f001 fb8b 	bl	b59d0 <_Z16_fetch_usbserialv>
   b42ba:	496f      	ldr	r1, [pc, #444]	; (b4478 <loop+0x2e0>)
   b42bc:	f000 fe62 	bl	b4f84 <_ZN5Print5printEPKc>
    Serial.println(statement); 
   b42c0:	f001 fb86 	bl	b59d0 <_Z16_fetch_usbserialv>
   b42c4:	6821      	ldr	r1, [r4, #0]
   b42c6:	f000 fe70 	bl	b4faa <_ZN5Print7printlnEPKc>
    Serial1.end();
   b42ca:	f001 fe0d 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b42ce:	f001 fc4a 	bl	b5b66 <_ZN11USARTSerial3endEv>
        Serial.println("publishing data");
        bool success = Particle.publish(eventName, data, 60, PRIVATE, WITH_ACK);
        Serial.printlnf("publish result %d", success);

        isMaxTime = true;
        state = SLEEP_STATE;
   b42d2:	2302      	movs	r3, #2
   b42d4:	7033      	strb	r3, [r6, #0]
    stateTime = millis();
    state = DATALOG_STATE;
  }
  break;
  }
}
   b42d6:	b007      	add	sp, #28
   b42d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("could not receive from openmv"); 
   b42dc:	f001 fb78 	bl	b59d0 <_Z16_fetch_usbserialv>
   b42e0:	4966      	ldr	r1, [pc, #408]	; (b447c <loop+0x2e4>)
   b42e2:	f000 fe4f 	bl	b4f84 <_ZN5Print5printEPKc>
   b42e6:	e79e      	b.n	b4226 <loop+0x8e>
      Serial.print("could not send datetime to openmv"); 
   b42e8:	f001 fb72 	bl	b59d0 <_Z16_fetch_usbserialv>
   b42ec:	4964      	ldr	r1, [pc, #400]	; (b4480 <loop+0x2e8>)
   b42ee:	f000 fe49 	bl	b4f84 <_ZN5Print5printEPKc>
   b42f2:	e7d6      	b.n	b42a2 <loop+0x10a>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b42f4:	f000 f998 	bl	b4628 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b42f8:	4d62      	ldr	r5, [pc, #392]	; (b4484 <loop+0x2ec>)
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(const spark::NetworkClass& network = spark::Network) {
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b42fa:	4f63      	ldr	r7, [pc, #396]	; (b4488 <loop+0x2f0>)
        Serial.print("Trying to connect");
   b42fc:	f8df 81b4 	ldr.w	r8, [pc, #436]	; b44b4 <loop+0x31c>
          Serial.println("max time for publishing reached without success; go to sleep");
   b4300:	f8df 91b4 	ldr.w	r9, [pc, #436]	; b44b8 <loop+0x320>
    stateTime = millis();
   b4304:	6028      	str	r0, [r5, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4306:	f000 fb6d 	bl	b49e4 <spark_cloud_flag_connected>
      if (Particle.connected() == false) {
   b430a:	4603      	mov	r3, r0
   b430c:	b958      	cbnz	r0, b4326 <loop+0x18e>
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b430e:	6879      	ldr	r1, [r7, #4]
   b4310:	4602      	mov	r2, r0
   b4312:	2006      	movs	r0, #6
   b4314:	f000 fb7e 	bl	b4a14 <spark_set_connection_property>
        spark_cloud_flag_connect();
   b4318:	f000 fb5c 	bl	b49d4 <spark_cloud_flag_connect>
        Serial.print("Trying to connect");
   b431c:	f001 fb58 	bl	b59d0 <_Z16_fetch_usbserialv>
   b4320:	4641      	mov	r1, r8
   b4322:	f000 fe2f 	bl	b4f84 <_ZN5Print5printEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4326:	f000 fb5d 	bl	b49e4 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b432a:	4604      	mov	r4, r0
   b432c:	2800      	cmp	r0, #0
   b432e:	d02f      	beq.n	b4390 <loop+0x1f8>
        Serial.println("publishing data");
   b4330:	f001 fb4e 	bl	b59d0 <_Z16_fetch_usbserialv>
   b4334:	4955      	ldr	r1, [pc, #340]	; (b448c <loop+0x2f4>)
   b4336:	f000 fe38 	bl	b4faa <_ZN5Print7printlnEPKc>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b433a:	4b55      	ldr	r3, [pc, #340]	; (b4490 <loop+0x2f8>)
   b433c:	4a55      	ldr	r2, [pc, #340]	; (b4494 <loop+0x2fc>)
   b433e:	781b      	ldrb	r3, [r3, #0]
   b4340:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4342:	4955      	ldr	r1, [pc, #340]	; (b4498 <loop+0x300>)
   b4344:	4313      	orrs	r3, r2
   b4346:	f88d 3000 	strb.w	r3, [sp]
   b434a:	4a54      	ldr	r2, [pc, #336]	; (b449c <loop+0x304>)
   b434c:	6809      	ldr	r1, [r1, #0]
   b434e:	233c      	movs	r3, #60	; 0x3c
   b4350:	a802      	add	r0, sp, #8
   b4352:	f001 f8fb 	bl	b554c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b4356:	a802      	add	r0, sp, #8
   b4358:	f7ff fefe 	bl	b4158 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
   b435c:	9c03      	ldr	r4, [sp, #12]
   b435e:	4605      	mov	r5, r0
   b4360:	b17c      	cbz	r4, b4382 <loop+0x1ea>
      if (--_M_use_count == 0)
   b4362:	6863      	ldr	r3, [r4, #4]
   b4364:	3b01      	subs	r3, #1
   b4366:	6063      	str	r3, [r4, #4]
   b4368:	b95b      	cbnz	r3, b4382 <loop+0x1ea>
          _M_dispose();
   b436a:	6823      	ldr	r3, [r4, #0]
   b436c:	4620      	mov	r0, r4
   b436e:	689b      	ldr	r3, [r3, #8]
   b4370:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4372:	68a3      	ldr	r3, [r4, #8]
   b4374:	3b01      	subs	r3, #1
   b4376:	60a3      	str	r3, [r4, #8]
   b4378:	b91b      	cbnz	r3, b4382 <loop+0x1ea>
            _M_destroy();
   b437a:	6823      	ldr	r3, [r4, #0]
   b437c:	4620      	mov	r0, r4
   b437e:	68db      	ldr	r3, [r3, #12]
   b4380:	4798      	blx	r3
        Serial.printlnf("publish result %d", success);
   b4382:	f001 fb25 	bl	b59d0 <_Z16_fetch_usbserialv>
   b4386:	4946      	ldr	r1, [pc, #280]	; (b44a0 <loop+0x308>)
   b4388:	462a      	mov	r2, r5
   b438a:	f7ff feb5 	bl	b40f8 <_ZN5Print8printlnfEPKcz>
   b438e:	e7a0      	b.n	b42d2 <loop+0x13a>
   b4390:	f000 f94a 	bl	b4628 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b4394:	682b      	ldr	r3, [r5, #0]
   b4396:	1ac0      	subs	r0, r0, r3
   b4398:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b439c:	4298      	cmp	r0, r3
   b439e:	d907      	bls.n	b43b0 <loop+0x218>
          state = SLEEP_STATE;
   b43a0:	2302      	movs	r3, #2
   b43a2:	7033      	strb	r3, [r6, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   b43a4:	f001 fb14 	bl	b59d0 <_Z16_fetch_usbserialv>
   b43a8:	4649      	mov	r1, r9
   b43aa:	f000 fdfe 	bl	b4faa <_ZN5Print7printlnEPKc>
          isMaxTime = true;
   b43ae:	2401      	movs	r4, #1
        Serial.println("Not max time, try again to connect and publish");
   b43b0:	f001 fb0e 	bl	b59d0 <_Z16_fetch_usbserialv>
   b43b4:	493b      	ldr	r1, [pc, #236]	; (b44a4 <loop+0x30c>)
   b43b6:	f000 fdf8 	bl	b4faa <_ZN5Print7printlnEPKc>
        delay(500);
   b43ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43be:	f000 fed9 	bl	b5174 <delay>
    while (!isMaxTime) {
   b43c2:	2c00      	cmp	r4, #0
   b43c4:	d09f      	beq.n	b4306 <loop+0x16e>
   b43c6:	e786      	b.n	b42d6 <loop+0x13e>
    Serial.println("going to sleep");
   b43c8:	f001 fb02 	bl	b59d0 <_Z16_fetch_usbserialv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b43cc:	4c36      	ldr	r4, [pc, #216]	; (b44a8 <loop+0x310>)
   b43ce:	4937      	ldr	r1, [pc, #220]	; (b44ac <loop+0x314>)
   b43d0:	f000 fdeb 	bl	b4faa <_ZN5Print7printlnEPKc>
    delay(500);
   b43d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43d8:	f000 fecc 	bl	b5174 <delay>
   b43dc:	7d23      	ldrb	r3, [r4, #20]
   b43de:	b1cb      	cbz	r3, b4414 <loop+0x27c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43e0:	6823      	ldr	r3, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b43e2:	7225      	strb	r5, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43e4:	68d9      	ldr	r1, [r3, #12]
   b43e6:	2001      	movs	r0, #1
   b43e8:	f7ff fe7e 	bl	b40e8 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b43ec:	4605      	mov	r5, r0

    SystemSleepConfiguration& gpio(hal_pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
            while (wakeup) {
   b43ee:	2800      	cmp	r0, #0
   b43f0:	d064      	beq.n	b44bc <loop+0x324>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   b43f2:	8983      	ldrh	r3, [r0, #12]
   b43f4:	2b02      	cmp	r3, #2
   b43f6:	d136      	bne.n	b4466 <loop+0x2ce>
                    gpioWakeup->mode = mode;
   b43f8:	7383      	strb	r3, [r0, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b43fa:	7d23      	ldrb	r3, [r4, #20]
   b43fc:	b153      	cbz	r3, b4414 <loop+0x27c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43fe:	6823      	ldr	r3, [r4, #0]
   b4400:	2004      	movs	r0, #4
   b4402:	68d9      	ldr	r1, [r3, #12]
   b4404:	f7ff fe70 	bl	b40e8 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
            if (wakeup) {
   b4408:	4607      	mov	r7, r0
   b440a:	2800      	cmp	r0, #0
   b440c:	d06c      	beq.n	b44e8 <loop+0x350>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b440e:	f247 5330 	movw	r3, #30000	; 0x7530
   b4412:	60c3      	str	r3, [r0, #12]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   b4414:	7d23      	ldrb	r3, [r4, #20]
   b4416:	b183      	cbz	r3, b443a <loop+0x2a2>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4418:	6823      	ldr	r3, [r4, #0]
   b441a:	68d9      	ldr	r1, [r3, #12]
   b441c:	200e      	movs	r0, #14
   b441e:	f7ff fe63 	bl	b40e8 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b4422:	4605      	mov	r5, r0
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
            while (wakeup) {
   b4424:	2800      	cmp	r0, #0
   b4426:	d076      	beq.n	b4516 <loop+0x37e>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   b4428:	7b03      	ldrb	r3, [r0, #12]
   b442a:	2b04      	cmp	r3, #4
   b442c:	d171      	bne.n	b4512 <loop+0x37a>
                    if (networkWakeup->flags != flags.value()) {
   b442e:	89c3      	ldrh	r3, [r0, #14]
   b4430:	2b01      	cmp	r3, #1
   b4432:	d002      	beq.n	b443a <loop+0x2a2>
                        networkWakeup->flags |= flags.value();
   b4434:	f043 0301 	orr.w	r3, r3, #1
   b4438:	81c3      	strh	r3, [r0, #14]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b443a:	491b      	ldr	r1, [pc, #108]	; (b44a8 <loop+0x310>)
   b443c:	a802      	add	r0, sp, #8
   b443e:	f000 fbcf 	bl	b4be0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Serial.print("Feeling restless");
   b4442:	f001 fac5 	bl	b59d0 <_Z16_fetch_usbserialv>
   b4446:	491a      	ldr	r1, [pc, #104]	; (b44b0 <loop+0x318>)
   b4448:	f000 fd9c 	bl	b4f84 <_ZN5Print5printEPKc>
   b444c:	f000 f8ec 	bl	b4628 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4450:	4b0c      	ldr	r3, [pc, #48]	; (b4484 <loop+0x2ec>)
   b4452:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4454:	9802      	ldr	r0, [sp, #8]
    state = DATALOG_STATE;
   b4456:	2300      	movs	r3, #0
   b4458:	7033      	strb	r3, [r6, #0]
   b445a:	2800      	cmp	r0, #0
   b445c:	f43f af3b 	beq.w	b42d6 <loop+0x13e>
            free(wakeupSource_);
   b4460:	f000 faf0 	bl	b4a44 <free>
}
   b4464:	e737      	b.n	b42d6 <loop+0x13e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4466:	6881      	ldr	r1, [r0, #8]
   b4468:	e7bd      	b.n	b43e6 <loop+0x24e>
   b446a:	bf00      	nop
   b446c:	2003e66c 	.word	0x2003e66c
   b4470:	2003e674 	.word	0x2003e674
   b4474:	2003e668 	.word	0x2003e668
   b4478:	000b623c 	.word	0x000b623c
   b447c:	000b61fc 	.word	0x000b61fc
   b4480:	000b621a 	.word	0x000b621a
   b4484:	2003e670 	.word	0x2003e670
   b4488:	2003e708 	.word	0x2003e708
   b448c:	000b6250 	.word	0x000b6250
   b4490:	2003e5cd 	.word	0x2003e5cd
   b4494:	2003e5cc 	.word	0x2003e5cc
   b4498:	2003e550 	.word	0x2003e550
   b449c:	2003e5f0 	.word	0x2003e5f0
   b44a0:	000b6260 	.word	0x000b6260
   b44a4:	000b62af 	.word	0x000b62af
   b44a8:	2003e5d8 	.word	0x2003e5d8
   b44ac:	000b62de 	.word	0x000b62de
   b44b0:	000b62ed 	.word	0x000b62ed
   b44b4:	000b623e 	.word	0x000b623e
   b44b8:	000b6272 	.word	0x000b6272
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b44bc:	4923      	ldr	r1, [pc, #140]	; (b454c <loop+0x3b4>)
   b44be:	2010      	movs	r0, #16
   b44c0:	f001 fdb4 	bl	b602c <_ZnwjRKSt9nothrow_t>
   b44c4:	4607      	mov	r7, r0
   b44c6:	2800      	cmp	r0, #0
   b44c8:	d03d      	beq.n	b4546 <loop+0x3ae>
   b44ca:	2210      	movs	r2, #16
   b44cc:	4629      	mov	r1, r5
   b44ce:	f001 fdc8 	bl	b6062 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b44d2:	4b1f      	ldr	r3, [pc, #124]	; (b4550 <loop+0x3b8>)
   b44d4:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b44d6:	2301      	movs	r3, #1
   b44d8:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b44da:	6923      	ldr	r3, [r4, #16]
   b44dc:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b44de:	2302      	movs	r3, #2
   b44e0:	81bb      	strh	r3, [r7, #12]
            wakeupSource->mode = mode;
   b44e2:	73bb      	strb	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b44e4:	6127      	str	r7, [r4, #16]
   b44e6:	e788      	b.n	b43fa <loop+0x262>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b44e8:	4918      	ldr	r1, [pc, #96]	; (b454c <loop+0x3b4>)
   b44ea:	2010      	movs	r0, #16
   b44ec:	f001 fd9e 	bl	b602c <_ZnwjRKSt9nothrow_t>
   b44f0:	4605      	mov	r5, r0
   b44f2:	b340      	cbz	r0, b4546 <loop+0x3ae>
   b44f4:	2210      	movs	r2, #16
   b44f6:	4639      	mov	r1, r7
   b44f8:	f001 fdb3 	bl	b6062 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b44fc:	4b14      	ldr	r3, [pc, #80]	; (b4550 <loop+0x3b8>)
   b44fe:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4500:	2304      	movs	r3, #4
   b4502:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4504:	6923      	ldr	r3, [r4, #16]
   b4506:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   b4508:	f247 5330 	movw	r3, #30000	; 0x7530
   b450c:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b450e:	6125      	str	r5, [r4, #16]
   b4510:	e780      	b.n	b4414 <loop+0x27c>
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   b4512:	6881      	ldr	r1, [r0, #8]
   b4514:	e782      	b.n	b441c <loop+0x284>
            }
#if HAL_PLATFORM_RTL872X
            auto wakeupSource = (hal_wakeup_source_network_t*)system_pool_alloc(sizeof(hal_wakeup_source_network_t), nullptr);
#else
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   b4516:	490d      	ldr	r1, [pc, #52]	; (b454c <loop+0x3b4>)
   b4518:	2014      	movs	r0, #20
   b451a:	f001 fd87 	bl	b602c <_ZnwjRKSt9nothrow_t>
   b451e:	4607      	mov	r7, r0
   b4520:	b178      	cbz	r0, b4542 <loop+0x3aa>
   b4522:	2214      	movs	r2, #20
   b4524:	4629      	mov	r1, r5
   b4526:	f001 fd9c 	bl	b6062 <memset>
#endif
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b452a:	4b09      	ldr	r3, [pc, #36]	; (b4550 <loop+0x3b8>)
   b452c:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   b452e:	230e      	movs	r3, #14
   b4530:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4532:	6923      	ldr	r3, [r4, #16]
   b4534:	60bb      	str	r3, [r7, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   b4536:	2304      	movs	r3, #4
   b4538:	733b      	strb	r3, [r7, #12]
            wakeupSource->flags = flags.value();
   b453a:	2301      	movs	r3, #1
   b453c:	81fb      	strh	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b453e:	6127      	str	r7, [r4, #16]
   b4540:	e77b      	b.n	b443a <loop+0x2a2>
                valid_ = false;
   b4542:	7525      	strb	r5, [r4, #20]
                return *this;
   b4544:	e779      	b.n	b443a <loop+0x2a2>
                valid_ = false;
   b4546:	7525      	strb	r5, [r4, #20]
                return *this;
   b4548:	e764      	b.n	b4414 <loop+0x27c>
   b454a:	bf00      	nop
   b454c:	000b64e8 	.word	0x000b64e8
   b4550:	00030010 	.word	0x00030010

000b4554 <_GLOBAL__sub_I_real_time>:

  Serial.print("Sleeping for ");
  Serial.println(seconds_to_sleep);

  return seconds_to_sleep;
}
   b4554:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b4556:	4b13      	ldr	r3, [pc, #76]	; (b45a4 <_GLOBAL__sub_I_real_time+0x50>)
   b4558:	2501      	movs	r5, #1
   b455a:	701d      	strb	r5, [r3, #0]
   b455c:	4b12      	ldr	r3, [pc, #72]	; (b45a8 <_GLOBAL__sub_I_real_time+0x54>)
   b455e:	2208      	movs	r2, #8
   b4560:	701a      	strb	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b4562:	4b12      	ldr	r3, [pc, #72]	; (b45ac <_GLOBAL__sub_I_real_time+0x58>)
    SleepResult() {}
   b4564:	4a12      	ldr	r2, [pc, #72]	; (b45b0 <_GLOBAL__sub_I_real_time+0x5c>)
   b4566:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4568:	2400      	movs	r4, #0
   b456a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b456e:	2003      	movs	r0, #3
   b4570:	f000 f96a 	bl	b4848 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4574:	4621      	mov	r1, r4
   b4576:	4628      	mov	r0, r5
   b4578:	f000 f976 	bl	b4868 <system_thread_set_state>
FuelGauge batteryMonitor;
   b457c:	4621      	mov	r1, r4
   b457e:	480d      	ldr	r0, [pc, #52]	; (b45b4 <_GLOBAL__sub_I_real_time+0x60>)
   b4580:	f000 fe0e 	bl	b51a0 <_ZN9FuelGaugeC1Eb>
        : config_(config) {
   b4584:	4b0c      	ldr	r3, [pc, #48]	; (b45b8 <_GLOBAL__sub_I_real_time+0x64>)
String statement;
   b4586:	490d      	ldr	r1, [pc, #52]	; (b45bc <_GLOBAL__sub_I_real_time+0x68>)
              valid_(true) {
   b4588:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b458a:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b458c:	e9c3 4402 	strd	r4, r4, [r3, #8]
        : config_(config) {
   b4590:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4592:	4a0b      	ldr	r2, [pc, #44]	; (b45c0 <_GLOBAL__sub_I_real_time+0x6c>)
   b4594:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4596:	751d      	strb	r5, [r3, #20]
}
   b4598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String statement;
   b459c:	4809      	ldr	r0, [pc, #36]	; (b45c4 <_GLOBAL__sub_I_real_time+0x70>)
   b459e:	f000 bc17 	b.w	b4dd0 <_ZN6StringC1EPK19__FlashStringHelper>
   b45a2:	bf00      	nop
   b45a4:	2003e5cc 	.word	0x2003e5cc
   b45a8:	2003e5cd 	.word	0x2003e5cd
   b45ac:	2003e5c0 	.word	0x2003e5c0
   b45b0:	ffff0000 	.word	0xffff0000
   b45b4:	2003e5d0 	.word	0x2003e5d0
   b45b8:	2003e5d8 	.word	0x2003e5d8
   b45bc:	000b623d 	.word	0x000b623d
   b45c0:	00030010 	.word	0x00030010
   b45c4:	2003e674 	.word	0x2003e674

000b45c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <netdb_freeaddrinfo+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	689b      	ldr	r3, [r3, #8]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030268 	.word	0x00030268

000b45d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <netdb_getaddrinfo+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	68db      	ldr	r3, [r3, #12]
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030268 	.word	0x00030268

000b45e8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <hal_gpio_mode+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	689b      	ldr	r3, [r3, #8]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	0003022c 	.word	0x0003022c

000b45f8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <hal_gpio_get_mode+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	68db      	ldr	r3, [r3, #12]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	0003022c 	.word	0x0003022c

000b4608 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <hal_gpio_write+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	691b      	ldr	r3, [r3, #16]
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	0003022c 	.word	0x0003022c

000b4618 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <HAL_RNG_GetRandomNumber+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	685b      	ldr	r3, [r3, #4]
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030218 	.word	0x00030218

000b4628 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	695b      	ldr	r3, [r3, #20]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	00030218 	.word	0x00030218

000b4638 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <hal_rtc_time_is_valid+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030218 	.word	0x00030218

000b4648 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <hal_rtc_get_time+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	00030218 	.word	0x00030218

000b4658 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <os_mutex_recursive_create+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030248 	.word	0x00030248

000b4668 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <inet_inet_ntop+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	695b      	ldr	r3, [r3, #20]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	00030264 	.word	0x00030264

000b4678 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <hal_usart_end+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	689b      	ldr	r3, [r3, #8]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	0003023c 	.word	0x0003023c

000b4688 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <hal_usart_write+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	68db      	ldr	r3, [r3, #12]
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	0003023c 	.word	0x0003023c

000b4698 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <hal_usart_available+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	691b      	ldr	r3, [r3, #16]
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	0003023c 	.word	0x0003023c

000b46a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <hal_usart_read+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	695b      	ldr	r3, [r3, #20]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	0003023c 	.word	0x0003023c

000b46b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <hal_usart_peek+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	699b      	ldr	r3, [r3, #24]
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	0003023c 	.word	0x0003023c

000b46c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <hal_usart_flush+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	69db      	ldr	r3, [r3, #28]
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	0003023c 	.word	0x0003023c

000b46d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <hal_usart_is_enabled+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6a1b      	ldr	r3, [r3, #32]
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	0003023c 	.word	0x0003023c

000b46e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <hal_usart_available_data_for_write+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	0003023c 	.word	0x0003023c

000b46f8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <hal_usart_begin_config+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	0003023c 	.word	0x0003023c

000b4708 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <hal_usart_init_ex+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	0003023c 	.word	0x0003023c

000b4718 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <hal_i2c_write+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	6a1b      	ldr	r3, [r3, #32]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	00030228 	.word	0x00030228

000b4728 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <hal_i2c_available+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	00030228 	.word	0x00030228

000b4738 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <hal_i2c_read+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	00030228 	.word	0x00030228

000b4748 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <hal_i2c_peek+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030228 	.word	0x00030228

000b4758 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <hal_i2c_flush+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030228 	.word	0x00030228

000b4768 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <hal_i2c_is_enabled+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030228 	.word	0x00030228

000b4778 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <hal_i2c_init+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030228 	.word	0x00030228

000b4788 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <hal_i2c_lock+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030228 	.word	0x00030228

000b4798 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <hal_spi_init+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	69db      	ldr	r3, [r3, #28]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	00030230 	.word	0x00030230

000b47a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <hal_spi_is_enabled+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	6a1b      	ldr	r3, [r3, #32]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	00030230 	.word	0x00030230

000b47b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <HAL_USB_USART_Init+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	681b      	ldr	r3, [r3, #0]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003024c 	.word	0x0003024c

000b47c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <HAL_USB_USART_Begin+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	685b      	ldr	r3, [r3, #4]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	0003024c 	.word	0x0003024c

000b47d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <HAL_USB_USART_Available_Data+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	691b      	ldr	r3, [r3, #16]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003024c 	.word	0x0003024c

000b47e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	695b      	ldr	r3, [r3, #20]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	0003024c 	.word	0x0003024c

000b47f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <HAL_USB_USART_Receive_Data+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	699b      	ldr	r3, [r3, #24]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	0003024c 	.word	0x0003024c

000b4808 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <HAL_USB_USART_Send_Data+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	69db      	ldr	r3, [r3, #28]
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	0003024c 	.word	0x0003024c

000b4818 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <HAL_USB_USART_Flush_Data+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6a1b      	ldr	r3, [r3, #32]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	0003024c 	.word	0x0003024c

000b4828 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <log_message+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030260 	.word	0x00030260

000b4838 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <system_mode+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	681b      	ldr	r3, [r3, #0]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030220 	.word	0x00030220

000b4848 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <set_system_mode+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	685b      	ldr	r3, [r3, #4]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	00030220 	.word	0x00030220

000b4858 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <system_delay_ms+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	695b      	ldr	r3, [r3, #20]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	00030220 	.word	0x00030220

000b4868 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <system_thread_set_state+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	00030220 	.word	0x00030220

000b4878 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <application_thread_current+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	00030220 	.word	0x00030220

000b4888 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <application_thread_invoke+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030220 	.word	0x00030220

000b4898 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <system_thread_get_state+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030220 	.word	0x00030220

000b48a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b03      	ldr	r3, [pc, #12]	; (b48b8 <system_ctrl_set_app_request_handler+0x10>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b48b2:	9301      	str	r3, [sp, #4]
   b48b4:	bd08      	pop	{r3, pc}
   b48b6:	0000      	.short	0x0000
   b48b8:	00030220 	.word	0x00030220

000b48bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b03      	ldr	r3, [pc, #12]	; (b48cc <system_ctrl_set_result+0x10>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b48c6:	9301      	str	r3, [sp, #4]
   b48c8:	bd08      	pop	{r3, pc}
   b48ca:	0000      	.short	0x0000
   b48cc:	00030220 	.word	0x00030220

000b48d0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b03      	ldr	r3, [pc, #12]	; (b48e0 <system_sleep_ext+0x10>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b48da:	9301      	str	r3, [sp, #4]
   b48dc:	bd08      	pop	{r3, pc}
   b48de:	0000      	.short	0x0000
   b48e0:	00030220 	.word	0x00030220

000b48e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <network_connect+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	685b      	ldr	r3, [r3, #4]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030240 	.word	0x00030240

000b48f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <network_connecting+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	689b      	ldr	r3, [r3, #8]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030240 	.word	0x00030240

000b4904 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <network_disconnect+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	68db      	ldr	r3, [r3, #12]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030240 	.word	0x00030240

000b4914 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <network_ready+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	691b      	ldr	r3, [r3, #16]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030240 	.word	0x00030240

000b4924 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <network_on+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	695b      	ldr	r3, [r3, #20]
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030240 	.word	0x00030240

000b4934 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <network_off+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	699b      	ldr	r3, [r3, #24]
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030240 	.word	0x00030240

000b4944 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <network_listen+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	69db      	ldr	r3, [r3, #28]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030240 	.word	0x00030240

000b4954 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <network_listening+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	6a1b      	ldr	r3, [r3, #32]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030240 	.word	0x00030240

000b4964 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <network_set_listen_timeout+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030240 	.word	0x00030240

000b4974 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <network_get_listen_timeout+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030240 	.word	0x00030240

000b4984 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <network_is_on+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030240 	.word	0x00030240

000b4994 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <network_is_off+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030240 	.word	0x00030240

000b49a4 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <network_prefer+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030240 	.word	0x00030240

000b49b4 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <network_is_preferred+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030240 	.word	0x00030240

000b49c4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <spark_process+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	689b      	ldr	r3, [r3, #8]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030244 	.word	0x00030244

000b49d4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <spark_cloud_flag_connect+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	68db      	ldr	r3, [r3, #12]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030244 	.word	0x00030244

000b49e4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <spark_cloud_flag_connected+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	695b      	ldr	r3, [r3, #20]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030244 	.word	0x00030244

000b49f4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <spark_send_event+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	6a1b      	ldr	r3, [r3, #32]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030244 	.word	0x00030244

000b4a04 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <spark_sync_time_pending+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030244 	.word	0x00030244

000b4a14 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <spark_set_connection_property+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030244 	.word	0x00030244

000b4a24 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030244 	.word	0x00030244

000b4a34 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <malloc+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	681b      	ldr	r3, [r3, #0]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	0003021c 	.word	0x0003021c

000b4a44 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <free+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	685b      	ldr	r3, [r3, #4]
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003021c 	.word	0x0003021c

000b4a54 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <realloc+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	689b      	ldr	r3, [r3, #8]
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	0003021c 	.word	0x0003021c

000b4a64 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <vsnprintf+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	0003021c 	.word	0x0003021c

000b4a74 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <abort+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	0003021c 	.word	0x0003021c

000b4a84 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <_malloc_r+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	0003021c 	.word	0x0003021c

000b4a94 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <__assert_func+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	0003021c 	.word	0x0003021c

000b4aa4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <newlib_impure_ptr_callback+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	0003021c 	.word	0x0003021c

000b4ab4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ab4:	2200      	movs	r2, #0
   b4ab6:	6840      	ldr	r0, [r0, #4]
   b4ab8:	4611      	mov	r1, r2
   b4aba:	f7ff bf4b 	b.w	b4954 <network_listening>

000b4abe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4abe:	2200      	movs	r2, #0
   b4ac0:	6840      	ldr	r0, [r0, #4]
   b4ac2:	4611      	mov	r1, r2
   b4ac4:	f7ff bf56 	b.w	b4974 <network_get_listen_timeout>

000b4ac8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ac8:	6840      	ldr	r0, [r0, #4]
   b4aca:	2200      	movs	r2, #0
   b4acc:	f7ff bf4a 	b.w	b4964 <network_set_listen_timeout>

000b4ad0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ad0:	6840      	ldr	r0, [r0, #4]
   b4ad2:	2200      	movs	r2, #0
   b4ad4:	f081 0101 	eor.w	r1, r1, #1
   b4ad8:	f7ff bf34 	b.w	b4944 <network_listen>

000b4adc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4adc:	2300      	movs	r3, #0
   b4ade:	6840      	ldr	r0, [r0, #4]
   b4ae0:	461a      	mov	r2, r3
   b4ae2:	4619      	mov	r1, r3
   b4ae4:	f7ff bf26 	b.w	b4934 <network_off>

000b4ae8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4ae8:	2300      	movs	r3, #0
   b4aea:	6840      	ldr	r0, [r0, #4]
   b4aec:	461a      	mov	r2, r3
   b4aee:	4619      	mov	r1, r3
   b4af0:	f7ff bf18 	b.w	b4924 <network_on>

000b4af4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4af4:	2200      	movs	r2, #0
   b4af6:	6840      	ldr	r0, [r0, #4]
   b4af8:	4611      	mov	r1, r2
   b4afa:	f7ff bf0b 	b.w	b4914 <network_ready>

000b4afe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4afe:	2200      	movs	r2, #0
   b4b00:	6840      	ldr	r0, [r0, #4]
   b4b02:	4611      	mov	r1, r2
   b4b04:	f7ff bef6 	b.w	b48f4 <network_connecting>

000b4b08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b08:	6840      	ldr	r0, [r0, #4]
   b4b0a:	2200      	movs	r2, #0
   b4b0c:	2102      	movs	r1, #2
   b4b0e:	f7ff bef9 	b.w	b4904 <network_disconnect>

000b4b12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b12:	2300      	movs	r3, #0
   b4b14:	6840      	ldr	r0, [r0, #4]
   b4b16:	461a      	mov	r2, r3
   b4b18:	f7ff bee4 	b.w	b48e4 <network_connect>

000b4b1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b1c:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b1e:	2203      	movs	r2, #3
   b4b20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b22:	4a02      	ldr	r2, [pc, #8]	; (b4b2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4b24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4b26:	4770      	bx	lr
   b4b28:	2003e684 	.word	0x2003e684
   b4b2c:	000b6310 	.word	0x000b6310

000b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4b30:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4b32:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4b34:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4b36:	b17c      	cbz	r4, b4b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4b38:	6863      	ldr	r3, [r4, #4]
   b4b3a:	3b01      	subs	r3, #1
   b4b3c:	6063      	str	r3, [r4, #4]
   b4b3e:	b95b      	cbnz	r3, b4b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4b40:	6823      	ldr	r3, [r4, #0]
   b4b42:	4620      	mov	r0, r4
   b4b44:	689b      	ldr	r3, [r3, #8]
   b4b46:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b48:	68a3      	ldr	r3, [r4, #8]
   b4b4a:	3b01      	subs	r3, #1
   b4b4c:	60a3      	str	r3, [r4, #8]
   b4b4e:	b91b      	cbnz	r3, b4b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4b50:	6823      	ldr	r3, [r4, #0]
   b4b52:	4620      	mov	r0, r4
   b4b54:	68db      	ldr	r3, [r3, #12]
   b4b56:	4798      	blx	r3
      }
   b4b58:	4628      	mov	r0, r5
   b4b5a:	bd38      	pop	{r3, r4, r5, pc}

000b4b5c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4b5c:	b510      	push	{r4, lr}
   b4b5e:	4604      	mov	r4, r0
   b4b60:	4608      	mov	r0, r1
{
    _spi = spi;
   b4b62:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4b64:	f7ff fe18 	bl	b4798 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4b68:	2300      	movs	r3, #0
   b4b6a:	6063      	str	r3, [r4, #4]
}
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	bd10      	pop	{r4, pc}

000b4b70 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4b70:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4b72:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4b74:	4604      	mov	r4, r0
      if (_M_manager)
   b4b76:	b113      	cbz	r3, b4b7e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b78:	2203      	movs	r2, #3
   b4b7a:	4601      	mov	r1, r0
   b4b7c:	4798      	blx	r3
    }
   b4b7e:	4620      	mov	r0, r4
   b4b80:	bd10      	pop	{r4, pc}

000b4b82 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b4b82:	b510      	push	{r4, lr}
   b4b84:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4b86:	6800      	ldr	r0, [r0, #0]
   b4b88:	b118      	cbz	r0, b4b92 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b4b8a:	f7ff ff5b 	bl	b4a44 <free>
            wakeupSource_ = nullptr;
   b4b8e:	2300      	movs	r3, #0
   b4b90:	6023      	str	r3, [r4, #0]
        }
    }
   b4b92:	bd10      	pop	{r4, pc}

000b4b94 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b4b94:	b538      	push	{r3, r4, r5, lr}
   b4b96:	460c      	mov	r4, r1
   b4b98:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b4b9a:	f7ff fff2 	bl	b4b82 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b4b9e:	b154      	cbz	r4, b4bb6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b4ba0:	8820      	ldrh	r0, [r4, #0]
   b4ba2:	f7ff ff47 	bl	b4a34 <malloc>
   b4ba6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b4ba8:	b128      	cbz	r0, b4bb6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b4baa:	8822      	ldrh	r2, [r4, #0]
   b4bac:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b4bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b4bb2:	f001 ba48 	b.w	b6046 <memcpy>
    }
   b4bb6:	bd38      	pop	{r3, r4, r5, pc}

000b4bb8 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b4bb8:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b4bba:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b4bbe:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b4bc0:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b4bc4:	f8c0 3006 	str.w	r3, [r0, #6]
   b4bc8:	894b      	ldrh	r3, [r1, #10]
   b4bca:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b4bcc:	460c      	mov	r4, r1
   b4bce:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b4bd0:	f7ff ffd7 	bl	b4b82 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b4bd4:	6823      	ldr	r3, [r4, #0]
   b4bd6:	b113      	cbz	r3, b4bde <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b4bd8:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b4bda:	2300      	movs	r3, #0
   b4bdc:	6023      	str	r3, [r4, #0]
    }
   b4bde:	bd38      	pop	{r3, r4, r5, pc}

000b4be0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b4be0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4be2:	4d2b      	ldr	r5, [pc, #172]	; (b4c90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b4be4:	7d0b      	ldrb	r3, [r1, #20]
   b4be6:	4604      	mov	r4, r0
   b4be8:	b08b      	sub	sp, #44	; 0x2c
   b4bea:	4608      	mov	r0, r1
   b4bec:	1daf      	adds	r7, r5, #6
   b4bee:	2b00      	cmp	r3, #0
   b4bf0:	d036      	beq.n	b4c60 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b4bf2:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b4bf4:	791b      	ldrb	r3, [r3, #4]
   b4bf6:	2b00      	cmp	r3, #0
   b4bf8:	d032      	beq.n	b4c60 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b4bfa:	4b26      	ldr	r3, [pc, #152]	; (b4c94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b4bfc:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b4bfe:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b4c00:	a902      	add	r1, sp, #8
   b4c02:	3004      	adds	r0, #4
   b4c04:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b4c08:	f7ff fe62 	bl	b48d0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b4c0c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b4c10:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b4c14:	b200      	sxth	r0, r0
   b4c16:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b4c1a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b4c1e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b4c20:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b4c22:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b4c24:	4628      	mov	r0, r5
   b4c26:	f7ff ffb5 	bl	b4b94 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b4c2a:	a802      	add	r0, sp, #8
   b4c2c:	f7ff ffa9 	bl	b4b82 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b4c30:	2300      	movs	r3, #0
   b4c32:	6023      	str	r3, [r4, #0]
   b4c34:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b4c36:	71a3      	strb	r3, [r4, #6]
   b4c38:	8123      	strh	r3, [r4, #8]
   b4c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4c3e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b4c40:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b4c44:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b4c46:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b4c4a:	f8c4 3006 	str.w	r3, [r4, #6]
   b4c4e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b4c50:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b4c52:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b4c54:	4620      	mov	r0, r4
   b4c56:	f7ff ff9d 	bl	b4b94 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b4c5a:	4620      	mov	r0, r4
   b4c5c:	b00b      	add	sp, #44	; 0x2c
   b4c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b4c60:	2600      	movs	r6, #0
   b4c62:	2320      	movs	r3, #32
   b4c64:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b4c68:	4b0b      	ldr	r3, [pc, #44]	; (b4c98 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b4c6a:	9300      	str	r3, [sp, #0]
   b4c6c:	aa02      	add	r2, sp, #8
   b4c6e:	4633      	mov	r3, r6
   b4c70:	490a      	ldr	r1, [pc, #40]	; (b4c9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b4c72:	2032      	movs	r0, #50	; 0x32
   b4c74:	f7ff fdd8 	bl	b4828 <log_message>
            : wakeupSource_(nullptr),
   b4c78:	4b06      	ldr	r3, [pc, #24]	; (b4c94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b4c7a:	4805      	ldr	r0, [pc, #20]	; (b4c90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b4c7c:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b4c7e:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b4c82:	a902      	add	r1, sp, #8
   b4c84:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b4c88:	f7ff ff96 	bl	b4bb8 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b4c8c:	e7cd      	b.n	b4c2a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b4c8e:	bf00      	nop
   b4c90:	2003e68c 	.word	0x2003e68c
   b4c94:	ffff0000 	.word	0xffff0000
   b4c98:	000b6353 	.word	0x000b6353
   b4c9c:	000b634c 	.word	0x000b634c

000b4ca0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4ca0:	4b05      	ldr	r3, [pc, #20]	; (b4cb8 <_GLOBAL__sub_I_System+0x18>)
   b4ca2:	2202      	movs	r2, #2
   b4ca4:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b4ca6:	4b05      	ldr	r3, [pc, #20]	; (b4cbc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ca8:	4a05      	ldr	r2, [pc, #20]	; (b4cc0 <_GLOBAL__sub_I_System+0x20>)
   b4caa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4cac:	2000      	movs	r0, #0
   b4cae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4cb2:	f7ff bdc9 	b.w	b4848 <set_system_mode>
   b4cb6:	bf00      	nop
   b4cb8:	2003e698 	.word	0x2003e698
   b4cbc:	2003e68c 	.word	0x2003e68c
   b4cc0:	ffff0000 	.word	0xffff0000

000b4cc4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b4cc4:	b510      	push	{r4, lr}
   b4cc6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b4cc8:	f7ff f9a8 	bl	b401c <strlen>
   b4ccc:	3801      	subs	r0, #1
   b4cce:	1823      	adds	r3, r4, r0
   b4cd0:	4620      	mov	r0, r4
	while(i<j){
   b4cd2:	4283      	cmp	r3, r0
   b4cd4:	d906      	bls.n	b4ce4 <_Z11str_reversePc+0x20>
		c = *i;
   b4cd6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4cd8:	7819      	ldrb	r1, [r3, #0]
   b4cda:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b4cde:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b4ce2:	e7f6      	b.n	b4cd2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b4ce4:	bd10      	pop	{r4, pc}

000b4ce6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b4ce6:	b570      	push	{r4, r5, r6, lr}
   b4ce8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b4cea:	1e91      	subs	r1, r2, #2
   b4cec:	2922      	cmp	r1, #34	; 0x22
   b4cee:	d81d      	bhi.n	b4d2c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b4cf0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b4cf2:	b930      	cbnz	r0, b4d02 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b4cf4:	4423      	add	r3, r4
            *ptr++ = '0';
   b4cf6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b4cf8:	429d      	cmp	r5, r3
   b4cfa:	d210      	bcs.n	b4d1e <ultoa+0x38>
            *ptr++ = '0';
   b4cfc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b4d00:	e7fa      	b.n	b4cf8 <ultoa+0x12>
            result.quot = a/radix;
   b4d02:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b4d06:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b4d0a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b4d0c:	2809      	cmp	r0, #9
                *ptr += '0';
   b4d0e:	bf94      	ite	ls
   b4d10:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b4d12:	3157      	addhi	r1, #87	; 0x57
   b4d14:	b2c9      	uxtb	r1, r1
   b4d16:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b4d1a:	4630      	mov	r0, r6
	while(a){
   b4d1c:	e7e9      	b.n	b4cf2 <ultoa+0xc>

	*ptr = '\0';
   b4d1e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b4d20:	4620      	mov	r0, r4
	*ptr = '\0';
   b4d22:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4d24:	f7ff ffce 	bl	b4cc4 <_Z11str_reversePc>
	return buffer;
   b4d28:	4620      	mov	r0, r4
}
   b4d2a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b4d2c:	2000      	movs	r0, #0
   b4d2e:	e7fc      	b.n	b4d2a <ultoa+0x44>

000b4d30 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b4d30:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b4d32:	2301      	movs	r3, #1
   b4d34:	f7ff ffd7 	bl	b4ce6 <ultoa>
}
   b4d38:	bd08      	pop	{r3, pc}

000b4d3a <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b4d3a:	b510      	push	{r4, lr}
   b4d3c:	4604      	mov	r4, r0
{
    free(buffer);
   b4d3e:	6800      	ldr	r0, [r0, #0]
   b4d40:	f7ff fe80 	bl	b4a44 <free>
}
   b4d44:	4620      	mov	r0, r4
   b4d46:	bd10      	pop	{r4, pc}

000b4d48 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b4d48:	b510      	push	{r4, lr}
   b4d4a:	4604      	mov	r4, r0
    if (buffer) {
   b4d4c:	6800      	ldr	r0, [r0, #0]
   b4d4e:	b108      	cbz	r0, b4d54 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b4d50:	f7ff fe78 	bl	b4a44 <free>
    }
    buffer = nullptr;
   b4d54:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b4d56:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b4d5a:	6023      	str	r3, [r4, #0]
}
   b4d5c:	bd10      	pop	{r4, pc}

000b4d5e <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4d5e:	b538      	push	{r3, r4, r5, lr}
   b4d60:	4604      	mov	r4, r0
   b4d62:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4d64:	6800      	ldr	r0, [r0, #0]
   b4d66:	3101      	adds	r1, #1
   b4d68:	f7ff fe74 	bl	b4a54 <realloc>
    if (newbuffer) {
   b4d6c:	b110      	cbz	r0, b4d74 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b4d6e:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4d72:	2001      	movs	r0, #1
    }
    return 0;
}
   b4d74:	bd38      	pop	{r3, r4, r5, pc}

000b4d76 <_ZN6String7reserveEj>:
{
   b4d76:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b4d78:	6803      	ldr	r3, [r0, #0]
{
   b4d7a:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b4d7c:	b123      	cbz	r3, b4d88 <_ZN6String7reserveEj+0x12>
   b4d7e:	6843      	ldr	r3, [r0, #4]
   b4d80:	428b      	cmp	r3, r1
   b4d82:	d301      	bcc.n	b4d88 <_ZN6String7reserveEj+0x12>
   b4d84:	2001      	movs	r0, #1
}
   b4d86:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b4d88:	4620      	mov	r0, r4
   b4d8a:	f7ff ffe8 	bl	b4d5e <_ZN6String12changeBufferEj>
   b4d8e:	2800      	cmp	r0, #0
   b4d90:	d0f9      	beq.n	b4d86 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4d92:	68a3      	ldr	r3, [r4, #8]
   b4d94:	2b00      	cmp	r3, #0
   b4d96:	d1f5      	bne.n	b4d84 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b4d98:	6822      	ldr	r2, [r4, #0]
   b4d9a:	7013      	strb	r3, [r2, #0]
   b4d9c:	e7f2      	b.n	b4d84 <_ZN6String7reserveEj+0xe>

000b4d9e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4d9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4da0:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4da2:	4611      	mov	r1, r2
   b4da4:	9201      	str	r2, [sp, #4]
{
   b4da6:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b4da8:	f7ff ffe5 	bl	b4d76 <_ZN6String7reserveEj>
   b4dac:	9a01      	ldr	r2, [sp, #4]
   b4dae:	b928      	cbnz	r0, b4dbc <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b4db0:	4620      	mov	r0, r4
   b4db2:	f7ff ffc9 	bl	b4d48 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b4db6:	4620      	mov	r0, r4
   b4db8:	b003      	add	sp, #12
   b4dba:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4dbc:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4dbe:	4629      	mov	r1, r5
   b4dc0:	6820      	ldr	r0, [r4, #0]
   b4dc2:	f001 f940 	bl	b6046 <memcpy>
    buffer[len] = 0;
   b4dc6:	6822      	ldr	r2, [r4, #0]
   b4dc8:	68a3      	ldr	r3, [r4, #8]
   b4dca:	2100      	movs	r1, #0
   b4dcc:	54d1      	strb	r1, [r2, r3]
    return *this;
   b4dce:	e7f2      	b.n	b4db6 <_ZN6String4copyEPKcj+0x18>

000b4dd0 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b4dd0:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4dd2:	b513      	push	{r0, r1, r4, lr}
    capacity_ = 0;
   b4dd4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4dd8:	4604      	mov	r4, r0
    len = 0;
   b4dda:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4ddc:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b4dde:	b141      	cbz	r1, b4df2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b4de0:	4608      	mov	r0, r1
   b4de2:	9101      	str	r1, [sp, #4]
   b4de4:	f7ff f91a 	bl	b401c <strlen>
   b4de8:	9901      	ldr	r1, [sp, #4]
   b4dea:	4602      	mov	r2, r0
   b4dec:	4620      	mov	r0, r4
   b4dee:	f7ff ffd6 	bl	b4d9e <_ZN6String4copyEPKcj>
}
   b4df2:	4620      	mov	r0, r4
   b4df4:	b002      	add	sp, #8
   b4df6:	bd10      	pop	{r4, pc}

000b4df8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b4df8:	b538      	push	{r3, r4, r5, lr}
   b4dfa:	4605      	mov	r5, r0
    if (buffer) {
   b4dfc:	6800      	ldr	r0, [r0, #0]
{
   b4dfe:	460c      	mov	r4, r1
    if (buffer) {
   b4e00:	b170      	cbz	r0, b4e20 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b4e02:	686a      	ldr	r2, [r5, #4]
   b4e04:	688b      	ldr	r3, [r1, #8]
   b4e06:	429a      	cmp	r2, r3
   b4e08:	d308      	bcc.n	b4e1c <_ZN6String4moveERS_+0x24>
   b4e0a:	6809      	ldr	r1, [r1, #0]
   b4e0c:	b131      	cbz	r1, b4e1c <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b4e0e:	f001 f95f 	bl	b60d0 <strcpy>
            len = rhs.len;
   b4e12:	68a3      	ldr	r3, [r4, #8]
   b4e14:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b4e16:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b4e18:	60a3      	str	r3, [r4, #8]
}
   b4e1a:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b4e1c:	f7ff fe12 	bl	b4a44 <free>
    buffer = rhs.buffer;
   b4e20:	6823      	ldr	r3, [r4, #0]
   b4e22:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b4e24:	6863      	ldr	r3, [r4, #4]
   b4e26:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b4e28:	68a3      	ldr	r3, [r4, #8]
   b4e2a:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b4e2c:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b4e2e:	e9c4 3300 	strd	r3, r3, [r4]
   b4e32:	e7f1      	b.n	b4e18 <_ZN6String4moveERS_+0x20>

000b4e34 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
   b4e34:	4288      	cmp	r0, r1
{
   b4e36:	b510      	push	{r4, lr}
   b4e38:	4604      	mov	r4, r0
    if (this != &rval) {
   b4e3a:	d001      	beq.n	b4e40 <_ZN6StringaSEOS_+0xc>
        move(rval);
   b4e3c:	f7ff ffdc 	bl	b4df8 <_ZN6String4moveERS_>
    }
    return *this;
}
   b4e40:	4620      	mov	r0, r4
   b4e42:	bd10      	pop	{r4, pc}

000b4e44 <_ZN6StringaSEO15StringSumHelper>:

String & String::operator = (StringSumHelper &&rval)
{
    if (this != &rval) {
   b4e44:	4288      	cmp	r0, r1
{
   b4e46:	b510      	push	{r4, lr}
   b4e48:	4604      	mov	r4, r0
    if (this != &rval) {
   b4e4a:	d001      	beq.n	b4e50 <_ZN6StringaSEO15StringSumHelper+0xc>
        move(rval);
   b4e4c:	f7ff ffd4 	bl	b4df8 <_ZN6String4moveERS_>
    }
    return *this;
}
   b4e50:	4620      	mov	r0, r4
   b4e52:	bd10      	pop	{r4, pc}

000b4e54 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   b4e54:	b513      	push	{r0, r1, r4, lr}
   b4e56:	4604      	mov	r4, r0
    if (cstr) {
   b4e58:	b159      	cbz	r1, b4e72 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b4e5a:	4608      	mov	r0, r1
   b4e5c:	9101      	str	r1, [sp, #4]
   b4e5e:	f7ff f8dd 	bl	b401c <strlen>
   b4e62:	9901      	ldr	r1, [sp, #4]
   b4e64:	4602      	mov	r2, r0
   b4e66:	4620      	mov	r0, r4
   b4e68:	f7ff ff99 	bl	b4d9e <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	b002      	add	sp, #8
   b4e70:	bd10      	pop	{r4, pc}
        invalidate();
   b4e72:	f7ff ff69 	bl	b4d48 <_ZN6String10invalidateEv>
   b4e76:	e7f9      	b.n	b4e6c <_ZN6StringaSEPKc+0x18>

000b4e78 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   b4e78:	b570      	push	{r4, r5, r6, lr}
   b4e7a:	460d      	mov	r5, r1
   b4e7c:	b08a      	sub	sp, #40	; 0x28
    buffer = nullptr;
   b4e7e:	2100      	movs	r1, #0
String::String(unsigned int value, unsigned char base)
   b4e80:	4604      	mov	r4, r0
    capacity_ = 0;
   b4e82:	e9c0 1100 	strd	r1, r1, [r0]
String::String(unsigned int value, unsigned char base)
   b4e86:	4616      	mov	r6, r2
    len = 0;
   b4e88:	6081      	str	r1, [r0, #8]
    flags = 0;
   b4e8a:	7301      	strb	r1, [r0, #12]
    char buf[33] = {};
   b4e8c:	221d      	movs	r2, #29
   b4e8e:	a802      	add	r0, sp, #8
   b4e90:	9101      	str	r1, [sp, #4]
   b4e92:	f001 f8e6 	bl	b6062 <memset>
    utoa(value, buf, base);
   b4e96:	4632      	mov	r2, r6
   b4e98:	a901      	add	r1, sp, #4
   b4e9a:	4628      	mov	r0, r5
   b4e9c:	f7ff ff48 	bl	b4d30 <utoa>
    *this = buf;
   b4ea0:	a901      	add	r1, sp, #4
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	f7ff ffd6 	bl	b4e54 <_ZN6StringaSEPKc>
}
   b4ea8:	4620      	mov	r0, r4
   b4eaa:	b00a      	add	sp, #40	; 0x28
   b4eac:	bd70      	pop	{r4, r5, r6, pc}

000b4eae <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4eb0:	4604      	mov	r4, r0
   b4eb2:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
   b4eb4:	460f      	mov	r7, r1
   b4eb6:	b909      	cbnz	r1, b4ebc <_ZN6String6concatEPKcj+0xe>
        return 0;
   b4eb8:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
   b4eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
   b4ebc:	b18a      	cbz	r2, b4ee2 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
   b4ebe:	6885      	ldr	r5, [r0, #8]
   b4ec0:	4415      	add	r5, r2
    if (!reserve(newlen)) {
   b4ec2:	4629      	mov	r1, r5
   b4ec4:	f7ff ff57 	bl	b4d76 <_ZN6String7reserveEj>
   b4ec8:	2800      	cmp	r0, #0
   b4eca:	d0f5      	beq.n	b4eb8 <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
   b4ecc:	68a3      	ldr	r3, [r4, #8]
   b4ece:	6820      	ldr	r0, [r4, #0]
   b4ed0:	4632      	mov	r2, r6
   b4ed2:	4418      	add	r0, r3
   b4ed4:	4639      	mov	r1, r7
   b4ed6:	f001 f8b6 	bl	b6046 <memcpy>
    buffer[newlen] = 0;
   b4eda:	6823      	ldr	r3, [r4, #0]
   b4edc:	2200      	movs	r2, #0
   b4ede:	555a      	strb	r2, [r3, r5]
    len = newlen;
   b4ee0:	60a5      	str	r5, [r4, #8]
        return 1;
   b4ee2:	2001      	movs	r0, #1
   b4ee4:	e7e9      	b.n	b4eba <_ZN6String6concatEPKcj+0xc>

000b4ee6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4ee6:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b4ee8:	2300      	movs	r3, #0
   b4eea:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b4eee:	2201      	movs	r2, #1
    buf[0] = c;
   b4ef0:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b4ef4:	a901      	add	r1, sp, #4
   b4ef6:	f7ff ffda 	bl	b4eae <_ZN6String6concatEPKcj>
}
   b4efa:	b003      	add	sp, #12
   b4efc:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f00 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4f00:	b513      	push	{r0, r1, r4, lr}
   b4f02:	460b      	mov	r3, r1
   b4f04:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f06:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4f0a:	466c      	mov	r4, sp
   b4f0c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4f10:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4f14:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4f18:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4f1c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4f20:	b002      	add	sp, #8
   b4f22:	bd10      	pop	{r4, pc}

000b4f24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4f24:	4802      	ldr	r0, [pc, #8]	; (b4f30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4f26:	2300      	movs	r3, #0
   b4f28:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4f2a:	f7ff bb95 	b.w	b4658 <os_mutex_recursive_create>
   b4f2e:	bf00      	nop
   b4f30:	2003e69c 	.word	0x2003e69c

000b4f34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f36:	4606      	mov	r6, r0
   b4f38:	460d      	mov	r5, r1
  size_t n = 0;
   b4f3a:	188f      	adds	r7, r1, r2
   b4f3c:	2400      	movs	r4, #0
  while (size--) {
   b4f3e:	42bd      	cmp	r5, r7
   b4f40:	d00c      	beq.n	b4f5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4f42:	6833      	ldr	r3, [r6, #0]
   b4f44:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f48:	689b      	ldr	r3, [r3, #8]
   b4f4a:	4630      	mov	r0, r6
   b4f4c:	4798      	blx	r3
     if (chunk>=0)
   b4f4e:	1e03      	subs	r3, r0, #0
   b4f50:	db01      	blt.n	b4f56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4f52:	441c      	add	r4, r3
  while (size--) {
   b4f54:	e7f3      	b.n	b4f3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4f56:	2c00      	cmp	r4, #0
   b4f58:	bf08      	it	eq
   b4f5a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f60 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4f60:	b513      	push	{r0, r1, r4, lr}
   b4f62:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4f64:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4f66:	b159      	cbz	r1, b4f80 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4f68:	9101      	str	r1, [sp, #4]
   b4f6a:	f7ff f857 	bl	b401c <strlen>
   b4f6e:	6823      	ldr	r3, [r4, #0]
   b4f70:	9901      	ldr	r1, [sp, #4]
   b4f72:	68db      	ldr	r3, [r3, #12]
   b4f74:	4602      	mov	r2, r0
   b4f76:	4620      	mov	r0, r4
    }
   b4f78:	b002      	add	sp, #8
   b4f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4f7e:	4718      	bx	r3
    }
   b4f80:	b002      	add	sp, #8
   b4f82:	bd10      	pop	{r4, pc}

000b4f84 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b4f84:	b508      	push	{r3, lr}
  return write(str);
   b4f86:	f7ff ffeb 	bl	b4f60 <_ZN5Print5writeEPKc>
}
   b4f8a:	bd08      	pop	{r3, pc}

000b4f8c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b4f8c:	6803      	ldr	r3, [r0, #0]
   b4f8e:	689b      	ldr	r3, [r3, #8]
   b4f90:	4718      	bx	r3

000b4f92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4f92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4f94:	210d      	movs	r1, #13
{
   b4f96:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4f98:	f7ff fff8 	bl	b4f8c <_ZN5Print5printEc>
  n += print('\n');
   b4f9c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4f9e:	4604      	mov	r4, r0
  n += print('\n');
   b4fa0:	4628      	mov	r0, r5
   b4fa2:	f7ff fff3 	bl	b4f8c <_ZN5Print5printEc>
  return n;
}
   b4fa6:	4420      	add	r0, r4
   b4fa8:	bd38      	pop	{r3, r4, r5, pc}

000b4faa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4faa:	b538      	push	{r3, r4, r5, lr}
   b4fac:	4605      	mov	r5, r0
  return write(str);
   b4fae:	f7ff ffd7 	bl	b4f60 <_ZN5Print5writeEPKc>
   b4fb2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4fb4:	4628      	mov	r0, r5
   b4fb6:	f7ff ffec 	bl	b4f92 <_ZN5Print7printlnEv>
  return n;
}
   b4fba:	4420      	add	r0, r4
   b4fbc:	bd38      	pop	{r3, r4, r5, pc}

000b4fbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4fbe:	b530      	push	{r4, r5, lr}
   b4fc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4fc2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4fc4:	2a01      	cmp	r2, #1
  *str = '\0';
   b4fc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4fca:	bf98      	it	ls
   b4fcc:	220a      	movls	r2, #10
   b4fce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4fd0:	460d      	mov	r5, r1
   b4fd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4fd6:	fb01 5312 	mls	r3, r1, r2, r5
   b4fda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4fde:	2b09      	cmp	r3, #9
   b4fe0:	bf94      	ite	ls
   b4fe2:	3330      	addls	r3, #48	; 0x30
   b4fe4:	3337      	addhi	r3, #55	; 0x37
   b4fe6:	b2db      	uxtb	r3, r3
  } while(n);
   b4fe8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4fea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4fee:	d9ef      	bls.n	b4fd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ff0:	4621      	mov	r1, r4
   b4ff2:	f7ff ffb5 	bl	b4f60 <_ZN5Print5writeEPKc>
}
   b4ff6:	b00b      	add	sp, #44	; 0x2c
   b4ff8:	bd30      	pop	{r4, r5, pc}

000b4ffa <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ffe:	b086      	sub	sp, #24
   b5000:	af00      	add	r7, sp, #0
   b5002:	4605      	mov	r5, r0
   b5004:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5006:	1d38      	adds	r0, r7, #4
   b5008:	2114      	movs	r1, #20
{
   b500a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b500c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b500e:	f7ff fd29 	bl	b4a64 <vsnprintf>

    if (n<bufsize)
   b5012:	2813      	cmp	r0, #19
   b5014:	d80e      	bhi.n	b5034 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5016:	1d39      	adds	r1, r7, #4
   b5018:	4628      	mov	r0, r5
   b501a:	f7ff ffa1 	bl	b4f60 <_ZN5Print5writeEPKc>
   b501e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5020:	b11e      	cbz	r6, b502a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5022:	4628      	mov	r0, r5
   b5024:	f7ff ffb5 	bl	b4f92 <_ZN5Print7printlnEv>
   b5028:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b502a:	4620      	mov	r0, r4
   b502c:	3718      	adds	r7, #24
   b502e:	46bd      	mov	sp, r7
   b5030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5034:	f100 0308 	add.w	r3, r0, #8
   b5038:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b503c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b503e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5042:	4622      	mov	r2, r4
   b5044:	1c41      	adds	r1, r0, #1
   b5046:	683b      	ldr	r3, [r7, #0]
   b5048:	4668      	mov	r0, sp
   b504a:	f7ff fd0b 	bl	b4a64 <vsnprintf>
  return write(str);
   b504e:	4669      	mov	r1, sp
   b5050:	4628      	mov	r0, r5
   b5052:	f7ff ff85 	bl	b4f60 <_ZN5Print5writeEPKc>
   b5056:	4604      	mov	r4, r0
   b5058:	46c5      	mov	sp, r8
   b505a:	e7e1      	b.n	b5020 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b505c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b505c:	b510      	push	{r4, lr}
   b505e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5060:	f7ff fae2 	bl	b4628 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5064:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5066:	6823      	ldr	r3, [r4, #0]
   b5068:	4620      	mov	r0, r4
   b506a:	695b      	ldr	r3, [r3, #20]
   b506c:	4798      	blx	r3
    if (c >= 0) return c;
   b506e:	2800      	cmp	r0, #0
   b5070:	da08      	bge.n	b5084 <_ZN6Stream9timedReadEv+0x28>
   b5072:	f7ff fad9 	bl	b4628 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5076:	68e3      	ldr	r3, [r4, #12]
   b5078:	1ac0      	subs	r0, r0, r3
   b507a:	68a3      	ldr	r3, [r4, #8]
   b507c:	4298      	cmp	r0, r3
   b507e:	d3f2      	bcc.n	b5066 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5080:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5084:	bd10      	pop	{r4, pc}

000b5086 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b508a:	4607      	mov	r7, r0
   b508c:	460c      	mov	r4, r1
   b508e:	188e      	adds	r6, r1, r2
   b5090:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5092:	42b5      	cmp	r5, r6
   b5094:	eba5 0804 	sub.w	r8, r5, r4
   b5098:	d007      	beq.n	b50aa <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b509a:	4638      	mov	r0, r7
   b509c:	f7ff ffde 	bl	b505c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b50a0:	1e03      	subs	r3, r0, #0
   b50a2:	db02      	blt.n	b50aa <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b50a4:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b50a8:	e7f3      	b.n	b5092 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b50aa:	4640      	mov	r0, r8
   b50ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b50b0 <_ZN6Stream10setTimeoutEm>:
  _timeout = timeout;
   b50b0:	6081      	str	r1, [r0, #8]
}
   b50b2:	4770      	bx	lr

000b50b4 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b50b4:	b538      	push	{r3, r4, r5, lr}
   b50b6:	460d      	mov	r5, r1
  String ret;
   b50b8:	4907      	ldr	r1, [pc, #28]	; (b50d8 <_ZN6Stream10readStringEv+0x24>)
{
   b50ba:	4604      	mov	r4, r0
  String ret;
   b50bc:	f7ff fe88 	bl	b4dd0 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b50c0:	4628      	mov	r0, r5
   b50c2:	f7ff ffcb 	bl	b505c <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b50c6:	2800      	cmp	r0, #0
   b50c8:	db04      	blt.n	b50d4 <_ZN6Stream10readStringEv+0x20>

    // if there's not enough memory for the concatenated value, the string
    // will be left unchanged (but this isn't signalled in any way)
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
    String & operator += (char c)           {concat(c); return (*this);}
   b50ca:	b2c1      	uxtb	r1, r0
   b50cc:	4620      	mov	r0, r4
   b50ce:	f7ff ff0a 	bl	b4ee6 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b50d2:	e7f5      	b.n	b50c0 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b50d4:	4620      	mov	r0, r4
   b50d6:	bd38      	pop	{r3, r4, r5, pc}
   b50d8:	000b623d 	.word	0x000b623d

000b50dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b50dc:	4b01      	ldr	r3, [pc, #4]	; (b50e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b50de:	4a02      	ldr	r2, [pc, #8]	; (b50e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b50e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b50e2:	4770      	bx	lr
   b50e4:	2003e6a0 	.word	0x2003e6a0
   b50e8:	000b637a 	.word	0x000b637a

000b50ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b50ec:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b50ee:	2000      	movs	r0, #0
   b50f0:	f7ff fc88 	bl	b4a04 <spark_sync_time_pending>
   b50f4:	b128      	cbz	r0, b5102 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50f6:	f7ff fc75 	bl	b49e4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b50fa:	f080 0001 	eor.w	r0, r0, #1
   b50fe:	b2c0      	uxtb	r0, r0
    }
   b5100:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5102:	2001      	movs	r0, #1
   b5104:	e7fc      	b.n	b5100 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b5106 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5106:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5108:	2000      	movs	r0, #0
   b510a:	f7ff fa95 	bl	b4638 <hal_rtc_time_is_valid>
    if (rtcstate)
   b510e:	4604      	mov	r4, r0
   b5110:	b9a0      	cbnz	r0, b513c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5112:	f7ff fb91 	bl	b4838 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5116:	2801      	cmp	r0, #1
   b5118:	d110      	bne.n	b513c <_ZN9TimeClass7isValidEv+0x36>
   b511a:	4620      	mov	r0, r4
   b511c:	f7ff fbbc 	bl	b4898 <system_thread_get_state>
   b5120:	b960      	cbnz	r0, b513c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5122:	f7ff ffe3 	bl	b50ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5126:	b910      	cbnz	r0, b512e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5128:	f7ff fc4c 	bl	b49c4 <spark_process>
        while (_while() && !_condition()) {
   b512c:	e7f9      	b.n	b5122 <_ZN9TimeClass7isValidEv+0x1c>
   b512e:	f7ff ffdd 	bl	b50ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5136:	2000      	movs	r0, #0
   b5138:	f7ff ba7e 	b.w	b4638 <hal_rtc_time_is_valid>
}
   b513c:	4620      	mov	r0, r4
   b513e:	bd10      	pop	{r4, pc}

000b5140 <_ZN9TimeClass3nowEv>:
{
   b5140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5142:	f7ff ffe0 	bl	b5106 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5146:	2210      	movs	r2, #16
   b5148:	2100      	movs	r1, #0
   b514a:	4668      	mov	r0, sp
   b514c:	f000 ff89 	bl	b6062 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5150:	2100      	movs	r1, #0
   b5152:	4668      	mov	r0, sp
   b5154:	f7ff fa78 	bl	b4648 <hal_rtc_get_time>
}
   b5158:	9800      	ldr	r0, [sp, #0]
   b515a:	b005      	add	sp, #20
   b515c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5160:	4b02      	ldr	r3, [pc, #8]	; (b516c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5162:	681a      	ldr	r2, [r3, #0]
   b5164:	4b02      	ldr	r3, [pc, #8]	; (b5170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5166:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5168:	4770      	bx	lr
   b516a:	bf00      	nop
   b516c:	2003e554 	.word	0x2003e554
   b5170:	2003e6a4 	.word	0x2003e6a4

000b5174 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5174:	2100      	movs	r1, #0
   b5176:	f7ff bb6f 	b.w	b4858 <system_delay_ms>
	...

000b517c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b517c:	4b01      	ldr	r3, [pc, #4]	; (b5184 <_GLOBAL__sub_I_RGB+0x8>)
   b517e:	2200      	movs	r2, #0
   b5180:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5182:	4770      	bx	lr
   b5184:	2003e6a8 	.word	0x2003e6a8

000b5188 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b5188:	6800      	ldr	r0, [r0, #0]
   b518a:	f000 bd4d 	b.w	b5c28 <_ZN7TwoWire4lockEv>

000b518e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b518e:	b510      	push	{r4, lr}
   b5190:	4604      	mov	r4, r0
      lock_(_lock) {
   b5192:	6001      	str	r1, [r0, #0]
   b5194:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b5196:	b10a      	cbz	r2, b519c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b5198:	f7ff fff6 	bl	b5188 <_ZN9FuelGauge4lockEv>
}
   b519c:	4620      	mov	r0, r4
   b519e:	bd10      	pop	{r4, pc}

000b51a0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b51a0:	b513      	push	{r0, r1, r4, lr}
   b51a2:	4604      	mov	r4, r0
   b51a4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b51a6:	f000 ff1d 	bl	b5fe4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b51aa:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b51ac:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b51ae:	4620      	mov	r0, r4
   b51b0:	f7ff ffed 	bl	b518e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b51b4:	4620      	mov	r0, r4
   b51b6:	b002      	add	sp, #8
   b51b8:	bd10      	pop	{r4, pc}
	...

000b51bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b51bc:	4b01      	ldr	r3, [pc, #4]	; (b51c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b51be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b51c0:	4770      	bx	lr
   b51c2:	bf00      	nop
   b51c4:	2003e558 	.word	0x2003e558

000b51c8 <serialEventRun>:
{
   b51c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b51ca:	4b0b      	ldr	r3, [pc, #44]	; (b51f8 <serialEventRun+0x30>)
   b51cc:	b143      	cbz	r3, b51e0 <serialEventRun+0x18>
   b51ce:	f000 fbff 	bl	b59d0 <_Z16_fetch_usbserialv>
   b51d2:	6803      	ldr	r3, [r0, #0]
   b51d4:	691b      	ldr	r3, [r3, #16]
   b51d6:	4798      	blx	r3
   b51d8:	2800      	cmp	r0, #0
   b51da:	dd01      	ble.n	b51e0 <serialEventRun+0x18>
        serialEvent();
   b51dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b51e0:	4b06      	ldr	r3, [pc, #24]	; (b51fc <serialEventRun+0x34>)
   b51e2:	b143      	cbz	r3, b51f6 <serialEventRun+0x2e>
   b51e4:	f000 fe80 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b51e8:	6803      	ldr	r3, [r0, #0]
   b51ea:	691b      	ldr	r3, [r3, #16]
   b51ec:	4798      	blx	r3
   b51ee:	2800      	cmp	r0, #0
   b51f0:	dd01      	ble.n	b51f6 <serialEventRun+0x2e>
        serialEvent1();
   b51f2:	f3af 8000 	nop.w
}
   b51f6:	bd08      	pop	{r3, pc}
	...

000b5200 <_post_loop>:
{
   b5200:	b508      	push	{r3, lr}
	serialEventRun();
   b5202:	f7ff ffe1 	bl	b51c8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5206:	f7ff fa0f 	bl	b4628 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b520a:	4b01      	ldr	r3, [pc, #4]	; (b5210 <_post_loop+0x10>)
   b520c:	6018      	str	r0, [r3, #0]
}
   b520e:	bd08      	pop	{r3, pc}
   b5210:	2003e734 	.word	0x2003e734

000b5214 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5214:	4805      	ldr	r0, [pc, #20]	; (b522c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5216:	4a06      	ldr	r2, [pc, #24]	; (b5230 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5218:	4906      	ldr	r1, [pc, #24]	; (b5234 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b521a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b521c:	1a12      	subs	r2, r2, r0
   b521e:	f000 ff12 	bl	b6046 <memcpy>
    __backup_sram_signature = signature;
   b5222:	4b05      	ldr	r3, [pc, #20]	; (b5238 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5224:	4a05      	ldr	r2, [pc, #20]	; (b523c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5226:	601a      	str	r2, [r3, #0]
}
   b5228:	bd08      	pop	{r3, pc}
   b522a:	bf00      	nop
   b522c:	2003f400 	.word	0x2003f400
   b5230:	2003f404 	.word	0x2003f404
   b5234:	000b6638 	.word	0x000b6638
   b5238:	2003f400 	.word	0x2003f400
   b523c:	9a271c1e 	.word	0x9a271c1e

000b5240 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5240:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5242:	2300      	movs	r3, #0
   b5244:	9300      	str	r3, [sp, #0]
   b5246:	461a      	mov	r2, r3
   b5248:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b524c:	f7ff fb36 	bl	b48bc <system_ctrl_set_result>
}
   b5250:	b003      	add	sp, #12
   b5252:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5258 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5258:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b525a:	8843      	ldrh	r3, [r0, #2]
   b525c:	2b0a      	cmp	r3, #10
   b525e:	d008      	beq.n	b5272 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5260:	2b50      	cmp	r3, #80	; 0x50
   b5262:	d10b      	bne.n	b527c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5264:	4b09      	ldr	r3, [pc, #36]	; (b528c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5266:	681b      	ldr	r3, [r3, #0]
   b5268:	b14b      	cbz	r3, b527e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b526a:	b003      	add	sp, #12
   b526c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5270:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5272:	f7ff ffe5 	bl	b5240 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5276:	b003      	add	sp, #12
   b5278:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b527c:	2300      	movs	r3, #0
   b527e:	9300      	str	r3, [sp, #0]
   b5280:	461a      	mov	r2, r3
   b5282:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5286:	f7ff fb19 	bl	b48bc <system_ctrl_set_result>
}
   b528a:	e7f4      	b.n	b5276 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b528c:	2003e6bc 	.word	0x2003e6bc

000b5290 <module_user_init_hook>:
{
   b5290:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5292:	4812      	ldr	r0, [pc, #72]	; (b52dc <module_user_init_hook+0x4c>)
   b5294:	2100      	movs	r1, #0
   b5296:	f7ff fc05 	bl	b4aa4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b529a:	4b11      	ldr	r3, [pc, #68]	; (b52e0 <module_user_init_hook+0x50>)
   b529c:	681a      	ldr	r2, [r3, #0]
   b529e:	4b11      	ldr	r3, [pc, #68]	; (b52e4 <module_user_init_hook+0x54>)
   b52a0:	429a      	cmp	r2, r3
   b52a2:	4b11      	ldr	r3, [pc, #68]	; (b52e8 <module_user_init_hook+0x58>)
   b52a4:	bf0c      	ite	eq
   b52a6:	2201      	moveq	r2, #1
   b52a8:	2200      	movne	r2, #0
   b52aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b52ac:	d001      	beq.n	b52b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b52ae:	f7ff ffb1 	bl	b5214 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b52b2:	f7ff f9b1 	bl	b4618 <HAL_RNG_GetRandomNumber>
   b52b6:	4604      	mov	r4, r0
    srand(seed);
   b52b8:	f000 fedc 	bl	b6074 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b52bc:	4b0b      	ldr	r3, [pc, #44]	; (b52ec <module_user_init_hook+0x5c>)
   b52be:	b113      	cbz	r3, b52c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b52c0:	4620      	mov	r0, r4
   b52c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b52c6:	2100      	movs	r1, #0
   b52c8:	4808      	ldr	r0, [pc, #32]	; (b52ec <module_user_init_hook+0x5c>)
   b52ca:	f7ff fbab 	bl	b4a24 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b52ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b52d2:	4807      	ldr	r0, [pc, #28]	; (b52f0 <module_user_init_hook+0x60>)
   b52d4:	2100      	movs	r1, #0
   b52d6:	f7ff bae7 	b.w	b48a8 <system_ctrl_set_app_request_handler>
   b52da:	bf00      	nop
   b52dc:	000b51bd 	.word	0x000b51bd
   b52e0:	2003f400 	.word	0x2003f400
   b52e4:	9a271c1e 	.word	0x9a271c1e
   b52e8:	2003e6b8 	.word	0x2003e6b8
   b52ec:	00000000 	.word	0x00000000
   b52f0:	000b5259 	.word	0x000b5259

000b52f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b52f4:	4770      	bx	lr

000b52f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b52f6:	2000      	movs	r0, #0
   b52f8:	4770      	bx	lr

000b52fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b52fa:	b510      	push	{r4, lr}
   b52fc:	2110      	movs	r1, #16
   b52fe:	4604      	mov	r4, r0
   b5300:	f7fe fed3 	bl	b40aa <_ZdlPvj>
   b5304:	4620      	mov	r0, r4
   b5306:	bd10      	pop	{r4, pc}

000b5308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5308:	b508      	push	{r3, lr}
      { delete this; }
   b530a:	f7ff fff6 	bl	b52fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b530e:	bd08      	pop	{r3, pc}

000b5310 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5310:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5312:	2200      	movs	r2, #0
   b5314:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5318:	6002      	str	r2, [r0, #0]
   b531a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b531c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b531e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5320:	680c      	ldr	r4, [r1, #0]
   b5322:	8085      	strh	r5, [r0, #4]
   b5324:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5326:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5328:	bd30      	pop	{r4, r5, pc}

000b532a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b532a:	b510      	push	{r4, lr}
   b532c:	4604      	mov	r4, r0
    free((void*)msg_);
   b532e:	6800      	ldr	r0, [r0, #0]
   b5330:	f7ff fb88 	bl	b4a44 <free>
}
   b5334:	4620      	mov	r0, r4
   b5336:	bd10      	pop	{r4, pc}

000b5338 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5338:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b533a:	68c4      	ldr	r4, [r0, #12]
   b533c:	b1f4      	cbz	r4, b537c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b533e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5340:	2b02      	cmp	r3, #2
   b5342:	d103      	bne.n	b534c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5344:	f104 000c 	add.w	r0, r4, #12
   b5348:	f7ff ffef 	bl	b532a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b534c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b534e:	b135      	cbz	r5, b535e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5350:	4628      	mov	r0, r5
   b5352:	f7ff fc0d 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
   b5356:	2110      	movs	r1, #16
   b5358:	4628      	mov	r0, r5
   b535a:	f7fe fea6 	bl	b40aa <_ZdlPvj>
   b535e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5360:	b135      	cbz	r5, b5370 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5362:	4628      	mov	r0, r5
   b5364:	f7ff fc04 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
   b5368:	2110      	movs	r1, #16
   b536a:	4628      	mov	r0, r5
   b536c:	f7fe fe9d 	bl	b40aa <_ZdlPvj>
   b5370:	4620      	mov	r0, r4
   b5372:	2114      	movs	r1, #20
   b5374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5378:	f7fe be97 	b.w	b40aa <_ZdlPvj>
   b537c:	bd38      	pop	{r3, r4, r5, pc}

000b537e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b537e:	680b      	ldr	r3, [r1, #0]
   b5380:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5382:	684b      	ldr	r3, [r1, #4]
   b5384:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5386:	b113      	cbz	r3, b538e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5388:	685a      	ldr	r2, [r3, #4]
   b538a:	3201      	adds	r2, #1
   b538c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b538e:	4770      	bx	lr

000b5390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5392:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5394:	4668      	mov	r0, sp
   b5396:	460d      	mov	r5, r1
   b5398:	f7ff fff1 	bl	b537e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b539c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b539e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b53a0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b53a2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b53a4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b53a6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b53a8:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b53aa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b53ac:	f7ff fbc0 	bl	b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b53b0:	b135      	cbz	r5, b53c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b53b2:	1d28      	adds	r0, r5, #4
   b53b4:	f7ff fbbc 	bl	b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53b8:	2108      	movs	r1, #8
   b53ba:	4628      	mov	r0, r5
   b53bc:	f7fe fe75 	bl	b40aa <_ZdlPvj>
        return p;
    }
   b53c0:	4620      	mov	r0, r4
   b53c2:	b003      	add	sp, #12
   b53c4:	bd30      	pop	{r4, r5, pc}

000b53c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b53c6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b53c8:	b510      	push	{r4, lr}
      if (_M_empty())
   b53ca:	b90a      	cbnz	r2, b53d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b53cc:	f000 fe32 	bl	b6034 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b53d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b53d4:	68c3      	ldr	r3, [r0, #12]
   b53d6:	4718      	bx	r3

000b53d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b53d8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b53da:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b53dc:	f100 0110 	add.w	r1, r0, #16
   b53e0:	f7ff fff1 	bl	b53c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b53e4:	bd08      	pop	{r3, pc}

000b53e6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b53e6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b53e8:	b510      	push	{r4, lr}
      if (_M_empty())
   b53ea:	b90a      	cbnz	r2, b53f0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b53ec:	f000 fe22 	bl	b6034 <_ZSt25__throw_bad_function_callv>
    }
   b53f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b53f4:	68c3      	ldr	r3, [r0, #12]
   b53f6:	4718      	bx	r3

000b53f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b53f8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b53fa:	6800      	ldr	r0, [r0, #0]
   b53fc:	f100 0110 	add.w	r1, r0, #16
   b5400:	f7ff fff1 	bl	b53e6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5404:	bd08      	pop	{r3, pc}
	...

000b5408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5408:	b538      	push	{r3, r4, r5, lr}
   b540a:	2300      	movs	r3, #0
   b540c:	4604      	mov	r4, r0
   b540e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5410:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5412:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5414:	f7fe fe45 	bl	b40a2 <_Znwj>
   b5418:	b128      	cbz	r0, b5426 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b541a:	2301      	movs	r3, #1
   b541c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5420:	4b02      	ldr	r3, [pc, #8]	; (b542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5422:	6003      	str	r3, [r0, #0]
   b5424:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5426:	6020      	str	r0, [r4, #0]
	}
   b5428:	4620      	mov	r0, r4
   b542a:	bd38      	pop	{r3, r4, r5, pc}
   b542c:	000b63a4 	.word	0x000b63a4

000b5430 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5430:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5432:	2300      	movs	r3, #0
   b5434:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5436:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5438:	4604      	mov	r4, r0
   b543a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b543c:	b12b      	cbz	r3, b544a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b543e:	2202      	movs	r2, #2
   b5440:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5442:	68eb      	ldr	r3, [r5, #12]
   b5444:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5446:	68ab      	ldr	r3, [r5, #8]
   b5448:	60a3      	str	r3, [r4, #8]
    }
   b544a:	4620      	mov	r0, r4
   b544c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5450:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5452:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b5454:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5456:	4668      	mov	r0, sp
   b5458:	f7ff ff5a 	bl	b5310 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b545c:	f04f 0302 	mov.w	r3, #2
   b5460:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5464:	2a00      	cmp	r2, #0
   b5466:	d103      	bne.n	b5470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5468:	e8c4 3f41 	strexb	r1, r3, [r4]
   b546c:	2900      	cmp	r1, #0
   b546e:	d1f7      	bne.n	b5460 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5470:	d125      	bne.n	b54be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5472:	f104 050c 	add.w	r5, r4, #12
   b5476:	4669      	mov	r1, sp
   b5478:	4628      	mov	r0, r5
   b547a:	f7ff ff49 	bl	b5310 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b547e:	f3bf 8f5b 	dmb	ish
   b5482:	2301      	movs	r3, #1
   b5484:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5486:	2000      	movs	r0, #0
   b5488:	f104 0308 	add.w	r3, r4, #8
   b548c:	f3bf 8f5b 	dmb	ish
   b5490:	e853 6f00 	ldrex	r6, [r3]
   b5494:	e843 0200 	strex	r2, r0, [r3]
   b5498:	2a00      	cmp	r2, #0
   b549a:	d1f9      	bne.n	b5490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b549c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b54a0:	b16e      	cbz	r6, b54be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b54a2:	f7ff f9e9 	bl	b4878 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b54a6:	b178      	cbz	r0, b54c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b54a8:	4629      	mov	r1, r5
   b54aa:	4630      	mov	r0, r6
   b54ac:	f7ff ff8b 	bl	b53c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b54b0:	4630      	mov	r0, r6
   b54b2:	f7ff fb5d 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b54b6:	2110      	movs	r1, #16
   b54b8:	4630      	mov	r0, r6
   b54ba:	f7fe fdf6 	bl	b40aa <_ZdlPvj>
        p_->setError(std::move(error));
   b54be:	4668      	mov	r0, sp
   b54c0:	f7ff ff33 	bl	b532a <_ZN8particle5ErrorD1Ev>
    }
   b54c4:	b009      	add	sp, #36	; 0x24
   b54c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b54c8:	4631      	mov	r1, r6
   b54ca:	a802      	add	r0, sp, #8
   b54cc:	f7ff ffb0 	bl	b5430 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b54d0:	68e0      	ldr	r0, [r4, #12]
   b54d2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b54d6:	b108      	cbz	r0, b54dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b54d8:	f000 fe02 	bl	b60e0 <strdup>
        type_(type) {
   b54dc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b54de:	2010      	movs	r0, #16
   b54e0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b54e4:	f7fe fddd 	bl	b40a2 <_Znwj>
   b54e8:	4605      	mov	r5, r0
   b54ea:	b1e8      	cbz	r0, b5528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b54ec:	2700      	movs	r7, #0
   b54ee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54f0:	2018      	movs	r0, #24
   b54f2:	f7fe fdd6 	bl	b40a2 <_Znwj>
   b54f6:	4604      	mov	r4, r0
   b54f8:	b188      	cbz	r0, b551e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b54fa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b54fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b54fe:	a802      	add	r0, sp, #8
   b5500:	f7ff fcfe 	bl	b4f00 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5504:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5506:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5508:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b550a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b550c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b550e:	a906      	add	r1, sp, #24
   b5510:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5512:	60e3      	str	r3, [r4, #12]
   b5514:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5518:	9205      	str	r2, [sp, #20]
   b551a:	f7ff fef9 	bl	b5310 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b551e:	4b08      	ldr	r3, [pc, #32]	; (b5540 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5520:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5522:	4b08      	ldr	r3, [pc, #32]	; (b5544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5524:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5526:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5528:	a806      	add	r0, sp, #24
   b552a:	f7ff fefe 	bl	b532a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b552e:	a802      	add	r0, sp, #8
   b5530:	f7ff fb1e 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5534:	2200      	movs	r2, #0
   b5536:	4629      	mov	r1, r5
   b5538:	4803      	ldr	r0, [pc, #12]	; (b5548 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b553a:	f7ff f9a5 	bl	b4888 <application_thread_invoke>
   b553e:	e7b7      	b.n	b54b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5540:	000b53d9 	.word	0x000b53d9
   b5544:	000b565d 	.word	0x000b565d
   b5548:	000b5b6d 	.word	0x000b5b6d

000b554c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5550:	b08b      	sub	sp, #44	; 0x2c
   b5552:	4605      	mov	r5, r0
   b5554:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5558:	460f      	mov	r7, r1
   b555a:	4690      	mov	r8, r2
   b555c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b555e:	f7ff fa41 	bl	b49e4 <spark_cloud_flag_connected>
   b5562:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5564:	4683      	mov	fp, r0
   b5566:	bb38      	cbnz	r0, b55b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5568:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b556c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b556e:	a905      	add	r1, sp, #20
   b5570:	4630      	mov	r0, r6
   b5572:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5576:	f7ff fecb 	bl	b5310 <_ZN8particle5ErrorC1EOS0_>
   b557a:	2014      	movs	r0, #20
   b557c:	f7fe fd91 	bl	b40a2 <_Znwj>
   b5580:	4604      	mov	r4, r0
   b5582:	b148      	cbz	r0, b5598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5584:	2302      	movs	r3, #2
   b5586:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5588:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b558a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b558e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5590:	4631      	mov	r1, r6
   b5592:	300c      	adds	r0, #12
   b5594:	f7ff febc 	bl	b5310 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5598:	4628      	mov	r0, r5
	: __shared_count(__p)
   b559a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b559c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b55a0:	f7ff ff32 	bl	b5408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b55a4:	4630      	mov	r0, r6
   b55a6:	f7ff fec0 	bl	b532a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b55aa:	a805      	add	r0, sp, #20
   b55ac:	f7ff febd 	bl	b532a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b55b0:	4628      	mov	r0, r5
   b55b2:	b00b      	add	sp, #44	; 0x2c
   b55b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b55b8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b55ba:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b55bc:	2014      	movs	r0, #20
   b55be:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b55c2:	9307      	str	r3, [sp, #28]
   b55c4:	f7fe fd6d 	bl	b40a2 <_Znwj>
   b55c8:	4601      	mov	r1, r0
   b55ca:	b118      	cbz	r0, b55d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b55cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b55d0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b55d2:	7044      	strb	r4, [r0, #1]
   b55d4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b55d6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b55d8:	f7ff ff16 	bl	b5408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b55dc:	4b1e      	ldr	r3, [pc, #120]	; (b5658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b55de:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b55e0:	2008      	movs	r0, #8
   b55e2:	f7fe fd5e 	bl	b40a2 <_Znwj>
   b55e6:	4604      	mov	r4, r0
   b55e8:	b110      	cbz	r0, b55f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b55ea:	a903      	add	r1, sp, #12
   b55ec:	f7ff fec7 	bl	b537e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b55f0:	9600      	str	r6, [sp, #0]
   b55f2:	fa5f f38a 	uxtb.w	r3, sl
   b55f6:	464a      	mov	r2, r9
   b55f8:	4641      	mov	r1, r8
   b55fa:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b55fc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b55fe:	f7ff f9f9 	bl	b49f4 <spark_send_event>
   b5602:	b9b8      	cbnz	r0, b5634 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5604:	9b03      	ldr	r3, [sp, #12]
   b5606:	785b      	ldrb	r3, [r3, #1]
   b5608:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b560c:	b993      	cbnz	r3, b5634 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b560e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5612:	a905      	add	r1, sp, #20
   b5614:	a803      	add	r0, sp, #12
   b5616:	9205      	str	r2, [sp, #20]
   b5618:	f8ad 3018 	strh.w	r3, [sp, #24]
   b561c:	f7ff ff18 	bl	b5450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5620:	a805      	add	r0, sp, #20
   b5622:	f7ff fe82 	bl	b532a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5626:	a805      	add	r0, sp, #20
   b5628:	9909      	ldr	r1, [sp, #36]	; 0x24
   b562a:	f7ff feb1 	bl	b5390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b562e:	a806      	add	r0, sp, #24
   b5630:	f7ff fa7e 	bl	b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5634:	a903      	add	r1, sp, #12
   b5636:	a805      	add	r0, sp, #20
   b5638:	f7ff fea1 	bl	b537e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b563c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b563e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5640:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5642:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5644:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5646:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5648:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b564a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b564c:	f7ff fa70 	bl	b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5650:	a804      	add	r0, sp, #16
   b5652:	f7ff fa6d 	bl	b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5656:	e7ab      	b.n	b55b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5658:	000b5721 	.word	0x000b5721

000b565c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b565c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b565e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5660:	4605      	mov	r5, r0
	switch (__op)
   b5662:	d103      	bne.n	b566c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5664:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5666:	6003      	str	r3, [r0, #0]
      }
   b5668:	2000      	movs	r0, #0
   b566a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b566c:	2a02      	cmp	r2, #2
   b566e:	d010      	beq.n	b5692 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5670:	2a03      	cmp	r2, #3
   b5672:	d1f9      	bne.n	b5668 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5674:	6804      	ldr	r4, [r0, #0]
   b5676:	2c00      	cmp	r4, #0
   b5678:	d0f6      	beq.n	b5668 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b567a:	f104 0010 	add.w	r0, r4, #16
   b567e:	f7ff fe54 	bl	b532a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5682:	4620      	mov	r0, r4
   b5684:	f7ff fa74 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5688:	2118      	movs	r1, #24
   b568a:	4620      	mov	r0, r4
   b568c:	f7fe fd0d 	bl	b40aa <_ZdlPvj>
   b5690:	e7ea      	b.n	b5668 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5692:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5694:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5696:	f7fe fd04 	bl	b40a2 <_Znwj>
   b569a:	4604      	mov	r4, r0
   b569c:	b150      	cbz	r0, b56b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b569e:	4631      	mov	r1, r6
   b56a0:	f7ff fec6 	bl	b5430 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b56a4:	6930      	ldr	r0, [r6, #16]
   b56a6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b56aa:	b108      	cbz	r0, b56b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b56ac:	f000 fd18 	bl	b60e0 <strdup>
        type_(type) {
   b56b0:	6120      	str	r0, [r4, #16]
   b56b2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b56b4:	602c      	str	r4, [r5, #0]
	}
   b56b6:	e7d7      	b.n	b5668 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b56b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b56b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b56ba:	2300      	movs	r3, #0
   b56bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b56be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b56c0:	4604      	mov	r4, r0
   b56c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b56c4:	b12b      	cbz	r3, b56d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b56c6:	2202      	movs	r2, #2
   b56c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b56ca:	68eb      	ldr	r3, [r5, #12]
   b56cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b56ce:	68ab      	ldr	r3, [r5, #8]
   b56d0:	60a3      	str	r3, [r4, #8]
    }
   b56d2:	4620      	mov	r0, r4
   b56d4:	bd38      	pop	{r3, r4, r5, pc}

000b56d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b56d6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b56d8:	b570      	push	{r4, r5, r6, lr}
   b56da:	4604      	mov	r4, r0
	switch (__op)
   b56dc:	d103      	bne.n	b56e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b56de:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b56e0:	6003      	str	r3, [r0, #0]
      }
   b56e2:	2000      	movs	r0, #0
   b56e4:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b56e6:	2a02      	cmp	r2, #2
   b56e8:	d00c      	beq.n	b5704 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b56ea:	2a03      	cmp	r2, #3
   b56ec:	d1f9      	bne.n	b56e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b56ee:	6804      	ldr	r4, [r0, #0]
   b56f0:	2c00      	cmp	r4, #0
   b56f2:	d0f6      	beq.n	b56e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b56f4:	4620      	mov	r0, r4
   b56f6:	f7ff fa3b 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b56fa:	2114      	movs	r1, #20
   b56fc:	4620      	mov	r0, r4
   b56fe:	f7fe fcd4 	bl	b40aa <_ZdlPvj>
   b5702:	e7ee      	b.n	b56e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5704:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5706:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5708:	f7fe fccb 	bl	b40a2 <_Znwj>
   b570c:	4605      	mov	r5, r0
   b570e:	b120      	cbz	r0, b571a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b5710:	4631      	mov	r1, r6
   b5712:	f7ff ffd1 	bl	b56b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5716:	7c33      	ldrb	r3, [r6, #16]
   b5718:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b571a:	6025      	str	r5, [r4, #0]
	}
   b571c:	e7e1      	b.n	b56e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b5720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5720:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5722:	b089      	sub	sp, #36	; 0x24
   b5724:	4604      	mov	r4, r0
   b5726:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5728:	a801      	add	r0, sp, #4
   b572a:	4611      	mov	r1, r2
   b572c:	f7ff fe30 	bl	b5390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5730:	b1a4      	cbz	r4, b575c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5732:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5734:	b11d      	cbz	r5, b573e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5736:	4628      	mov	r0, r5
   b5738:	f000 fcd2 	bl	b60e0 <strdup>
   b573c:	4605      	mov	r5, r0
   b573e:	a801      	add	r0, sp, #4
   b5740:	a903      	add	r1, sp, #12
        type_(type) {
   b5742:	9503      	str	r5, [sp, #12]
   b5744:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5748:	f7ff fe82 	bl	b5450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b574c:	a803      	add	r0, sp, #12
   b574e:	f7ff fdec 	bl	b532a <_ZN8particle5ErrorD1Ev>
   b5752:	a802      	add	r0, sp, #8
   b5754:	f7ff f9ec 	bl	b4b30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5758:	b009      	add	sp, #36	; 0x24
   b575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b575c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b575e:	2301      	movs	r3, #1
   b5760:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5764:	2a00      	cmp	r2, #0
   b5766:	d103      	bne.n	b5770 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5768:	e8c5 3f41 	strexb	r1, r3, [r5]
   b576c:	2900      	cmp	r1, #0
   b576e:	d1f7      	bne.n	b5760 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5770:	d1ef      	bne.n	b5752 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5772:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5774:	f3bf 8f5b 	dmb	ish
   b5778:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b577a:	1d2b      	adds	r3, r5, #4
   b577c:	f3bf 8f5b 	dmb	ish
   b5780:	e853 6f00 	ldrex	r6, [r3]
   b5784:	e843 4200 	strex	r2, r4, [r3]
   b5788:	2a00      	cmp	r2, #0
   b578a:	d1f9      	bne.n	b5780 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b578c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5790:	2e00      	cmp	r6, #0
   b5792:	d0de      	beq.n	b5752 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5794:	4620      	mov	r0, r4
   b5796:	f7ff f86f 	bl	b4878 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b579a:	4607      	mov	r7, r0
   b579c:	b160      	cbz	r0, b57b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b579e:	f105 010c 	add.w	r1, r5, #12
   b57a2:	4630      	mov	r0, r6
   b57a4:	f7ff fe1f 	bl	b53e6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b57a8:	4630      	mov	r0, r6
   b57aa:	f7ff f9e1 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b57ae:	2110      	movs	r1, #16
   b57b0:	4630      	mov	r0, r6
   b57b2:	f7fe fc7a 	bl	b40aa <_ZdlPvj>
   b57b6:	e7cc      	b.n	b5752 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b57b8:	4631      	mov	r1, r6
   b57ba:	a803      	add	r0, sp, #12
   b57bc:	f7ff ff7c 	bl	b56b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b57c0:	7b2b      	ldrb	r3, [r5, #12]
   b57c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b57c6:	2010      	movs	r0, #16
   b57c8:	f7fe fc6b 	bl	b40a2 <_Znwj>
   b57cc:	4605      	mov	r5, r0
   b57ce:	b1d0      	cbz	r0, b5806 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b57d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b57d2:	2014      	movs	r0, #20
   b57d4:	f7fe fc65 	bl	b40a2 <_Znwj>
   b57d8:	4604      	mov	r4, r0
   b57da:	b178      	cbz	r0, b57fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b57dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b57de:	4601      	mov	r1, r0
   b57e0:	a803      	add	r0, sp, #12
   b57e2:	f7ff fb8d 	bl	b4f00 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b57e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b57ee:	9205      	str	r2, [sp, #20]
   b57f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b57f2:	60e3      	str	r3, [r4, #12]
   b57f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b57f8:	9206      	str	r2, [sp, #24]
   b57fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b57fc:	4b06      	ldr	r3, [pc, #24]	; (b5818 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b57fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5800:	4b06      	ldr	r3, [pc, #24]	; (b581c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5802:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5804:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5806:	a803      	add	r0, sp, #12
   b5808:	f7ff f9b2 	bl	b4b70 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b580c:	2200      	movs	r2, #0
   b580e:	4629      	mov	r1, r5
   b5810:	4803      	ldr	r0, [pc, #12]	; (b5820 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5812:	f7ff f839 	bl	b4888 <application_thread_invoke>
   b5816:	e7c7      	b.n	b57a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5818:	000b53f9 	.word	0x000b53f9
   b581c:	000b56d7 	.word	0x000b56d7
   b5820:	000b5b6d 	.word	0x000b5b6d

000b5824 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5824:	4770      	bx	lr

000b5826 <_ZN9IPAddressD0Ev>:
   b5826:	b510      	push	{r4, lr}
   b5828:	2118      	movs	r1, #24
   b582a:	4604      	mov	r4, r0
   b582c:	f7fe fc3d 	bl	b40aa <_ZdlPvj>
   b5830:	4620      	mov	r0, r4
   b5832:	bd10      	pop	{r4, pc}

000b5834 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5834:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5836:	7d03      	ldrb	r3, [r0, #20]
   b5838:	2b06      	cmp	r3, #6
{
   b583a:	b08d      	sub	sp, #52	; 0x34
   b583c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b583e:	f100 0704 	add.w	r7, r0, #4
   b5842:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5846:	d012      	beq.n	b586e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5848:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b584c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5850:	220a      	movs	r2, #10
   b5852:	4630      	mov	r0, r6
   b5854:	f7ff fbb3 	bl	b4fbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5858:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b585a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b585c:	d019      	beq.n	b5892 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b585e:	2c00      	cmp	r4, #0
   b5860:	d0f4      	beq.n	b584c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5862:	212e      	movs	r1, #46	; 0x2e
   b5864:	4630      	mov	r0, r6
   b5866:	f7ff fb91 	bl	b4f8c <_ZN5Print5printEc>
   b586a:	4404      	add	r4, r0
   b586c:	e7ee      	b.n	b584c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b586e:	232f      	movs	r3, #47	; 0x2f
   b5870:	466a      	mov	r2, sp
   b5872:	4639      	mov	r1, r7
   b5874:	200a      	movs	r0, #10
		buf[0] = 0;
   b5876:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b587a:	f7fe fef5 	bl	b4668 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b587e:	4668      	mov	r0, sp
   b5880:	f7fe fbcc 	bl	b401c <strlen>
   b5884:	6833      	ldr	r3, [r6, #0]
   b5886:	4602      	mov	r2, r0
   b5888:	68db      	ldr	r3, [r3, #12]
   b588a:	4669      	mov	r1, sp
   b588c:	4630      	mov	r0, r6
   b588e:	4798      	blx	r3
   b5890:	4604      	mov	r4, r0
    }
    return n;
}
   b5892:	4620      	mov	r0, r4
   b5894:	b00d      	add	sp, #52	; 0x34
   b5896:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5898 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5898:	b510      	push	{r4, lr}
   b589a:	4b05      	ldr	r3, [pc, #20]	; (b58b0 <_ZN9IPAddressC1Ev+0x18>)
   b589c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b589e:	2211      	movs	r2, #17
   b58a0:	f840 3b04 	str.w	r3, [r0], #4
   b58a4:	2100      	movs	r1, #0
   b58a6:	f000 fbdc 	bl	b6062 <memset>
}
   b58aa:	4620      	mov	r0, r4
   b58ac:	bd10      	pop	{r4, pc}
   b58ae:	bf00      	nop
   b58b0:	000b63c0 	.word	0x000b63c0

000b58b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b58b4:	4603      	mov	r3, r0
   b58b6:	4a07      	ldr	r2, [pc, #28]	; (b58d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b58b8:	b510      	push	{r4, lr}
   b58ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b58be:	f101 0210 	add.w	r2, r1, #16
   b58c2:	f851 4b04 	ldr.w	r4, [r1], #4
   b58c6:	f843 4b04 	str.w	r4, [r3], #4
   b58ca:	4291      	cmp	r1, r2
   b58cc:	d1f9      	bne.n	b58c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b58ce:	780a      	ldrb	r2, [r1, #0]
   b58d0:	701a      	strb	r2, [r3, #0]
}
   b58d2:	bd10      	pop	{r4, pc}
   b58d4:	000b63c0 	.word	0x000b63c0

000b58d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b58d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b58da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b58de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b58e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b58e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b58ea:	2304      	movs	r3, #4
   b58ec:	6041      	str	r1, [r0, #4]
   b58ee:	7503      	strb	r3, [r0, #20]
}
   b58f0:	bd10      	pop	{r4, pc}
	...

000b58f4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b58f4:	b507      	push	{r0, r1, r2, lr}
   b58f6:	4b06      	ldr	r3, [pc, #24]	; (b5910 <_ZN9IPAddressC1EPKh+0x1c>)
   b58f8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b58fa:	78cb      	ldrb	r3, [r1, #3]
   b58fc:	9300      	str	r3, [sp, #0]
   b58fe:	788b      	ldrb	r3, [r1, #2]
   b5900:	784a      	ldrb	r2, [r1, #1]
   b5902:	7809      	ldrb	r1, [r1, #0]
   b5904:	f7ff ffe8 	bl	b58d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5908:	b003      	add	sp, #12
   b590a:	f85d fb04 	ldr.w	pc, [sp], #4
   b590e:	bf00      	nop
   b5910:	000b63c0 	.word	0x000b63c0

000b5914 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5914:	7441      	strb	r1, [r0, #17]
}
   b5916:	4770      	bx	lr

000b5918 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5918:	4770      	bx	lr

000b591a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b591a:	4770      	bx	lr

000b591c <_ZN9USBSerial4readEv>:
{
   b591c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b591e:	2100      	movs	r1, #0
   b5920:	7c00      	ldrb	r0, [r0, #16]
   b5922:	f7fe ff69 	bl	b47f8 <HAL_USB_USART_Receive_Data>
}
   b5926:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b592a:	bd08      	pop	{r3, pc}

000b592c <_ZN9USBSerial4peekEv>:
{
   b592c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b592e:	2101      	movs	r1, #1
   b5930:	7c00      	ldrb	r0, [r0, #16]
   b5932:	f7fe ff61 	bl	b47f8 <HAL_USB_USART_Receive_Data>
}
   b5936:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b593a:	bd08      	pop	{r3, pc}

000b593c <_ZN9USBSerial17availableForWriteEv>:
{
   b593c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b593e:	7c00      	ldrb	r0, [r0, #16]
   b5940:	f7fe ff52 	bl	b47e8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5948:	bd08      	pop	{r3, pc}

000b594a <_ZN9USBSerial9availableEv>:
{
   b594a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b594c:	7c00      	ldrb	r0, [r0, #16]
   b594e:	f7fe ff43 	bl	b47d8 <HAL_USB_USART_Available_Data>
}
   b5952:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5956:	bd08      	pop	{r3, pc}

000b5958 <_ZN9USBSerial5writeEh>:
{
   b5958:	b513      	push	{r0, r1, r4, lr}
   b595a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b595c:	7c00      	ldrb	r0, [r0, #16]
{
   b595e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5960:	f7fe ff42 	bl	b47e8 <HAL_USB_USART_Available_Data_For_Write>
   b5964:	2800      	cmp	r0, #0
   b5966:	9901      	ldr	r1, [sp, #4]
   b5968:	dc01      	bgt.n	b596e <_ZN9USBSerial5writeEh+0x16>
   b596a:	7c60      	ldrb	r0, [r4, #17]
   b596c:	b120      	cbz	r0, b5978 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b596e:	7c20      	ldrb	r0, [r4, #16]
   b5970:	f7fe ff4a 	bl	b4808 <HAL_USB_USART_Send_Data>
   b5974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5978:	b002      	add	sp, #8
   b597a:	bd10      	pop	{r4, pc}

000b597c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b597c:	7c00      	ldrb	r0, [r0, #16]
   b597e:	f7fe bf4b 	b.w	b4818 <HAL_USB_USART_Flush_Data>

000b5982 <_ZN9USBSerialD0Ev>:
   b5982:	b510      	push	{r4, lr}
   b5984:	2114      	movs	r1, #20
   b5986:	4604      	mov	r4, r0
   b5988:	f7fe fb8f 	bl	b40aa <_ZdlPvj>
   b598c:	4620      	mov	r0, r4
   b598e:	bd10      	pop	{r4, pc}

000b5990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5990:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5996:	4604      	mov	r4, r0
   b5998:	4608      	mov	r0, r1
   b599a:	2100      	movs	r1, #0
   b599c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b59a0:	4b04      	ldr	r3, [pc, #16]	; (b59b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b59a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b59a4:	2301      	movs	r3, #1
  _serial = serial;
   b59a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b59a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b59aa:	4611      	mov	r1, r2
   b59ac:	f7fe ff04 	bl	b47b8 <HAL_USB_USART_Init>
}
   b59b0:	4620      	mov	r0, r4
   b59b2:	bd10      	pop	{r4, pc}
   b59b4:	000b63d4 	.word	0x000b63d4

000b59b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b59b8:	7c00      	ldrb	r0, [r0, #16]
   b59ba:	2200      	movs	r2, #0
   b59bc:	f7fe bf04 	b.w	b47c8 <HAL_USB_USART_Begin>

000b59c0 <_Z19acquireSerialBufferv>:
{
   b59c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b59c2:	2214      	movs	r2, #20
{
   b59c4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b59c6:	2100      	movs	r1, #0
   b59c8:	f000 fb4b 	bl	b6062 <memset>
}
   b59cc:	4620      	mov	r0, r4
   b59ce:	bd10      	pop	{r4, pc}

000b59d0 <_Z16_fetch_usbserialv>:
{
   b59d0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59d2:	4c0f      	ldr	r4, [pc, #60]	; (b5a10 <_Z16_fetch_usbserialv+0x40>)
{
   b59d4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b59d6:	a803      	add	r0, sp, #12
   b59d8:	f7ff fff2 	bl	b59c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59dc:	7821      	ldrb	r1, [r4, #0]
   b59de:	f3bf 8f5b 	dmb	ish
   b59e2:	f011 0101 	ands.w	r1, r1, #1
   b59e6:	d10f      	bne.n	b5a08 <_Z16_fetch_usbserialv+0x38>
   b59e8:	4620      	mov	r0, r4
   b59ea:	9101      	str	r1, [sp, #4]
   b59ec:	f7fe fb5f 	bl	b40ae <__cxa_guard_acquire>
   b59f0:	9901      	ldr	r1, [sp, #4]
   b59f2:	b148      	cbz	r0, b5a08 <_Z16_fetch_usbserialv+0x38>
   b59f4:	aa03      	add	r2, sp, #12
   b59f6:	4807      	ldr	r0, [pc, #28]	; (b5a14 <_Z16_fetch_usbserialv+0x44>)
   b59f8:	f7ff ffca 	bl	b5990 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b59fc:	4620      	mov	r0, r4
   b59fe:	f7fe fb5b 	bl	b40b8 <__cxa_guard_release>
   b5a02:	4805      	ldr	r0, [pc, #20]	; (b5a18 <_Z16_fetch_usbserialv+0x48>)
   b5a04:	f000 fb19 	bl	b603a <atexit>
	return _usbserial;
}
   b5a08:	4802      	ldr	r0, [pc, #8]	; (b5a14 <_Z16_fetch_usbserialv+0x44>)
   b5a0a:	b008      	add	sp, #32
   b5a0c:	bd10      	pop	{r4, pc}
   b5a0e:	bf00      	nop
   b5a10:	2003e6c0 	.word	0x2003e6c0
   b5a14:	2003e6c4 	.word	0x2003e6c4
   b5a18:	000b5919 	.word	0x000b5919

000b5a1c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5a1c:	2200      	movs	r2, #0
   b5a1e:	6840      	ldr	r0, [r0, #4]
   b5a20:	4611      	mov	r1, r2
   b5a22:	f7fe bf77 	b.w	b4914 <network_ready>

000b5a26 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5a26:	2200      	movs	r2, #0
   b5a28:	6840      	ldr	r0, [r0, #4]
   b5a2a:	4611      	mov	r1, r2
   b5a2c:	f7fe bf92 	b.w	b4954 <network_listening>

000b5a30 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a30:	2200      	movs	r2, #0
   b5a32:	6840      	ldr	r0, [r0, #4]
   b5a34:	4611      	mov	r1, r2
   b5a36:	f7fe bf9d 	b.w	b4974 <network_get_listen_timeout>

000b5a3a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a3a:	6840      	ldr	r0, [r0, #4]
   b5a3c:	2200      	movs	r2, #0
   b5a3e:	f7fe bf91 	b.w	b4964 <network_set_listen_timeout>

000b5a42 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a42:	6840      	ldr	r0, [r0, #4]
   b5a44:	2200      	movs	r2, #0
   b5a46:	f081 0101 	eor.w	r1, r1, #1
   b5a4a:	f7fe bf7b 	b.w	b4944 <network_listen>

000b5a4e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a4e:	2300      	movs	r3, #0
   b5a50:	6840      	ldr	r0, [r0, #4]
   b5a52:	461a      	mov	r2, r3
   b5a54:	4619      	mov	r1, r3
   b5a56:	f7fe bf6d 	b.w	b4934 <network_off>

000b5a5a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a5a:	2300      	movs	r3, #0
   b5a5c:	6840      	ldr	r0, [r0, #4]
   b5a5e:	461a      	mov	r2, r3
   b5a60:	4619      	mov	r1, r3
   b5a62:	f7fe bf5f 	b.w	b4924 <network_on>

000b5a66 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a66:	2200      	movs	r2, #0
   b5a68:	6840      	ldr	r0, [r0, #4]
   b5a6a:	4611      	mov	r1, r2
   b5a6c:	f7fe bf42 	b.w	b48f4 <network_connecting>

000b5a70 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a70:	6840      	ldr	r0, [r0, #4]
   b5a72:	2200      	movs	r2, #0
   b5a74:	2102      	movs	r1, #2
   b5a76:	f7fe bf45 	b.w	b4904 <network_disconnect>

000b5a7a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a7a:	2300      	movs	r3, #0
   b5a7c:	6840      	ldr	r0, [r0, #4]
   b5a7e:	461a      	mov	r2, r3
   b5a80:	f7fe bf30 	b.w	b48e4 <network_connect>

000b5a84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5a84:	4b08      	ldr	r3, [pc, #32]	; (b5aa8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5a86:	b510      	push	{r4, lr}
   b5a88:	2428      	movs	r4, #40	; 0x28
   b5a8a:	4622      	mov	r2, r4
   b5a8c:	4618      	mov	r0, r3
   b5a8e:	2100      	movs	r1, #0
   b5a90:	f000 fae7 	bl	b6062 <memset>
   b5a94:	4b05      	ldr	r3, [pc, #20]	; (b5aac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5a96:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5a98:	f04f 32ff 	mov.w	r2, #4294967295
   b5a9c:	6042      	str	r2, [r0, #4]
   b5a9e:	2204      	movs	r2, #4
   b5aa0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5aa2:	4a03      	ldr	r2, [pc, #12]	; (b5ab0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5aa4:	601a      	str	r2, [r3, #0]
   b5aa6:	bd10      	pop	{r4, pc}
   b5aa8:	2003e6e0 	.word	0x2003e6e0
   b5aac:	2003e6d8 	.word	0x2003e6d8
   b5ab0:	000b6408 	.word	0x000b6408

000b5ab4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5ab4:	4770      	bx	lr

000b5ab6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ab6:	7441      	strb	r1, [r0, #17]
}
   b5ab8:	4770      	bx	lr

000b5aba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5aba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5abc:	7c00      	ldrb	r0, [r0, #16]
   b5abe:	f7fe fe13 	bl	b46e8 <hal_usart_available_data_for_write>
}
   b5ac2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ac6:	bd08      	pop	{r3, pc}

000b5ac8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5ac8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5aca:	7c00      	ldrb	r0, [r0, #16]
   b5acc:	f7fe fde4 	bl	b4698 <hal_usart_available>
}
   b5ad0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ad4:	bd08      	pop	{r3, pc}

000b5ad6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5ad6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5ad8:	7c00      	ldrb	r0, [r0, #16]
   b5ada:	f7fe fded 	bl	b46b8 <hal_usart_peek>
}
   b5ade:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ae2:	bd08      	pop	{r3, pc}

000b5ae4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5ae4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5ae6:	7c00      	ldrb	r0, [r0, #16]
   b5ae8:	f7fe fdde 	bl	b46a8 <hal_usart_read>
}
   b5aec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5af0:	bd08      	pop	{r3, pc}

000b5af2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5af2:	7c00      	ldrb	r0, [r0, #16]
   b5af4:	f7fe bde8 	b.w	b46c8 <hal_usart_flush>

000b5af8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5afa:	7c45      	ldrb	r5, [r0, #17]
{
   b5afc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5afe:	b12d      	cbz	r5, b5b0c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5b00:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5b02:	b003      	add	sp, #12
   b5b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5b08:	f7fe bdbe 	b.w	b4688 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b0c:	7c00      	ldrb	r0, [r0, #16]
   b5b0e:	9101      	str	r1, [sp, #4]
   b5b10:	f7fe fdea 	bl	b46e8 <hal_usart_available_data_for_write>
   b5b14:	2800      	cmp	r0, #0
   b5b16:	9901      	ldr	r1, [sp, #4]
   b5b18:	dcf2      	bgt.n	b5b00 <_ZN11USARTSerial5writeEh+0x8>
}
   b5b1a:	4628      	mov	r0, r5
   b5b1c:	b003      	add	sp, #12
   b5b1e:	bd30      	pop	{r4, r5, pc}

000b5b20 <_ZN11USARTSerialD0Ev>:
   b5b20:	b510      	push	{r4, lr}
   b5b22:	2114      	movs	r1, #20
   b5b24:	4604      	mov	r4, r0
   b5b26:	f7fe fac0 	bl	b40aa <_ZdlPvj>
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	bd10      	pop	{r4, pc}
	...

000b5b30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5b30:	b510      	push	{r4, lr}
   b5b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b36:	4604      	mov	r4, r0
   b5b38:	4608      	mov	r0, r1
   b5b3a:	4611      	mov	r1, r2
   b5b3c:	2200      	movs	r2, #0
   b5b3e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5b42:	4b04      	ldr	r3, [pc, #16]	; (b5b54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5b44:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b46:	2301      	movs	r3, #1
  _serial = serial;
   b5b48:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b4a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5b4c:	f7fe fddc 	bl	b4708 <hal_usart_init_ex>
}
   b5b50:	4620      	mov	r0, r4
   b5b52:	bd10      	pop	{r4, pc}
   b5b54:	000b644c 	.word	0x000b644c

000b5b58 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5b58:	7c00      	ldrb	r0, [r0, #16]
   b5b5a:	2300      	movs	r3, #0
   b5b5c:	f7fe bdcc 	b.w	b46f8 <hal_usart_begin_config>

000b5b60 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5b60:	2200      	movs	r2, #0
   b5b62:	f7ff bff9 	b.w	b5b58 <_ZN11USARTSerial5beginEmm>

000b5b66 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b5b66:	7c00      	ldrb	r0, [r0, #16]
   b5b68:	f7fe bd86 	b.w	b4678 <hal_usart_end>

000b5b6c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5b6c:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b6e:	6883      	ldr	r3, [r0, #8]
   b5b70:	4604      	mov	r4, r0
   b5b72:	b90b      	cbnz	r3, b5b78 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5b74:	f000 fa5e 	bl	b6034 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b78:	68c3      	ldr	r3, [r0, #12]
   b5b7a:	4798      	blx	r3
      if (_M_manager)
   b5b7c:	68a3      	ldr	r3, [r4, #8]
   b5b7e:	b11b      	cbz	r3, b5b88 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5b80:	2203      	movs	r2, #3
   b5b82:	4621      	mov	r1, r4
   b5b84:	4620      	mov	r0, r4
   b5b86:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5b88:	4620      	mov	r0, r4
   b5b8a:	2110      	movs	r1, #16
}
   b5b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5b90:	f7fe ba8b 	b.w	b40aa <_ZdlPvj>

000b5b94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5b94:	4770      	bx	lr

000b5b96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b98:	4606      	mov	r6, r0
   b5b9a:	4615      	mov	r5, r2
   b5b9c:	460c      	mov	r4, r1
   b5b9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5ba0:	42bc      	cmp	r4, r7
   b5ba2:	d006      	beq.n	b5bb2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5ba4:	6833      	ldr	r3, [r6, #0]
   b5ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5baa:	689b      	ldr	r3, [r3, #8]
   b5bac:	4630      	mov	r0, r6
   b5bae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5bb0:	e7f6      	b.n	b5ba0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5bb2:	4628      	mov	r0, r5
   b5bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bb6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5bb6:	7c00      	ldrb	r0, [r0, #16]
   b5bb8:	2200      	movs	r2, #0
   b5bba:	f7fe bdad 	b.w	b4718 <hal_i2c_write>

000b5bbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5bbe:	7c00      	ldrb	r0, [r0, #16]
   b5bc0:	2100      	movs	r1, #0
   b5bc2:	f7fe bdb1 	b.w	b4728 <hal_i2c_available>

000b5bc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5bc6:	7c00      	ldrb	r0, [r0, #16]
   b5bc8:	2100      	movs	r1, #0
   b5bca:	f7fe bdb5 	b.w	b4738 <hal_i2c_read>

000b5bce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5bce:	7c00      	ldrb	r0, [r0, #16]
   b5bd0:	2100      	movs	r1, #0
   b5bd2:	f7fe bdb9 	b.w	b4748 <hal_i2c_peek>

000b5bd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5bd6:	7c00      	ldrb	r0, [r0, #16]
   b5bd8:	2100      	movs	r1, #0
   b5bda:	f7fe bdbd 	b.w	b4758 <hal_i2c_flush>

000b5bde <_ZN7TwoWireD0Ev>:
   b5bde:	b510      	push	{r4, lr}
   b5be0:	2114      	movs	r1, #20
   b5be2:	4604      	mov	r4, r0
   b5be4:	f7fe fa61 	bl	b40aa <_ZdlPvj>
   b5be8:	4620      	mov	r0, r4
   b5bea:	bd10      	pop	{r4, pc}

000b5bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5bec:	b538      	push	{r3, r4, r5, lr}
   b5bee:	4604      	mov	r4, r0
   b5bf0:	4615      	mov	r5, r2
   b5bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bf6:	2200      	movs	r2, #0
   b5bf8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5bfc:	4b09      	ldr	r3, [pc, #36]	; (b5c24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5bfe:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5c00:	4608      	mov	r0, r1
   b5c02:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5c04:	4629      	mov	r1, r5
   b5c06:	f7fe fdb7 	bl	b4778 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5c0a:	30bf      	adds	r0, #191	; 0xbf
   b5c0c:	d108      	bne.n	b5c20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5c0e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5c10:	07db      	lsls	r3, r3, #31
   b5c12:	d505      	bpl.n	b5c20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5c14:	6868      	ldr	r0, [r5, #4]
   b5c16:	f7fe ff15 	bl	b4a44 <free>
    free(conf.tx_buffer);
   b5c1a:	68e8      	ldr	r0, [r5, #12]
   b5c1c:	f7fe ff12 	bl	b4a44 <free>
}
   b5c20:	4620      	mov	r0, r4
   b5c22:	bd38      	pop	{r3, r4, r5, pc}
   b5c24:	000b6480 	.word	0x000b6480

000b5c28 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b5c28:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b5c2a:	2100      	movs	r1, #0
   b5c2c:	7c00      	ldrb	r0, [r0, #16]
   b5c2e:	f7fe fdab 	bl	b4788 <hal_i2c_lock>
}
   b5c32:	fab0 f080 	clz	r0, r0
   b5c36:	0940      	lsrs	r0, r0, #5
   b5c38:	bd08      	pop	{r3, pc}

000b5c3a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5c3a:	2300      	movs	r3, #0
   b5c3c:	6840      	ldr	r0, [r0, #4]
   b5c3e:	461a      	mov	r2, r3
   b5c40:	f7fe be50 	b.w	b48e4 <network_connect>

000b5c44 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5c44:	6840      	ldr	r0, [r0, #4]
   b5c46:	2200      	movs	r2, #0
   b5c48:	2102      	movs	r1, #2
   b5c4a:	f7fe be5b 	b.w	b4904 <network_disconnect>

000b5c4e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5c4e:	2200      	movs	r2, #0
   b5c50:	6840      	ldr	r0, [r0, #4]
   b5c52:	4611      	mov	r1, r2
   b5c54:	f7fe be4e 	b.w	b48f4 <network_connecting>

000b5c58 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5c58:	2200      	movs	r2, #0
   b5c5a:	6840      	ldr	r0, [r0, #4]
   b5c5c:	4611      	mov	r1, r2
   b5c5e:	f7fe be59 	b.w	b4914 <network_ready>

000b5c62 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5c62:	2300      	movs	r3, #0
   b5c64:	6840      	ldr	r0, [r0, #4]
   b5c66:	461a      	mov	r2, r3
   b5c68:	4619      	mov	r1, r3
   b5c6a:	f7fe be5b 	b.w	b4924 <network_on>

000b5c6e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5c6e:	2300      	movs	r3, #0
   b5c70:	6840      	ldr	r0, [r0, #4]
   b5c72:	461a      	mov	r2, r3
   b5c74:	4619      	mov	r1, r3
   b5c76:	f7fe be5d 	b.w	b4934 <network_off>

000b5c7a <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5c7a:	6840      	ldr	r0, [r0, #4]
   b5c7c:	2100      	movs	r1, #0
   b5c7e:	f7fe be81 	b.w	b4984 <network_is_on>

000b5c82 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5c82:	6840      	ldr	r0, [r0, #4]
   b5c84:	2100      	movs	r1, #0
   b5c86:	f7fe be85 	b.w	b4994 <network_is_off>

000b5c8a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5c8a:	6840      	ldr	r0, [r0, #4]
   b5c8c:	2200      	movs	r2, #0
   b5c8e:	f081 0101 	eor.w	r1, r1, #1
   b5c92:	f7fe be57 	b.w	b4944 <network_listen>

000b5c96 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5c96:	6840      	ldr	r0, [r0, #4]
   b5c98:	2200      	movs	r2, #0
   b5c9a:	f7fe be63 	b.w	b4964 <network_set_listen_timeout>

000b5c9e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5c9e:	2200      	movs	r2, #0
   b5ca0:	6840      	ldr	r0, [r0, #4]
   b5ca2:	4611      	mov	r1, r2
   b5ca4:	f7fe be66 	b.w	b4974 <network_get_listen_timeout>

000b5ca8 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ca8:	2200      	movs	r2, #0
   b5caa:	6840      	ldr	r0, [r0, #4]
   b5cac:	4611      	mov	r1, r2
   b5cae:	f7fe be51 	b.w	b4954 <network_listening>

000b5cb2 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5cb2:	6840      	ldr	r0, [r0, #4]
   b5cb4:	2100      	movs	r1, #0
   b5cb6:	f7fe be7d 	b.w	b49b4 <network_is_preferred>

000b5cba <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5cbe:	b095      	sub	sp, #84	; 0x54
   b5cc0:	4614      	mov	r4, r2
   b5cc2:	460d      	mov	r5, r1
   b5cc4:	4607      	mov	r7, r0
    IPAddress addr;
   b5cc6:	f7ff fde7 	bl	b5898 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5cca:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5ccc:	221c      	movs	r2, #28
   b5cce:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5cd0:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5cd2:	f000 f9c6 	bl	b6062 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5cd6:	2340      	movs	r3, #64	; 0x40
   b5cd8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5cda:	4620      	mov	r0, r4
   b5cdc:	466b      	mov	r3, sp
   b5cde:	aa0c      	add	r2, sp, #48	; 0x30
   b5ce0:	2100      	movs	r1, #0
   b5ce2:	f7fe fc79 	bl	b45d8 <netdb_getaddrinfo>
    if (!r) {
   b5ce6:	4604      	mov	r4, r0
   b5ce8:	2800      	cmp	r0, #0
   b5cea:	d14b      	bne.n	b5d84 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5cec:	4602      	mov	r2, r0
   b5cee:	2101      	movs	r1, #1
   b5cf0:	6868      	ldr	r0, [r5, #4]
   b5cf2:	f7fe fe0f 	bl	b4914 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5cf6:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5cf8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5cfa:	4622      	mov	r2, r4
   b5cfc:	6868      	ldr	r0, [r5, #4]
   b5cfe:	f7fe fe09 	bl	b4914 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d02:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d04:	4681      	mov	r9, r0
        bool ok = false;
   b5d06:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d08:	2e00      	cmp	r6, #0
   b5d0a:	d03b      	beq.n	b5d84 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5d0c:	2900      	cmp	r1, #0
   b5d0e:	d139      	bne.n	b5d84 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5d10:	6873      	ldr	r3, [r6, #4]
   b5d12:	2b02      	cmp	r3, #2
   b5d14:	d003      	beq.n	b5d1e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5d16:	2b0a      	cmp	r3, #10
   b5d18:	d011      	beq.n	b5d3e <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d1a:	69f6      	ldr	r6, [r6, #28]
   b5d1c:	e7f4      	b.n	b5d08 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5d1e:	f1b8 0f00 	cmp.w	r8, #0
   b5d22:	d0fa      	beq.n	b5d1a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5d24:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5d26:	a806      	add	r0, sp, #24
   b5d28:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5d2a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5d2c:	f7ff fde2 	bl	b58f4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d32:	1d3c      	adds	r4, r7, #4
   b5d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d36:	682b      	ldr	r3, [r5, #0]
   b5d38:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5d3a:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5d3c:	e7ed      	b.n	b5d1a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5d3e:	f1b9 0f00 	cmp.w	r9, #0
   b5d42:	d0ea      	beq.n	b5d1a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5d44:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5d46:	2210      	movs	r2, #16
   b5d48:	a801      	add	r0, sp, #4
   b5d4a:	f000 f98a 	bl	b6062 <memset>
                    a.v = 6;
   b5d4e:	2306      	movs	r3, #6
   b5d50:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5d54:	ad01      	add	r5, sp, #4
   b5d56:	f104 0308 	add.w	r3, r4, #8
   b5d5a:	3418      	adds	r4, #24
   b5d5c:	6818      	ldr	r0, [r3, #0]
   b5d5e:	6859      	ldr	r1, [r3, #4]
   b5d60:	462a      	mov	r2, r5
   b5d62:	c203      	stmia	r2!, {r0, r1}
   b5d64:	3308      	adds	r3, #8
   b5d66:	42a3      	cmp	r3, r4
   b5d68:	4615      	mov	r5, r2
   b5d6a:	d1f7      	bne.n	b5d5c <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5d6c:	a901      	add	r1, sp, #4
   b5d6e:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5d70:	ad07      	add	r5, sp, #28
   b5d72:	f7ff fd9f 	bl	b58b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d78:	1d3c      	adds	r4, r7, #4
   b5d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d7c:	682b      	ldr	r3, [r5, #0]
   b5d7e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5d80:	4649      	mov	r1, r9
   b5d82:	e7ca      	b.n	b5d1a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5d84:	9800      	ldr	r0, [sp, #0]
   b5d86:	f7fe fc1f 	bl	b45c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5d8a:	4638      	mov	r0, r7
   b5d8c:	b015      	add	sp, #84	; 0x54
   b5d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b5d94 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5d94:	2803      	cmp	r0, #3
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5d96:	4602      	mov	r2, r0
    switch (nif) {
   b5d98:	d005      	beq.n	b5da6 <_ZN5spark12NetworkClass4fromEm+0x12>
   b5d9a:	4b04      	ldr	r3, [pc, #16]	; (b5dac <_ZN5spark12NetworkClass4fromEm+0x18>)
   b5d9c:	4804      	ldr	r0, [pc, #16]	; (b5db0 <_ZN5spark12NetworkClass4fromEm+0x1c>)
   b5d9e:	2a04      	cmp	r2, #4
   b5da0:	bf18      	it	ne
   b5da2:	4618      	movne	r0, r3
   b5da4:	4770      	bx	lr
        return Ethernet;
   b5da6:	4803      	ldr	r0, [pc, #12]	; (b5db4 <_ZN5spark12NetworkClass4fromEm+0x20>)
}
   b5da8:	4770      	bx	lr
   b5daa:	bf00      	nop
   b5dac:	2003e708 	.word	0x2003e708
   b5db0:	2003e6d8 	.word	0x2003e6d8
   b5db4:	2003e684 	.word	0x2003e684

000b5db8 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5db8:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5dba:	2200      	movs	r2, #0
   b5dbc:	6840      	ldr	r0, [r0, #4]
   b5dbe:	f7fe fdf1 	bl	b49a4 <network_prefer>
}
   b5dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b5dc6:	f7ff bfe5 	b.w	b5d94 <_ZN5spark12NetworkClass4fromEm>
	...

000b5dcc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5dcc:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5dce:	4a03      	ldr	r2, [pc, #12]	; (b5ddc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5dd0:	601a      	str	r2, [r3, #0]
   b5dd2:	2200      	movs	r2, #0
   b5dd4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5dd6:	4770      	bx	lr
   b5dd8:	2003e708 	.word	0x2003e708
   b5ddc:	000b64ac 	.word	0x000b64ac

000b5de0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5de0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5de2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5de4:	d902      	bls.n	b5dec <pinAvailable+0xc>
    return false;
   b5de6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5de8:	b002      	add	sp, #8
   b5dea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5dec:	f1a0 030b 	sub.w	r3, r0, #11
   b5df0:	2b02      	cmp	r3, #2
   b5df2:	d81a      	bhi.n	b5e2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5df4:	4c17      	ldr	r4, [pc, #92]	; (b5e54 <pinAvailable+0x74>)
   b5df6:	7821      	ldrb	r1, [r4, #0]
   b5df8:	f3bf 8f5b 	dmb	ish
   b5dfc:	f011 0101 	ands.w	r1, r1, #1
   b5e00:	d10b      	bne.n	b5e1a <pinAvailable+0x3a>
   b5e02:	4620      	mov	r0, r4
   b5e04:	9101      	str	r1, [sp, #4]
   b5e06:	f7fe f952 	bl	b40ae <__cxa_guard_acquire>
   b5e0a:	9901      	ldr	r1, [sp, #4]
   b5e0c:	b128      	cbz	r0, b5e1a <pinAvailable+0x3a>
   b5e0e:	4812      	ldr	r0, [pc, #72]	; (b5e58 <pinAvailable+0x78>)
   b5e10:	f7fe fea4 	bl	b4b5c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5e14:	4620      	mov	r0, r4
   b5e16:	f7fe f94f 	bl	b40b8 <__cxa_guard_release>
   b5e1a:	4b0f      	ldr	r3, [pc, #60]	; (b5e58 <pinAvailable+0x78>)
   b5e1c:	7818      	ldrb	r0, [r3, #0]
   b5e1e:	f7fe fcc3 	bl	b47a8 <hal_spi_is_enabled>
   b5e22:	2800      	cmp	r0, #0
   b5e24:	d1df      	bne.n	b5de6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5e26:	2001      	movs	r0, #1
   b5e28:	e7de      	b.n	b5de8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5e2a:	2801      	cmp	r0, #1
   b5e2c:	d809      	bhi.n	b5e42 <pinAvailable+0x62>
   b5e2e:	f000 f8b5 	bl	b5f9c <_Z19__fetch_global_Wirev>
   b5e32:	2100      	movs	r1, #0
   b5e34:	7c00      	ldrb	r0, [r0, #16]
   b5e36:	f7fe fc97 	bl	b4768 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5e3a:	f080 0001 	eor.w	r0, r0, #1
   b5e3e:	b2c0      	uxtb	r0, r0
   b5e40:	e7d2      	b.n	b5de8 <pinAvailable+0x8>
   b5e42:	3809      	subs	r0, #9
   b5e44:	2801      	cmp	r0, #1
   b5e46:	d8ee      	bhi.n	b5e26 <pinAvailable+0x46>
   b5e48:	f000 f84e 	bl	b5ee8 <_Z22__fetch_global_Serial1v>
   b5e4c:	7c00      	ldrb	r0, [r0, #16]
   b5e4e:	f7fe fc43 	bl	b46d8 <hal_usart_is_enabled>
   b5e52:	e7f2      	b.n	b5e3a <pinAvailable+0x5a>
   b5e54:	2003e710 	.word	0x2003e710
   b5e58:	2003e714 	.word	0x2003e714

000b5e5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5e5c:	2823      	cmp	r0, #35	; 0x23
{
   b5e5e:	b538      	push	{r3, r4, r5, lr}
   b5e60:	4604      	mov	r4, r0
   b5e62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5e64:	d80a      	bhi.n	b5e7c <pinMode+0x20>
   b5e66:	29ff      	cmp	r1, #255	; 0xff
   b5e68:	d008      	beq.n	b5e7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5e6a:	f7ff ffb9 	bl	b5de0 <pinAvailable>
   b5e6e:	b128      	cbz	r0, b5e7c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5e70:	4629      	mov	r1, r5
   b5e72:	4620      	mov	r0, r4
}
   b5e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5e78:	f7fe bbb6 	b.w	b45e8 <hal_gpio_mode>
}
   b5e7c:	bd38      	pop	{r3, r4, r5, pc}

000b5e7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5e7e:	b538      	push	{r3, r4, r5, lr}
   b5e80:	4604      	mov	r4, r0
   b5e82:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5e84:	f7fe fbb8 	bl	b45f8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5e88:	28ff      	cmp	r0, #255	; 0xff
   b5e8a:	d010      	beq.n	b5eae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5e8c:	2806      	cmp	r0, #6
   b5e8e:	d804      	bhi.n	b5e9a <digitalWrite+0x1c>
   b5e90:	234d      	movs	r3, #77	; 0x4d
   b5e92:	fa23 f000 	lsr.w	r0, r3, r0
   b5e96:	07c3      	lsls	r3, r0, #31
   b5e98:	d409      	bmi.n	b5eae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5e9a:	4620      	mov	r0, r4
   b5e9c:	f7ff ffa0 	bl	b5de0 <pinAvailable>
   b5ea0:	b128      	cbz	r0, b5eae <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5ea2:	4629      	mov	r1, r5
   b5ea4:	4620      	mov	r0, r4
}
   b5ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b5eaa:	f7fe bbad 	b.w	b4608 <hal_gpio_write>
}
   b5eae:	bd38      	pop	{r3, r4, r5, pc}

000b5eb0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5eb0:	4770      	bx	lr
	...

000b5eb4 <_Z20acquireSerial1Bufferv>:
{
   b5eb4:	b538      	push	{r3, r4, r5, lr}
   b5eb6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5eb8:	2514      	movs	r5, #20
   b5eba:	462a      	mov	r2, r5
   b5ebc:	2100      	movs	r1, #0
   b5ebe:	f000 f8d0 	bl	b6062 <memset>
   b5ec2:	8025      	strh	r5, [r4, #0]
   b5ec4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ec6:	4907      	ldr	r1, [pc, #28]	; (b5ee4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5ec8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5ecc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ece:	f000 f8af 	bl	b6030 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ed2:	4904      	ldr	r1, [pc, #16]	; (b5ee4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5ed4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ed6:	4628      	mov	r0, r5
   b5ed8:	f000 f8aa 	bl	b6030 <_ZnajRKSt9nothrow_t>
    };
   b5edc:	60e0      	str	r0, [r4, #12]
}
   b5ede:	4620      	mov	r0, r4
   b5ee0:	bd38      	pop	{r3, r4, r5, pc}
   b5ee2:	bf00      	nop
   b5ee4:	000b64e8 	.word	0x000b64e8

000b5ee8 <_Z22__fetch_global_Serial1v>:
{
   b5ee8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5eea:	4d0e      	ldr	r5, [pc, #56]	; (b5f24 <_Z22__fetch_global_Serial1v+0x3c>)
   b5eec:	7829      	ldrb	r1, [r5, #0]
   b5eee:	f3bf 8f5b 	dmb	ish
   b5ef2:	f011 0401 	ands.w	r4, r1, #1
{
   b5ef6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ef8:	d111      	bne.n	b5f1e <_Z22__fetch_global_Serial1v+0x36>
   b5efa:	4628      	mov	r0, r5
   b5efc:	f7fe f8d7 	bl	b40ae <__cxa_guard_acquire>
   b5f00:	b168      	cbz	r0, b5f1e <_Z22__fetch_global_Serial1v+0x36>
   b5f02:	a801      	add	r0, sp, #4
   b5f04:	f7ff ffd6 	bl	b5eb4 <_Z20acquireSerial1Bufferv>
   b5f08:	aa01      	add	r2, sp, #4
   b5f0a:	4621      	mov	r1, r4
   b5f0c:	4806      	ldr	r0, [pc, #24]	; (b5f28 <_Z22__fetch_global_Serial1v+0x40>)
   b5f0e:	f7ff fe0f 	bl	b5b30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5f12:	4628      	mov	r0, r5
   b5f14:	f7fe f8d0 	bl	b40b8 <__cxa_guard_release>
   b5f18:	4804      	ldr	r0, [pc, #16]	; (b5f2c <_Z22__fetch_global_Serial1v+0x44>)
   b5f1a:	f000 f88e 	bl	b603a <atexit>
    return serial1;
}
   b5f1e:	4802      	ldr	r0, [pc, #8]	; (b5f28 <_Z22__fetch_global_Serial1v+0x40>)
   b5f20:	b007      	add	sp, #28
   b5f22:	bd30      	pop	{r4, r5, pc}
   b5f24:	2003e71c 	.word	0x2003e71c
   b5f28:	2003e720 	.word	0x2003e720
   b5f2c:	000b5eb1 	.word	0x000b5eb1

000b5f30 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f30:	4770      	bx	lr

000b5f32 <__tcf_1>:
   b5f32:	4770      	bx	lr

000b5f34 <_Z17acquireWireBufferv>:
{
   b5f34:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f36:	4b0a      	ldr	r3, [pc, #40]	; (b5f60 <_Z17acquireWireBufferv+0x2c>)
   b5f38:	6003      	str	r3, [r0, #0]
   b5f3a:	2301      	movs	r3, #1
{
   b5f3c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f3e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f40:	4908      	ldr	r1, [pc, #32]	; (b5f64 <_Z17acquireWireBufferv+0x30>)
   b5f42:	2020      	movs	r0, #32
   b5f44:	f000 f874 	bl	b6030 <_ZnajRKSt9nothrow_t>
	};
   b5f48:	2520      	movs	r5, #32
   b5f4a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f4c:	4905      	ldr	r1, [pc, #20]	; (b5f64 <_Z17acquireWireBufferv+0x30>)
	};
   b5f4e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f50:	4628      	mov	r0, r5
   b5f52:	f000 f86d 	bl	b6030 <_ZnajRKSt9nothrow_t>
	};
   b5f56:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f5a:	4620      	mov	r0, r4
   b5f5c:	bd38      	pop	{r3, r4, r5, pc}
   b5f5e:	bf00      	nop
   b5f60:	00010018 	.word	0x00010018
   b5f64:	000b64e8 	.word	0x000b64e8

000b5f68 <_Z18acquireWire1Bufferv>:
{
   b5f68:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f6a:	4b0a      	ldr	r3, [pc, #40]	; (b5f94 <_Z18acquireWire1Bufferv+0x2c>)
   b5f6c:	6003      	str	r3, [r0, #0]
   b5f6e:	2301      	movs	r3, #1
{
   b5f70:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f72:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f74:	4908      	ldr	r1, [pc, #32]	; (b5f98 <_Z18acquireWire1Bufferv+0x30>)
   b5f76:	2020      	movs	r0, #32
   b5f78:	f000 f85a 	bl	b6030 <_ZnajRKSt9nothrow_t>
	};
   b5f7c:	2520      	movs	r5, #32
   b5f7e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f80:	4905      	ldr	r1, [pc, #20]	; (b5f98 <_Z18acquireWire1Bufferv+0x30>)
	};
   b5f82:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f84:	4628      	mov	r0, r5
   b5f86:	f000 f853 	bl	b6030 <_ZnajRKSt9nothrow_t>
	};
   b5f8a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f8e:	4620      	mov	r0, r4
   b5f90:	bd38      	pop	{r3, r4, r5, pc}
   b5f92:	bf00      	nop
   b5f94:	00010018 	.word	0x00010018
   b5f98:	000b64e8 	.word	0x000b64e8

000b5f9c <_Z19__fetch_global_Wirev>:
{
   b5f9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f9e:	4d0e      	ldr	r5, [pc, #56]	; (b5fd8 <_Z19__fetch_global_Wirev+0x3c>)
   b5fa0:	7829      	ldrb	r1, [r5, #0]
   b5fa2:	f3bf 8f5b 	dmb	ish
   b5fa6:	f011 0401 	ands.w	r4, r1, #1
{
   b5faa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5fac:	d111      	bne.n	b5fd2 <_Z19__fetch_global_Wirev+0x36>
   b5fae:	4628      	mov	r0, r5
   b5fb0:	f7fe f87d 	bl	b40ae <__cxa_guard_acquire>
   b5fb4:	b168      	cbz	r0, b5fd2 <_Z19__fetch_global_Wirev+0x36>
   b5fb6:	4668      	mov	r0, sp
   b5fb8:	f7ff ffbc 	bl	b5f34 <_Z17acquireWireBufferv>
   b5fbc:	466a      	mov	r2, sp
   b5fbe:	4621      	mov	r1, r4
   b5fc0:	4806      	ldr	r0, [pc, #24]	; (b5fdc <_Z19__fetch_global_Wirev+0x40>)
   b5fc2:	f7ff fe13 	bl	b5bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5fc6:	4628      	mov	r0, r5
   b5fc8:	f7fe f876 	bl	b40b8 <__cxa_guard_release>
   b5fcc:	4804      	ldr	r0, [pc, #16]	; (b5fe0 <_Z19__fetch_global_Wirev+0x44>)
   b5fce:	f000 f834 	bl	b603a <atexit>
	return wire;
}
   b5fd2:	4802      	ldr	r0, [pc, #8]	; (b5fdc <_Z19__fetch_global_Wirev+0x40>)
   b5fd4:	b007      	add	sp, #28
   b5fd6:	bd30      	pop	{r4, r5, pc}
   b5fd8:	2003e738 	.word	0x2003e738
   b5fdc:	2003e740 	.word	0x2003e740
   b5fe0:	000b5f31 	.word	0x000b5f31

000b5fe4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b5fe4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b5fe6:	4c0e      	ldr	r4, [pc, #56]	; (b6020 <_Z20__fetch_global_Wire1v+0x3c>)
   b5fe8:	7823      	ldrb	r3, [r4, #0]
   b5fea:	f3bf 8f5b 	dmb	ish
   b5fee:	07db      	lsls	r3, r3, #31
{
   b5ff0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b5ff2:	d411      	bmi.n	b6018 <_Z20__fetch_global_Wire1v+0x34>
   b5ff4:	4620      	mov	r0, r4
   b5ff6:	f7fe f85a 	bl	b40ae <__cxa_guard_acquire>
   b5ffa:	b168      	cbz	r0, b6018 <_Z20__fetch_global_Wire1v+0x34>
   b5ffc:	4668      	mov	r0, sp
   b5ffe:	f7ff ffb3 	bl	b5f68 <_Z18acquireWire1Bufferv>
   b6002:	466a      	mov	r2, sp
   b6004:	2101      	movs	r1, #1
   b6006:	4807      	ldr	r0, [pc, #28]	; (b6024 <_Z20__fetch_global_Wire1v+0x40>)
   b6008:	f7ff fdf0 	bl	b5bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b600c:	4620      	mov	r0, r4
   b600e:	f7fe f853 	bl	b40b8 <__cxa_guard_release>
   b6012:	4805      	ldr	r0, [pc, #20]	; (b6028 <_Z20__fetch_global_Wire1v+0x44>)
   b6014:	f000 f811 	bl	b603a <atexit>
	return wire;
}
   b6018:	4802      	ldr	r0, [pc, #8]	; (b6024 <_Z20__fetch_global_Wire1v+0x40>)
   b601a:	b006      	add	sp, #24
   b601c:	bd10      	pop	{r4, pc}
   b601e:	bf00      	nop
   b6020:	2003e73c 	.word	0x2003e73c
   b6024:	2003e754 	.word	0x2003e754
   b6028:	000b5f33 	.word	0x000b5f33

000b602c <_ZnwjRKSt9nothrow_t>:
   b602c:	f7fe b839 	b.w	b40a2 <_Znwj>

000b6030 <_ZnajRKSt9nothrow_t>:
   b6030:	f7fe b839 	b.w	b40a6 <_Znaj>

000b6034 <_ZSt25__throw_bad_function_callv>:
   b6034:	b508      	push	{r3, lr}
   b6036:	f7fe fd1d 	bl	b4a74 <abort>

000b603a <atexit>:
   b603a:	2300      	movs	r3, #0
   b603c:	4601      	mov	r1, r0
   b603e:	461a      	mov	r2, r3
   b6040:	4618      	mov	r0, r3
   b6042:	f000 b86b 	b.w	b611c <__register_exitproc>

000b6046 <memcpy>:
   b6046:	440a      	add	r2, r1
   b6048:	4291      	cmp	r1, r2
   b604a:	f100 33ff 	add.w	r3, r0, #4294967295
   b604e:	d100      	bne.n	b6052 <memcpy+0xc>
   b6050:	4770      	bx	lr
   b6052:	b510      	push	{r4, lr}
   b6054:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6058:	f803 4f01 	strb.w	r4, [r3, #1]!
   b605c:	4291      	cmp	r1, r2
   b605e:	d1f9      	bne.n	b6054 <memcpy+0xe>
   b6060:	bd10      	pop	{r4, pc}

000b6062 <memset>:
   b6062:	4402      	add	r2, r0
   b6064:	4603      	mov	r3, r0
   b6066:	4293      	cmp	r3, r2
   b6068:	d100      	bne.n	b606c <memset+0xa>
   b606a:	4770      	bx	lr
   b606c:	f803 1b01 	strb.w	r1, [r3], #1
   b6070:	e7f9      	b.n	b6066 <memset+0x4>
	...

000b6074 <srand>:
   b6074:	b538      	push	{r3, r4, r5, lr}
   b6076:	4b10      	ldr	r3, [pc, #64]	; (b60b8 <srand+0x44>)
   b6078:	681d      	ldr	r5, [r3, #0]
   b607a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b607c:	4604      	mov	r4, r0
   b607e:	b9b3      	cbnz	r3, b60ae <srand+0x3a>
   b6080:	2018      	movs	r0, #24
   b6082:	f7fe fcd7 	bl	b4a34 <malloc>
   b6086:	4602      	mov	r2, r0
   b6088:	63a8      	str	r0, [r5, #56]	; 0x38
   b608a:	b920      	cbnz	r0, b6096 <srand+0x22>
   b608c:	4b0b      	ldr	r3, [pc, #44]	; (b60bc <srand+0x48>)
   b608e:	480c      	ldr	r0, [pc, #48]	; (b60c0 <srand+0x4c>)
   b6090:	2142      	movs	r1, #66	; 0x42
   b6092:	f7fe fcff 	bl	b4a94 <__assert_func>
   b6096:	490b      	ldr	r1, [pc, #44]	; (b60c4 <srand+0x50>)
   b6098:	4b0b      	ldr	r3, [pc, #44]	; (b60c8 <srand+0x54>)
   b609a:	e9c0 1300 	strd	r1, r3, [r0]
   b609e:	4b0b      	ldr	r3, [pc, #44]	; (b60cc <srand+0x58>)
   b60a0:	6083      	str	r3, [r0, #8]
   b60a2:	230b      	movs	r3, #11
   b60a4:	8183      	strh	r3, [r0, #12]
   b60a6:	2100      	movs	r1, #0
   b60a8:	2001      	movs	r0, #1
   b60aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b60ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b60b0:	2200      	movs	r2, #0
   b60b2:	611c      	str	r4, [r3, #16]
   b60b4:	615a      	str	r2, [r3, #20]
   b60b6:	bd38      	pop	{r3, r4, r5, pc}
   b60b8:	2003e558 	.word	0x2003e558
   b60bc:	000b64e9 	.word	0x000b64e9
   b60c0:	000b6500 	.word	0x000b6500
   b60c4:	abcd330e 	.word	0xabcd330e
   b60c8:	e66d1234 	.word	0xe66d1234
   b60cc:	0005deec 	.word	0x0005deec

000b60d0 <strcpy>:
   b60d0:	4603      	mov	r3, r0
   b60d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b60d6:	f803 2b01 	strb.w	r2, [r3], #1
   b60da:	2a00      	cmp	r2, #0
   b60dc:	d1f9      	bne.n	b60d2 <strcpy+0x2>
   b60de:	4770      	bx	lr

000b60e0 <strdup>:
   b60e0:	4b02      	ldr	r3, [pc, #8]	; (b60ec <strdup+0xc>)
   b60e2:	4601      	mov	r1, r0
   b60e4:	6818      	ldr	r0, [r3, #0]
   b60e6:	f000 b803 	b.w	b60f0 <_strdup_r>
   b60ea:	bf00      	nop
   b60ec:	2003e558 	.word	0x2003e558

000b60f0 <_strdup_r>:
   b60f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b60f2:	4604      	mov	r4, r0
   b60f4:	4608      	mov	r0, r1
   b60f6:	460d      	mov	r5, r1
   b60f8:	f7fd ff90 	bl	b401c <strlen>
   b60fc:	1c42      	adds	r2, r0, #1
   b60fe:	4611      	mov	r1, r2
   b6100:	4620      	mov	r0, r4
   b6102:	9201      	str	r2, [sp, #4]
   b6104:	f7fe fcbe 	bl	b4a84 <_malloc_r>
   b6108:	4604      	mov	r4, r0
   b610a:	b118      	cbz	r0, b6114 <_strdup_r+0x24>
   b610c:	9a01      	ldr	r2, [sp, #4]
   b610e:	4629      	mov	r1, r5
   b6110:	f7ff ff99 	bl	b6046 <memcpy>
   b6114:	4620      	mov	r0, r4
   b6116:	b003      	add	sp, #12
   b6118:	bd30      	pop	{r4, r5, pc}
	...

000b611c <__register_exitproc>:
   b611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6120:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b61dc <__register_exitproc+0xc0>
   b6124:	4606      	mov	r6, r0
   b6126:	f8d8 0000 	ldr.w	r0, [r8]
   b612a:	461f      	mov	r7, r3
   b612c:	460d      	mov	r5, r1
   b612e:	4691      	mov	r9, r2
   b6130:	f000 f856 	bl	b61e0 <__retarget_lock_acquire_recursive>
   b6134:	4b25      	ldr	r3, [pc, #148]	; (b61cc <__register_exitproc+0xb0>)
   b6136:	681c      	ldr	r4, [r3, #0]
   b6138:	b934      	cbnz	r4, b6148 <__register_exitproc+0x2c>
   b613a:	4c25      	ldr	r4, [pc, #148]	; (b61d0 <__register_exitproc+0xb4>)
   b613c:	601c      	str	r4, [r3, #0]
   b613e:	4b25      	ldr	r3, [pc, #148]	; (b61d4 <__register_exitproc+0xb8>)
   b6140:	b113      	cbz	r3, b6148 <__register_exitproc+0x2c>
   b6142:	681b      	ldr	r3, [r3, #0]
   b6144:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6148:	6863      	ldr	r3, [r4, #4]
   b614a:	2b1f      	cmp	r3, #31
   b614c:	dd07      	ble.n	b615e <__register_exitproc+0x42>
   b614e:	f8d8 0000 	ldr.w	r0, [r8]
   b6152:	f000 f847 	bl	b61e4 <__retarget_lock_release_recursive>
   b6156:	f04f 30ff 	mov.w	r0, #4294967295
   b615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b615e:	b34e      	cbz	r6, b61b4 <__register_exitproc+0x98>
   b6160:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6164:	b988      	cbnz	r0, b618a <__register_exitproc+0x6e>
   b6166:	4b1c      	ldr	r3, [pc, #112]	; (b61d8 <__register_exitproc+0xbc>)
   b6168:	b923      	cbnz	r3, b6174 <__register_exitproc+0x58>
   b616a:	f8d8 0000 	ldr.w	r0, [r8]
   b616e:	f000 f838 	bl	b61e2 <__retarget_lock_release>
   b6172:	e7f0      	b.n	b6156 <__register_exitproc+0x3a>
   b6174:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6178:	f7fe fc5c 	bl	b4a34 <malloc>
   b617c:	2800      	cmp	r0, #0
   b617e:	d0f4      	beq.n	b616a <__register_exitproc+0x4e>
   b6180:	2300      	movs	r3, #0
   b6182:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6186:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b618a:	6863      	ldr	r3, [r4, #4]
   b618c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6190:	2201      	movs	r2, #1
   b6192:	409a      	lsls	r2, r3
   b6194:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6198:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b619c:	4313      	orrs	r3, r2
   b619e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b61a2:	2e02      	cmp	r6, #2
   b61a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b61a8:	bf02      	ittt	eq
   b61aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b61ae:	4313      	orreq	r3, r2
   b61b0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b61b4:	6863      	ldr	r3, [r4, #4]
   b61b6:	f8d8 0000 	ldr.w	r0, [r8]
   b61ba:	1c5a      	adds	r2, r3, #1
   b61bc:	3302      	adds	r3, #2
   b61be:	6062      	str	r2, [r4, #4]
   b61c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b61c4:	f000 f80e 	bl	b61e4 <__retarget_lock_release_recursive>
   b61c8:	2000      	movs	r0, #0
   b61ca:	e7c6      	b.n	b615a <__register_exitproc+0x3e>
   b61cc:	2003e7f4 	.word	0x2003e7f4
   b61d0:	2003e768 	.word	0x2003e768
   b61d4:	00000000 	.word	0x00000000
   b61d8:	000b4a35 	.word	0x000b4a35
   b61dc:	2003e5bc 	.word	0x2003e5bc

000b61e0 <__retarget_lock_acquire_recursive>:
   b61e0:	4770      	bx	lr

000b61e2 <__retarget_lock_release>:
   b61e2:	4770      	bx	lr

000b61e4 <__retarget_lock_release_recursive>:
   b61e4:	4770      	bx	lr

000b61e6 <link_code_end>:
	...

000b61e8 <dynalib_user>:
   b61e8:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b61f8:	0000 0000 6f63 6c75 2064 6f6e 2074 6572     ....could not re
   b6208:	6563 7669 2065 7266 6d6f 6f20 6570 6d6e     ceive from openm
   b6218:	0076 6f63 6c75 2064 6f6e 2074 6573 646e     v.could not send
   b6228:	6420 7461 7465 6d69 2065 6f74 6f20 6570      datetime to ope
   b6238:	6d6e 0076 002c 7254 6979 676e 7420 206f     nmv.,.Trying to 
   b6248:	6f63 6e6e 6365 0074 7570 6c62 7369 6968     connect.publishi
   b6258:	676e 6420 7461 0061 7570 6c62 7369 2068     ng data.publish 
   b6268:	6572 7573 746c 2520 0064 616d 2078 6974     result %d.max ti
   b6278:	656d 6620 726f 7020 6275 696c 6873 6e69     me for publishin
   b6288:	2067 6572 6361 6568 2064 6977 6874 756f     g reached withou
   b6298:	2074 7573 6363 7365 3b73 6720 206f 6f74     t success; go to
   b62a8:	7320 656c 7065 4e00 746f 6d20 7861 7420      sleep.Not max t
   b62b8:	6d69 2c65 7420 7972 6120 6167 6e69 7420     ime, try again t
   b62c8:	206f 6f63 6e6e 6365 2074 6e61 2064 7570     o connect and pu
   b62d8:	6c62 7369 0068 6f67 6e69 2067 6f74 7320     blish.going to s
   b62e8:	656c 7065 4600 6565 696c 676e 7220 7365     leep.Feeling res
   b62f8:	6c74 7365 0073 6c46 6f6f 6f64 4e72 006f     tless.FloodorNo.

000b6308 <_ZTVN5spark13EthernetClassE>:
	...
   b6310:	4b13 000b 4b09 000b 4aff 000b 4af5 000b     .K...K...J...J..
   b6320:	4ae9 000b 4add 000b 5c7b 000b 5c83 000b     .J...J..{\...\..
   b6330:	4ad1 000b 4ac9 000b 4abf 000b 4ab5 000b     .J...J...J...J..
   b6340:	5db9 000b 5cb3 000b 5cbb 000b 6977 6972     .]...\...\..wiri
   b6350:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   b6360:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   b6370:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
   b6380:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   b6390:	007a 7361 7463 6d69 0065 0000               z.asctime...

000b639c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b63a4:	52f5 000b 52fb 000b 5339 000b 5309 000b     .R...R..9S...S..
   b63b4:	52f7 000b                                   .R..

000b63b8 <_ZTV9IPAddress>:
	...
   b63c0:	5835 000b 5825 000b 5827 000b               5X..%X..'X..

000b63cc <_ZTV9USBSerial>:
	...
   b63d4:	591b 000b 5983 000b 5959 000b 4f35 000b     .Y...Y..YY..5O..
   b63e4:	594b 000b 591d 000b 592d 000b 597d 000b     KY...Y..-Y..}Y..
   b63f4:	5087 000b 593d 000b 5915 000b               .P..=Y...Y..

000b6400 <_ZTVN5spark13CellularClassE>:
	...
   b6408:	5a7b 000b 5a71 000b 5a67 000b 5a1d 000b     {Z..qZ..gZ...Z..
   b6418:	5a5b 000b 5a4f 000b 5c7b 000b 5c83 000b     [Z..OZ..{\...\..
   b6428:	5a43 000b 5a3b 000b 5a31 000b 5a27 000b     CZ..;Z..1Z..'Z..
   b6438:	5db9 000b 5cb3 000b 5cbb 000b               .]...\...\..

000b6444 <_ZTV11USARTSerial>:
	...
   b644c:	5ab5 000b 5b21 000b 5af9 000b 4f35 000b     .Z..![...Z..5O..
   b645c:	5ac9 000b 5ae5 000b 5ad7 000b 5af3 000b     .Z...Z...Z...Z..
   b646c:	5087 000b 5ab7 000b 5abb 000b               .P...Z...Z..

000b6478 <_ZTV7TwoWire>:
	...
   b6480:	5b95 000b 5bdf 000b 5bb7 000b 5b97 000b     .[...[...[...[..
   b6490:	5bbf 000b 5bc7 000b 5bcf 000b 5bd7 000b     .[...[...[...[..
   b64a0:	5087 000b                                   .P..

000b64a4 <_ZTVN5spark12NetworkClassE>:
	...
   b64ac:	5c3b 000b 5c45 000b 5c4f 000b 5c59 000b     ;\..E\..O\..Y\..
   b64bc:	5c63 000b 5c6f 000b 5c7b 000b 5c83 000b     c\..o\..{\...\..
   b64cc:	5c8b 000b 5c97 000b 5c9f 000b 5ca9 000b     .\...\...\...\..
   b64dc:	5db9 000b 5cb3 000b 5cbb 000b               .]...\...\..

000b64e8 <_ZSt7nothrow>:
   b64e8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b64f8:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6508:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6518:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6528:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6538:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6548:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6558:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6568:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6578:	646e 632e                                    nd.c.

000b657d <link_const_data_end>:
   b657d:	00          	.byte	0x00
	...

000b6580 <link_constructors_location>:
   b6580:	000b4555 	.word	0x000b4555
   b6584:	000b4b1d 	.word	0x000b4b1d
   b6588:	000b4ca1 	.word	0x000b4ca1
   b658c:	000b4f25 	.word	0x000b4f25
   b6590:	000b50dd 	.word	0x000b50dd
   b6594:	000b5161 	.word	0x000b5161
   b6598:	000b517d 	.word	0x000b517d
   b659c:	000b5a85 	.word	0x000b5a85
   b65a0:	000b5dcd 	.word	0x000b5dcd

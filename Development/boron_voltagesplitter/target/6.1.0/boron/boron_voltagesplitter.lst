
c:/Users/efarquh/Documents/GitHub/Boron-and-OpenMV/src/boron_voltagesplitter/target/6.1.0/boron/boron_voltagesplitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000039e4  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7a04  000b7a04  00007a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e5c4  000b7a28  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c4  2003e638  2003e638  0001e638  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b7a9c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b7aa0  000b7aa0  00017aa0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b7aa6  000b7aa6  00017aa6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7aca  000b7aca  00017aca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00186d38  00000000  00000000  00017ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015106  00000000  00000000  0019e806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0005ec36  00000000  00000000  001b390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000033a8  00000000  00000000  00212542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ee28  00000000  00000000  002158ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003be2c  00000000  00000000  00224712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004d4c2  00000000  00000000  0026053e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001bdad0  00000000  00000000  002ada00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000988c  00000000  00000000  0046b4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <strcmp>:
   b4a28:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a30:	2a01      	cmp	r2, #1
   b4a32:	bf28      	it	cs
   b4a34:	429a      	cmpcs	r2, r3
   b4a36:	d0f7      	beq.n	b4a28 <strcmp>
   b4a38:	1ad0      	subs	r0, r2, r3
   b4a3a:	4770      	bx	lr

000b4a3c <strlen>:
   b4a3c:	4603      	mov	r3, r0
   b4a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a42:	2a00      	cmp	r2, #0
   b4a44:	d1fb      	bne.n	b4a3e <strlen+0x2>
   b4a46:	1a18      	subs	r0, r3, r0
   b4a48:	3801      	subs	r0, #1
   b4a4a:	4770      	bx	lr

000b4a4c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a4c:	4809      	ldr	r0, [pc, #36]	; (b4a74 <module_user_pre_init+0x28>)
   b4a4e:	490a      	ldr	r1, [pc, #40]	; (b4a78 <module_user_pre_init+0x2c>)
   b4a50:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a52:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a54:	d005      	beq.n	b4a62 <module_user_pre_init+0x16>
   b4a56:	4a09      	ldr	r2, [pc, #36]	; (b4a7c <module_user_pre_init+0x30>)
   b4a58:	4282      	cmp	r2, r0
   b4a5a:	d002      	beq.n	b4a62 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a5c:	1a12      	subs	r2, r2, r0
   b4a5e:	f002 fbe5 	bl	b722c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a62:	4807      	ldr	r0, [pc, #28]	; (b4a80 <module_user_pre_init+0x34>)
   b4a64:	4a07      	ldr	r2, [pc, #28]	; (b4a84 <module_user_pre_init+0x38>)
   b4a66:	2100      	movs	r1, #0
   b4a68:	1a12      	subs	r2, r2, r0
   b4a6a:	f002 fc07 	bl	b727c <memset>
    return &link_global_data_start;
}
   b4a6e:	4801      	ldr	r0, [pc, #4]	; (b4a74 <module_user_pre_init+0x28>)
   b4a70:	bd08      	pop	{r3, pc}
   b4a72:	bf00      	nop
   b4a74:	2003e5c4 	.word	0x2003e5c4
   b4a78:	000b7a28 	.word	0x000b7a28
   b4a7c:	2003e638 	.word	0x2003e638
   b4a80:	2003e638 	.word	0x2003e638
   b4a84:	2003e7fc 	.word	0x2003e7fc

000b4a88 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a88:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a8a:	4e07      	ldr	r6, [pc, #28]	; (b4aa8 <module_user_init+0x20>)
   b4a8c:	4c07      	ldr	r4, [pc, #28]	; (b4aac <module_user_init+0x24>)
    module_user_init_hook();
   b4a8e:	f001 fe19 	bl	b66c4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a92:	1ba4      	subs	r4, r4, r6
   b4a94:	08a4      	lsrs	r4, r4, #2
   b4a96:	2500      	movs	r5, #0
   b4a98:	42ac      	cmp	r4, r5
   b4a9a:	d100      	bne.n	b4a9e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a9c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a9e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4aa2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4aa4:	3501      	adds	r5, #1
   b4aa6:	e7f7      	b.n	b4a98 <module_user_init+0x10>
   b4aa8:	000b79e0 	.word	0x000b79e0
   b4aac:	000b7a04 	.word	0x000b7a04

000b4ab0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4ab0:	f000 b848 	b.w	b4b44 <setup>

000b4ab4 <module_user_loop>:
}

void module_user_loop() {
   b4ab4:	b508      	push	{r3, lr}
    loop();
   b4ab6:	f000 f84f 	bl	b4b58 <loop>
    _post_loop();
}
   b4aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4abe:	f001 bdb9 	b.w	b6634 <_post_loop>

000b4ac2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ac2:	f000 bbdb 	b.w	b527c <malloc>

000b4ac6 <_Znaj>:
   b4ac6:	f000 bbd9 	b.w	b527c <malloc>

000b4aca <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4aca:	f000 bbdf 	b.w	b528c <free>
	...

000b4ad0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ad0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ad2:	4a03      	ldr	r2, [pc, #12]	; (b4ae0 <__cxa_pure_virtual+0x10>)
   b4ad4:	4903      	ldr	r1, [pc, #12]	; (b4ae4 <__cxa_pure_virtual+0x14>)
   b4ad6:	200c      	movs	r0, #12
   b4ad8:	f000 fb14 	bl	b5104 <panic_>
  while (1);
   b4adc:	e7fe      	b.n	b4adc <__cxa_pure_virtual+0xc>
   b4ade:	bf00      	nop
   b4ae0:	000b4ee5 	.word	0x000b4ee5
   b4ae4:	000b7570 	.word	0x000b7570

000b4ae8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ae8:	7800      	ldrb	r0, [r0, #0]
   b4aea:	fab0 f080 	clz	r0, r0
   b4aee:	0940      	lsrs	r0, r0, #5
   b4af0:	4770      	bx	lr

000b4af2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4af2:	2301      	movs	r3, #1
   b4af4:	7003      	strb	r3, [r0, #0]
   b4af6:	4770      	bx	lr

000b4af8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4af8:	4770      	bx	lr
	...

000b4afc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4afc:	4b0a      	ldr	r3, [pc, #40]	; (b4b28 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4afe:	b510      	push	{r4, lr}
   b4b00:	4604      	mov	r4, r0
   b4b02:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4b04:	f000 ff1a 	bl	b593c <_ZN5spark10LogManager8instanceEv>
   b4b08:	4621      	mov	r1, r4
   b4b0a:	f001 f964 	bl	b5dd6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4b0e:	f001 fee5 	bl	b68dc <_Z16_fetch_usbserialv>
   b4b12:	f001 fed7 	bl	b68c4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4b16:	4620      	mov	r0, r4
   b4b18:	4b04      	ldr	r3, [pc, #16]	; (b4b2c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4b1a:	f840 3b04 	str.w	r3, [r0], #4
   b4b1e:	f000 ffe3 	bl	b5ae8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4b22:	4620      	mov	r0, r4
   b4b24:	bd10      	pop	{r4, pc}
   b4b26:	bf00      	nop
   b4b28:	000b75b4 	.word	0x000b75b4
   b4b2c:	000b759c 	.word	0x000b759c

000b4b30 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4b30:	b510      	push	{r4, lr}
   b4b32:	4604      	mov	r4, r0
    }
   b4b34:	f7ff ffe2 	bl	b4afc <_ZN5spark16SerialLogHandlerD1Ev>
   b4b38:	4620      	mov	r0, r4
   b4b3a:	2124      	movs	r1, #36	; 0x24
   b4b3c:	f7ff ffc5 	bl	b4aca <_ZdlPvj>
   b4b40:	4620      	mov	r0, r4
   b4b42:	bd10      	pop	{r4, pc}

000b4b44 <setup>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4b44:	4803      	ldr	r0, [pc, #12]	; (b4b54 <setup+0x10>)
   b4b46:	2300      	movs	r3, #0
   b4b48:	6840      	ldr	r0, [r0, #4]
   b4b4a:	461a      	mov	r2, r3
   b4b4c:	4619      	mov	r1, r3
   b4b4e:	f000 bb45 	b.w	b51dc <network_off>
   b4b52:	bf00      	nop
   b4b54:	2003e6f0 	.word	0x2003e6f0

000b4b58 <loop>:
void setup() {
  Cellular.off(); 
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b4b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //float voltage = analogRead(A1) * ((3.3/4096)*((2000000+1300000)/2000000));
  //Serial.print(analogRead(A1)); 
  //float bits = analogRead(A1); 
  //Serial.println(bits); 
  delay(1000); 
   b4b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void loop() {
   b4b60:	ed2d 8b02 	vpush	{d8}
  delay(1000); 
   b4b64:	f001 fd3a 	bl	b65dc <delay>
  float voltage = analogRead(A1)*.00133;
   b4b68:	2012      	movs	r0, #18
   b4b6a:	f002 fab7 	bl	b70dc <analogRead>
   b4b6e:	f7ff fba9 	bl	b42c4 <__aeabi_i2d>
   b4b72:	a361      	add	r3, pc, #388	; (adr r3, b4cf8 <loop+0x1a0>)
   b4b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b78:	f7ff fc0e 	bl	b4398 <__aeabi_dmul>
   b4b7c:	f7ff ff04 	bl	b4988 <__aeabi_d2f>
   b4b80:	ee08 0a10 	vmov	s16, r0
  // 3.3V / 4096 counts * ((R1 + R2) / R1) where R1 and R2 are in ohms
  delay(100); 
   b4b84:	2064      	movs	r0, #100	; 0x64
   b4b86:	f001 fd29 	bl	b65dc <delay>
  Serial.println(voltage); 
   b4b8a:	f001 fea7 	bl	b68dc <_Z16_fetch_usbserialv>
   b4b8e:	4682      	mov	sl, r0
        return n;
    }

#ifndef PARTICLE_WIRING_PRINT_NO_FLOAT
    size_t println(float num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
        return println((double)num, digits);
   b4b90:	ee18 0a10 	vmov	r0, s16
   b4b94:	f7ff fba8 	bl	b42e8 <__aeabi_f2d>
        if (std::isnan(number)) {
   b4b98:	4602      	mov	r2, r0
   b4b9a:	460b      	mov	r3, r1
        return println((double)num, digits);
   b4b9c:	4604      	mov	r4, r0
   b4b9e:	460d      	mov	r5, r1
   b4ba0:	4606      	mov	r6, r0
   b4ba2:	460f      	mov	r7, r1
        if (std::isnan(number)) {
   b4ba4:	f7ff fe92 	bl	b48cc <__aeabi_dcmpun>
   b4ba8:	b170      	cbz	r0, b4bc8 <loop+0x70>
            return print("nan");
   b4baa:	494b      	ldr	r1, [pc, #300]	; (b4cd8 <loop+0x180>)
            return print("inf");
   b4bac:	4650      	mov	r0, sl
   b4bae:	f000 fd0d 	bl	b55cc <_ZN5Print5printEPKc>
    }

    size_t println(double num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
        size_t n = print(num, digits);
        n += println();
   b4bb2:	4650      	mov	r0, sl
   b4bb4:	f000 fd11 	bl	b55da <_ZN5Print7printlnEv>
  delay(1000); 
   b4bb8:	ecbd 8b02 	vpop	{d8}
  delay(1000); 
   b4bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4bc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  delay(1000); 
   b4bc4:	f001 bd0a 	b.w	b65dc <delay>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b4bc8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
   b4bcc:	4b43      	ldr	r3, [pc, #268]	; (b4cdc <loop+0x184>)
   b4bce:	f04f 32ff 	mov.w	r2, #4294967295
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	4649      	mov	r1, r9
   b4bd6:	f7ff fe79 	bl	b48cc <__aeabi_dcmpun>
   b4bda:	b948      	cbnz	r0, b4bf0 <loop+0x98>
   b4bdc:	4b3f      	ldr	r3, [pc, #252]	; (b4cdc <loop+0x184>)
   b4bde:	f04f 32ff 	mov.w	r2, #4294967295
   b4be2:	4620      	mov	r0, r4
   b4be4:	4649      	mov	r1, r9
   b4be6:	f7ff fe53 	bl	b4890 <__aeabi_dcmple>
   b4bea:	b908      	cbnz	r0, b4bf0 <loop+0x98>
            return print("inf");
   b4bec:	493c      	ldr	r1, [pc, #240]	; (b4ce0 <loop+0x188>)
   b4bee:	e7dd      	b.n	b4bac <loop+0x54>
        if (number > 4294967040.0) {
   b4bf0:	eddf 7a3c 	vldr	s15, [pc, #240]	; b4ce4 <loop+0x18c>
   b4bf4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bfc:	dd01      	ble.n	b4c02 <loop+0xaa>
            return print ("ovf"); // constant determined empirically
   b4bfe:	493a      	ldr	r1, [pc, #232]	; (b4ce8 <loop+0x190>)
   b4c00:	e7d4      	b.n	b4bac <loop+0x54>
        if (number <-4294967040.0) {
   b4c02:	eddf 7a3a 	vldr	s15, [pc, #232]	; b4cec <loop+0x194>
   b4c06:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c0e:	d4f6      	bmi.n	b4bfe <loop+0xa6>
        if (number < 0.0) {
   b4c10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c18:	d506      	bpl.n	b4c28 <loop+0xd0>
            n += print('-');
   b4c1a:	212d      	movs	r1, #45	; 0x2d
   b4c1c:	4650      	mov	r0, sl
   b4c1e:	f000 fcd9 	bl	b55d4 <_ZN5Print5printEc>
            number = -number;
   b4c22:	4626      	mov	r6, r4
   b4c24:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
        number += rounding;
   b4c28:	a329      	add	r3, pc, #164	; (adr r3, b4cd0 <loop+0x178>)
   b4c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c2e:	4630      	mov	r0, r6
   b4c30:	4639      	mov	r1, r7
   b4c32:	f7ff f9fb 	bl	b402c <__adddf3>
   b4c36:	460d      	mov	r5, r1
   b4c38:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
   b4c3a:	f7ff fe85 	bl	b4948 <__aeabi_d2uiz>
   b4c3e:	4606      	mov	r6, r0
        double remainder = number - (double)int_part;
   b4c40:	f7ff fb30 	bl	b42a4 <__aeabi_ui2d>
   b4c44:	460b      	mov	r3, r1
   b4c46:	4602      	mov	r2, r0
   b4c48:	4629      	mov	r1, r5
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	f7ff f9ec 	bl	b4028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4c50:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
   b4c52:	4604      	mov	r4, r0
   b4c54:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
   b4c56:	4650      	mov	r0, sl
   b4c58:	4631      	mov	r1, r6
   b4c5a:	f000 fcca 	bl	b55f2 <_ZN5Print11printNumberEmh>
            n += print(".");
   b4c5e:	4924      	ldr	r1, [pc, #144]	; (b4cf0 <loop+0x198>)
   b4c60:	4650      	mov	r0, sl
   b4c62:	f000 fcb3 	bl	b55cc <_ZN5Print5printEPKc>
            remainder *= 10.0;
   b4c66:	4b23      	ldr	r3, [pc, #140]	; (b4cf4 <loop+0x19c>)
   b4c68:	2200      	movs	r2, #0
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	4629      	mov	r1, r5
   b4c6e:	f7ff fb93 	bl	b4398 <__aeabi_dmul>
   b4c72:	4606      	mov	r6, r0
   b4c74:	460f      	mov	r7, r1
            int toPrint = int(remainder);
   b4c76:	f7ff fe3f 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b4c7a:	1e04      	subs	r4, r0, #0
   b4c7c:	db1b      	blt.n	b4cb6 <loop+0x15e>
            val = n;
   b4c7e:	4621      	mov	r1, r4
        return printNumber(val, base) + t;
   b4c80:	220a      	movs	r2, #10
   b4c82:	4650      	mov	r0, sl
   b4c84:	f000 fcb5 	bl	b55f2 <_ZN5Print11printNumberEmh>
            remainder -= toPrint;
   b4c88:	4620      	mov	r0, r4
   b4c8a:	f7ff fb1b 	bl	b42c4 <__aeabi_i2d>
   b4c8e:	4602      	mov	r2, r0
   b4c90:	460b      	mov	r3, r1
   b4c92:	4630      	mov	r0, r6
   b4c94:	4639      	mov	r1, r7
   b4c96:	f7ff f9c7 	bl	b4028 <__aeabi_dsub>
            remainder *= 10.0;
   b4c9a:	4b16      	ldr	r3, [pc, #88]	; (b4cf4 <loop+0x19c>)
   b4c9c:	2200      	movs	r2, #0
   b4c9e:	f7ff fb7b 	bl	b4398 <__aeabi_dmul>
            int toPrint = int(remainder);
   b4ca2:	f7ff fe29 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b4ca6:	1e04      	subs	r4, r0, #0
   b4ca8:	db0b      	blt.n	b4cc2 <loop+0x16a>
            val = n;
   b4caa:	4621      	mov	r1, r4
        return printNumber(val, base) + t;
   b4cac:	220a      	movs	r2, #10
   b4cae:	4650      	mov	r0, sl
   b4cb0:	f000 fc9f 	bl	b55f2 <_ZN5Print11printNumberEmh>
        while (digits-- > 0) {
   b4cb4:	e77d      	b.n	b4bb2 <loop+0x5a>
            t = print('-');
   b4cb6:	212d      	movs	r1, #45	; 0x2d
   b4cb8:	4650      	mov	r0, sl
   b4cba:	f000 fc8b 	bl	b55d4 <_ZN5Print5printEc>
            val = -n;
   b4cbe:	4261      	negs	r1, r4
   b4cc0:	e7de      	b.n	b4c80 <loop+0x128>
            t = print('-');
   b4cc2:	212d      	movs	r1, #45	; 0x2d
   b4cc4:	4650      	mov	r0, sl
   b4cc6:	f000 fc85 	bl	b55d4 <_ZN5Print5printEc>
            val = -n;
   b4cca:	4261      	negs	r1, r4
   b4ccc:	e7ee      	b.n	b4cac <loop+0x154>
   b4cce:	bf00      	nop
   b4cd0:	47ae147b 	.word	0x47ae147b
   b4cd4:	3f747ae1 	.word	0x3f747ae1
   b4cd8:	000b7585 	.word	0x000b7585
   b4cdc:	7fefffff 	.word	0x7fefffff
   b4ce0:	000b7589 	.word	0x000b7589
   b4ce4:	4f7fffff 	.word	0x4f7fffff
   b4ce8:	000b758d 	.word	0x000b758d
   b4cec:	cf7fffff 	.word	0xcf7fffff
   b4cf0:	000b7591 	.word	0x000b7591
   b4cf4:	40240000 	.word	0x40240000
   b4cf8:	a03c4b0a 	.word	0xa03c4b0a
   b4cfc:	3f55ca6c 	.word	0x3f55ca6c

000b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d00:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4d02:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4d06:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d08:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4d0a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4d0e:	42ae      	cmp	r6, r5
   b4d10:	d004      	beq.n	b4d1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4d12:	4628      	mov	r0, r5
   b4d14:	f000 fb64 	bl	b53e0 <_ZN6StringD1Ev>
   b4d18:	3514      	adds	r5, #20
   b4d1a:	e7f8      	b.n	b4d0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4d1c:	6820      	ldr	r0, [r4, #0]
   b4d1e:	f000 fab5 	bl	b528c <free>
    AllocatorT::free(data_);
}
   b4d22:	4620      	mov	r0, r4
   b4d24:	bd70      	pop	{r4, r5, r6, pc}

000b4d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4d26:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d2a:	4604      	mov	r4, r0
   b4d2c:	460d      	mov	r5, r1
   b4d2e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4d30:	d916      	bls.n	b4d60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4d32:	4290      	cmp	r0, r2
   b4d34:	d215      	bcs.n	b4d62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4d36:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4d3a:	1a75      	subs	r5, r6, r1
   b4d3c:	f1a1 0714 	sub.w	r7, r1, #20
   b4d40:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4d42:	42b7      	cmp	r7, r6
   b4d44:	d01c      	beq.n	b4d80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4d46:	b12c      	cbz	r4, b4d54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4d48:	4631      	mov	r1, r6
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	f000 fbb1 	bl	b54b2 <_ZN6StringC1EOS_>
   b4d50:	7c33      	ldrb	r3, [r6, #16]
   b4d52:	7423      	strb	r3, [r4, #16]
   b4d54:	4630      	mov	r0, r6
   b4d56:	f000 fb43 	bl	b53e0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4d5a:	3e14      	subs	r6, #20
   b4d5c:	3c14      	subs	r4, #20
   b4d5e:	e7f0      	b.n	b4d42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4d60:	d00e      	beq.n	b4d80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4d62:	42b5      	cmp	r5, r6
   b4d64:	d00c      	beq.n	b4d80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4d66:	b12c      	cbz	r4, b4d74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4d68:	4629      	mov	r1, r5
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	f000 fba1 	bl	b54b2 <_ZN6StringC1EOS_>
   b4d70:	7c2b      	ldrb	r3, [r5, #16]
   b4d72:	7423      	strb	r3, [r4, #16]
   b4d74:	4628      	mov	r0, r5
   b4d76:	f000 fb33 	bl	b53e0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4d7a:	3514      	adds	r5, #20
   b4d7c:	3414      	adds	r4, #20
   b4d7e:	e7f0      	b.n	b4d62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4d86:	2300      	movs	r3, #0
   b4d88:	e9c0 3300 	strd	r3, r3, [r0]
   b4d8c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4d8e:	684f      	ldr	r7, [r1, #4]
   b4d90:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4d92:	4604      	mov	r4, r0
   b4d94:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4d96:	dd23      	ble.n	b4de0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4d98:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4d9c:	fb08 f007 	mul.w	r0, r8, r7
   b4da0:	f000 fa6c 	bl	b527c <malloc>
            if (!d) {
   b4da4:	4605      	mov	r5, r0
   b4da6:	b1d8      	cbz	r0, b4de0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4da8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4dac:	fb08 1202 	mla	r2, r8, r2, r1
   b4db0:	f7ff ffb9 	bl	b4d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4db4:	6820      	ldr	r0, [r4, #0]
   b4db6:	f000 fa69 	bl	b528c <free>
        data_ = d;
   b4dba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4dbc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4dbe:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4dc2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4dc6:	45b8      	cmp	r8, r7
   b4dc8:	d008      	beq.n	b4ddc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4dca:	4639      	mov	r1, r7
   b4dcc:	4628      	mov	r0, r5
   b4dce:	f000 fb8a 	bl	b54e6 <_ZN6StringC1ERKS_>
   b4dd2:	7c3b      	ldrb	r3, [r7, #16]
   b4dd4:	742b      	strb	r3, [r5, #16]
   b4dd6:	3714      	adds	r7, #20
   b4dd8:	3514      	adds	r5, #20
   b4dda:	e7f4      	b.n	b4dc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4ddc:	6873      	ldr	r3, [r6, #4]
   b4dde:	6063      	str	r3, [r4, #4]
}
   b4de0:	4620      	mov	r0, r4
   b4de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4de8 <_GLOBAL__sub_I_SystemMode>:
   b4de8:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4dea:	4b24      	ldr	r3, [pc, #144]	; (b4e7c <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
   b4dec:	4a24      	ldr	r2, [pc, #144]	; (b4e80 <_GLOBAL__sub_I_SystemMode+0x98>)
   b4dee:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4df0:	2400      	movs	r4, #0
   b4df2:	b08c      	sub	sp, #48	; 0x30
   b4df4:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4df8:	2002      	movs	r0, #2
   b4dfa:	f000 f99b 	bl	b5134 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4dfe:	4621      	mov	r1, r4
   b4e00:	2001      	movs	r0, #1
   b4e02:	f000 f9a7 	bl	b5154 <system_thread_set_state>
        capacity_(0) {
   b4e06:	e9cd 4400 	strd	r4, r4, [sp]
   b4e0a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4e0c:	f001 fd66 	bl	b68dc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4e10:	4c1c      	ldr	r4, [pc, #112]	; (b4e84 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4e12:	4605      	mov	r5, r0
   b4e14:	4669      	mov	r1, sp
   b4e16:	a803      	add	r0, sp, #12
   b4e18:	f7ff ffb3 	bl	b4d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e1c:	4626      	mov	r6, r4

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   b4e1e:	a903      	add	r1, sp, #12
   b4e20:	a806      	add	r0, sp, #24
   b4e22:	f7ff ffae 	bl	b4d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4e26:	4b18      	ldr	r3, [pc, #96]	; (b4e88 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4e28:	f846 3b04 	str.w	r3, [r6], #4
   b4e2c:	a906      	add	r1, sp, #24
   b4e2e:	a809      	add	r0, sp, #36	; 0x24
   b4e30:	f7ff ffa7 	bl	b4d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e34:	aa09      	add	r2, sp, #36	; 0x24
   b4e36:	211e      	movs	r1, #30
   b4e38:	4630      	mov	r0, r6
   b4e3a:	f001 f8af 	bl	b5f9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4e3e:	a809      	add	r0, sp, #36	; 0x24
   b4e40:	f7ff ff5e 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4e44:	a806      	add	r0, sp, #24
   b4e46:	f7ff ff5b 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e4a:	4b10      	ldr	r3, [pc, #64]	; (b4e8c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4e4c:	6023      	str	r3, [r4, #0]
   b4e4e:	6225      	str	r5, [r4, #32]
   b4e50:	a803      	add	r0, sp, #12
   b4e52:	f7ff ff55 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e56:	4b0e      	ldr	r3, [pc, #56]	; (b4e90 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4e58:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4e5a:	f001 fd3f 	bl	b68dc <_Z16_fetch_usbserialv>
   b4e5e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e62:	f001 fd2b 	bl	b68bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4e66:	f000 fd69 	bl	b593c <_ZN5spark10LogManager8instanceEv>
   b4e6a:	4621      	mov	r1, r4
   b4e6c:	f000 ff6c 	bl	b5d48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b4e70:	4668      	mov	r0, sp
   b4e72:	f7ff ff45 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e76:	b00c      	add	sp, #48	; 0x30
   b4e78:	bd70      	pop	{r4, r5, r6, pc}
   b4e7a:	bf00      	nop
   b4e7c:	2003e638 	.word	0x2003e638
   b4e80:	ffff0000 	.word	0xffff0000
   b4e84:	2003e644 	.word	0x2003e644
   b4e88:	000b759c 	.word	0x000b759c
   b4e8c:	000b769c 	.word	0x000b769c
   b4e90:	000b75b4 	.word	0x000b75b4

000b4e94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <netdb_freeaddrinfo+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	689b      	ldr	r3, [r3, #8]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030268 	.word	0x00030268

000b4ea4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <netdb_getaddrinfo+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	68db      	ldr	r3, [r3, #12]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030268 	.word	0x00030268

000b4eb4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_pin_validate_function+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	685b      	ldr	r3, [r3, #4]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	0003022c 	.word	0x0003022c

000b4ec4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_adc_read+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003022c 	.word	0x0003022c

000b4ed4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <HAL_RNG_GetRandomNumber+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	685b      	ldr	r3, [r3, #4]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030218 	.word	0x00030218

000b4ee4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <HAL_Delay_Microseconds+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	68db      	ldr	r3, [r3, #12]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030218 	.word	0x00030218

000b4ef4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	695b      	ldr	r3, [r3, #20]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030218 	.word	0x00030218

000b4f04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <os_mutex_recursive_create+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030248 	.word	0x00030248

000b4f14 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <os_mutex_recursive_destroy+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030248 	.word	0x00030248

000b4f24 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <os_mutex_recursive_lock+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030248 	.word	0x00030248

000b4f34 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <os_mutex_recursive_unlock+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030248 	.word	0x00030248

000b4f44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <inet_inet_ntop+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	695b      	ldr	r3, [r3, #20]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030264 	.word	0x00030264

000b4f54 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_usart_end+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	689b      	ldr	r3, [r3, #8]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003023c 	.word	0x0003023c

000b4f64 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_usart_write+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	68db      	ldr	r3, [r3, #12]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003023c 	.word	0x0003023c

000b4f74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <hal_usart_available+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	691b      	ldr	r3, [r3, #16]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003023c 	.word	0x0003023c

000b4f84 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <hal_usart_read+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	695b      	ldr	r3, [r3, #20]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	0003023c 	.word	0x0003023c

000b4f94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <hal_usart_peek+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	699b      	ldr	r3, [r3, #24]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	0003023c 	.word	0x0003023c

000b4fa4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_usart_flush+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	69db      	ldr	r3, [r3, #28]
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	0003023c 	.word	0x0003023c

000b4fb4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_usart_is_enabled+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6a1b      	ldr	r3, [r3, #32]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	0003023c 	.word	0x0003023c

000b4fc4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_usart_available_data_for_write+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	0003023c 	.word	0x0003023c

000b4fd4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_usart_begin_config+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	0003023c 	.word	0x0003023c

000b4fe4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_usart_init_ex+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	0003023c 	.word	0x0003023c

000b4ff4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_i2c_write+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6a1b      	ldr	r3, [r3, #32]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030228 	.word	0x00030228

000b5004 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_i2c_available+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030228 	.word	0x00030228

000b5014 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_i2c_read+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	00030228 	.word	0x00030228

000b5024 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <hal_i2c_peek+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	00030228 	.word	0x00030228

000b5034 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <hal_i2c_flush+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030228 	.word	0x00030228

000b5044 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <hal_i2c_is_enabled+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	00030228 	.word	0x00030228

000b5054 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <hal_i2c_init+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	00030228 	.word	0x00030228

000b5064 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <hal_spi_init+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	69db      	ldr	r3, [r3, #28]
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030230 	.word	0x00030230

000b5074 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <hal_spi_is_enabled+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	6a1b      	ldr	r3, [r3, #32]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030230 	.word	0x00030230

000b5084 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <HAL_USB_USART_Init+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	681b      	ldr	r3, [r3, #0]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	0003024c 	.word	0x0003024c

000b5094 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <HAL_USB_USART_Begin+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	685b      	ldr	r3, [r3, #4]
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	0003024c 	.word	0x0003024c

000b50a4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <HAL_USB_USART_End+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	689b      	ldr	r3, [r3, #8]
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	0003024c 	.word	0x0003024c

000b50b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <HAL_USB_USART_Available_Data+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	691b      	ldr	r3, [r3, #16]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	0003024c 	.word	0x0003024c

000b50c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	695b      	ldr	r3, [r3, #20]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	0003024c 	.word	0x0003024c

000b50d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <HAL_USB_USART_Receive_Data+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	699b      	ldr	r3, [r3, #24]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	0003024c 	.word	0x0003024c

000b50e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <HAL_USB_USART_Send_Data+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	69db      	ldr	r3, [r3, #28]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	0003024c 	.word	0x0003024c

000b50f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <HAL_USB_USART_Flush_Data+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6a1b      	ldr	r3, [r3, #32]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	0003024c 	.word	0x0003024c

000b5104 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <panic_+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030260 	.word	0x00030260

000b5114 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <log_level_name+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030260 	.word	0x00030260

000b5124 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <log_set_callbacks+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030260 	.word	0x00030260

000b5134 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <set_system_mode+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	685b      	ldr	r3, [r3, #4]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030220 	.word	0x00030220

000b5144 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <system_delay_ms+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	695b      	ldr	r3, [r3, #20]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030220 	.word	0x00030220

000b5154 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <system_thread_set_state+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030220 	.word	0x00030220

000b5164 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b03      	ldr	r3, [pc, #12]	; (b5174 <system_ctrl_set_app_request_handler+0x10>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b516e:	9301      	str	r3, [sp, #4]
   b5170:	bd08      	pop	{r3, pc}
   b5172:	0000      	.short	0x0000
   b5174:	00030220 	.word	0x00030220

000b5178 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b03      	ldr	r3, [pc, #12]	; (b5188 <system_ctrl_set_result+0x10>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5182:	9301      	str	r3, [sp, #4]
   b5184:	bd08      	pop	{r3, pc}
   b5186:	0000      	.short	0x0000
   b5188:	00030220 	.word	0x00030220

000b518c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b518c:	b508      	push	{r3, lr}
   b518e:	4b02      	ldr	r3, [pc, #8]	; (b5198 <network_connect+0xc>)
   b5190:	681b      	ldr	r3, [r3, #0]
   b5192:	685b      	ldr	r3, [r3, #4]
   b5194:	9301      	str	r3, [sp, #4]
   b5196:	bd08      	pop	{r3, pc}
   b5198:	00030240 	.word	0x00030240

000b519c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <network_connecting+0xc>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	689b      	ldr	r3, [r3, #8]
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	bd08      	pop	{r3, pc}
   b51a8:	00030240 	.word	0x00030240

000b51ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <network_disconnect+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	68db      	ldr	r3, [r3, #12]
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	00030240 	.word	0x00030240

000b51bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <network_ready+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	691b      	ldr	r3, [r3, #16]
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	00030240 	.word	0x00030240

000b51cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <network_on+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	695b      	ldr	r3, [r3, #20]
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	00030240 	.word	0x00030240

000b51dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <network_off+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	699b      	ldr	r3, [r3, #24]
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	00030240 	.word	0x00030240

000b51ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <network_listen+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	69db      	ldr	r3, [r3, #28]
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	00030240 	.word	0x00030240

000b51fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <network_listening+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	6a1b      	ldr	r3, [r3, #32]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	00030240 	.word	0x00030240

000b520c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <network_set_listen_timeout+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	00030240 	.word	0x00030240

000b521c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b02      	ldr	r3, [pc, #8]	; (b5228 <network_get_listen_timeout+0xc>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5224:	9301      	str	r3, [sp, #4]
   b5226:	bd08      	pop	{r3, pc}
   b5228:	00030240 	.word	0x00030240

000b522c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b02      	ldr	r3, [pc, #8]	; (b5238 <network_is_on+0xc>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5234:	9301      	str	r3, [sp, #4]
   b5236:	bd08      	pop	{r3, pc}
   b5238:	00030240 	.word	0x00030240

000b523c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <network_is_off+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	00030240 	.word	0x00030240

000b524c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <network_prefer+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030240 	.word	0x00030240

000b525c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <network_is_preferred+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030240 	.word	0x00030240

000b526c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	00030244 	.word	0x00030244

000b527c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <malloc+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	681b      	ldr	r3, [r3, #0]
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	0003021c 	.word	0x0003021c

000b528c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <free+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	685b      	ldr	r3, [r3, #4]
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	0003021c 	.word	0x0003021c

000b529c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <realloc+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	689b      	ldr	r3, [r3, #8]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	0003021c 	.word	0x0003021c

000b52ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <vsnprintf+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	0003021c 	.word	0x0003021c

000b52bc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <__errno+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	0003021c 	.word	0x0003021c

000b52cc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <__assert_func+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	0003021c 	.word	0x0003021c

000b52dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <newlib_impure_ptr_callback+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	0003021c 	.word	0x0003021c

000b52ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b52ec:	2200      	movs	r2, #0
   b52ee:	6840      	ldr	r0, [r0, #4]
   b52f0:	4611      	mov	r1, r2
   b52f2:	f7ff bf83 	b.w	b51fc <network_listening>

000b52f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b52f6:	2200      	movs	r2, #0
   b52f8:	6840      	ldr	r0, [r0, #4]
   b52fa:	4611      	mov	r1, r2
   b52fc:	f7ff bf8e 	b.w	b521c <network_get_listen_timeout>

000b5300 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5300:	6840      	ldr	r0, [r0, #4]
   b5302:	2200      	movs	r2, #0
   b5304:	f7ff bf82 	b.w	b520c <network_set_listen_timeout>

000b5308 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5308:	6840      	ldr	r0, [r0, #4]
   b530a:	2200      	movs	r2, #0
   b530c:	f081 0101 	eor.w	r1, r1, #1
   b5310:	f7ff bf6c 	b.w	b51ec <network_listen>

000b5314 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5314:	2300      	movs	r3, #0
   b5316:	6840      	ldr	r0, [r0, #4]
   b5318:	461a      	mov	r2, r3
   b531a:	4619      	mov	r1, r3
   b531c:	f7ff bf5e 	b.w	b51dc <network_off>

000b5320 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5320:	2300      	movs	r3, #0
   b5322:	6840      	ldr	r0, [r0, #4]
   b5324:	461a      	mov	r2, r3
   b5326:	4619      	mov	r1, r3
   b5328:	f7ff bf50 	b.w	b51cc <network_on>

000b532c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b532c:	2200      	movs	r2, #0
   b532e:	6840      	ldr	r0, [r0, #4]
   b5330:	4611      	mov	r1, r2
   b5332:	f7ff bf43 	b.w	b51bc <network_ready>

000b5336 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5336:	2200      	movs	r2, #0
   b5338:	6840      	ldr	r0, [r0, #4]
   b533a:	4611      	mov	r1, r2
   b533c:	f7ff bf2e 	b.w	b519c <network_connecting>

000b5340 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5340:	6840      	ldr	r0, [r0, #4]
   b5342:	2200      	movs	r2, #0
   b5344:	2102      	movs	r1, #2
   b5346:	f7ff bf31 	b.w	b51ac <network_disconnect>

000b534a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b534a:	2300      	movs	r3, #0
   b534c:	6840      	ldr	r0, [r0, #4]
   b534e:	461a      	mov	r2, r3
   b5350:	f7ff bf1c 	b.w	b518c <network_connect>

000b5354 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5354:	4b02      	ldr	r3, [pc, #8]	; (b5360 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5356:	2203      	movs	r2, #3
   b5358:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b535a:	4a02      	ldr	r2, [pc, #8]	; (b5364 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b535c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b535e:	4770      	bx	lr
   b5360:	2003e668 	.word	0x2003e668
   b5364:	000b75cc 	.word	0x000b75cc

000b5368 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5368:	680b      	ldr	r3, [r1, #0]
   b536a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b536c:	684b      	ldr	r3, [r1, #4]
   b536e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5370:	b113      	cbz	r3, b5378 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5372:	685a      	ldr	r2, [r3, #4]
   b5374:	3201      	adds	r2, #1
   b5376:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5378:	4770      	bx	lr

000b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b537a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b537c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b537e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5380:	b17c      	cbz	r4, b53a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5382:	6863      	ldr	r3, [r4, #4]
   b5384:	3b01      	subs	r3, #1
   b5386:	6063      	str	r3, [r4, #4]
   b5388:	b95b      	cbnz	r3, b53a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b538a:	6823      	ldr	r3, [r4, #0]
   b538c:	4620      	mov	r0, r4
   b538e:	689b      	ldr	r3, [r3, #8]
   b5390:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5392:	68a3      	ldr	r3, [r4, #8]
   b5394:	3b01      	subs	r3, #1
   b5396:	60a3      	str	r3, [r4, #8]
   b5398:	b91b      	cbnz	r3, b53a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b539a:	6823      	ldr	r3, [r4, #0]
   b539c:	4620      	mov	r0, r4
   b539e:	68db      	ldr	r3, [r3, #12]
   b53a0:	4798      	blx	r3
      }
   b53a2:	4628      	mov	r0, r5
   b53a4:	bd38      	pop	{r3, r4, r5, pc}

000b53a6 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b53a6:	b510      	push	{r4, lr}
   b53a8:	4604      	mov	r4, r0
   b53aa:	4608      	mov	r0, r1
{
    _spi = spi;
   b53ac:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b53ae:	f7ff fe59 	bl	b5064 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b53b2:	2300      	movs	r3, #0
   b53b4:	6063      	str	r3, [r4, #4]
}
   b53b6:	4620      	mov	r0, r4
   b53b8:	bd10      	pop	{r4, pc}
	...

000b53bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b53bc:	4b05      	ldr	r3, [pc, #20]	; (b53d4 <_GLOBAL__sub_I_System+0x18>)
   b53be:	2202      	movs	r2, #2
   b53c0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b53c2:	4b05      	ldr	r3, [pc, #20]	; (b53d8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b53c4:	4a05      	ldr	r2, [pc, #20]	; (b53dc <_GLOBAL__sub_I_System+0x20>)
   b53c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b53c8:	2000      	movs	r0, #0
   b53ca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b53ce:	f7ff beb1 	b.w	b5134 <set_system_mode>
   b53d2:	bf00      	nop
   b53d4:	2003e67c 	.word	0x2003e67c
   b53d8:	2003e670 	.word	0x2003e670
   b53dc:	ffff0000 	.word	0xffff0000

000b53e0 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b53e0:	b510      	push	{r4, lr}
   b53e2:	4604      	mov	r4, r0
{
    free(buffer);
   b53e4:	6800      	ldr	r0, [r0, #0]
   b53e6:	f7ff ff51 	bl	b528c <free>
}
   b53ea:	4620      	mov	r0, r4
   b53ec:	bd10      	pop	{r4, pc}

000b53ee <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b53ee:	b510      	push	{r4, lr}
   b53f0:	4604      	mov	r4, r0
    if (buffer) {
   b53f2:	6800      	ldr	r0, [r0, #0]
   b53f4:	b108      	cbz	r0, b53fa <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b53f6:	f7ff ff49 	bl	b528c <free>
    }
    buffer = nullptr;
   b53fa:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b53fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b5400:	6023      	str	r3, [r4, #0]
}
   b5402:	bd10      	pop	{r4, pc}

000b5404 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5404:	b538      	push	{r3, r4, r5, lr}
   b5406:	4604      	mov	r4, r0
   b5408:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b540a:	6800      	ldr	r0, [r0, #0]
   b540c:	3101      	adds	r1, #1
   b540e:	f7ff ff45 	bl	b529c <realloc>
    if (newbuffer) {
   b5412:	b110      	cbz	r0, b541a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b5414:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b5418:	2001      	movs	r0, #1
    }
    return 0;
}
   b541a:	bd38      	pop	{r3, r4, r5, pc}

000b541c <_ZN6String7reserveEj>:
{
   b541c:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b541e:	6803      	ldr	r3, [r0, #0]
{
   b5420:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b5422:	b123      	cbz	r3, b542e <_ZN6String7reserveEj+0x12>
   b5424:	6843      	ldr	r3, [r0, #4]
   b5426:	428b      	cmp	r3, r1
   b5428:	d301      	bcc.n	b542e <_ZN6String7reserveEj+0x12>
   b542a:	2001      	movs	r0, #1
}
   b542c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b542e:	4620      	mov	r0, r4
   b5430:	f7ff ffe8 	bl	b5404 <_ZN6String12changeBufferEj>
   b5434:	2800      	cmp	r0, #0
   b5436:	d0f9      	beq.n	b542c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b5438:	68a3      	ldr	r3, [r4, #8]
   b543a:	2b00      	cmp	r3, #0
   b543c:	d1f5      	bne.n	b542a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b543e:	6822      	ldr	r2, [r4, #0]
   b5440:	7013      	strb	r3, [r2, #0]
   b5442:	e7f2      	b.n	b542a <_ZN6String7reserveEj+0xe>

000b5444 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5444:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5446:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b5448:	4611      	mov	r1, r2
   b544a:	9201      	str	r2, [sp, #4]
{
   b544c:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b544e:	f7ff ffe5 	bl	b541c <_ZN6String7reserveEj>
   b5452:	9a01      	ldr	r2, [sp, #4]
   b5454:	b928      	cbnz	r0, b5462 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b5456:	4620      	mov	r0, r4
   b5458:	f7ff ffc9 	bl	b53ee <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b545c:	4620      	mov	r0, r4
   b545e:	b003      	add	sp, #12
   b5460:	bd30      	pop	{r4, r5, pc}
    len = length;
   b5462:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b5464:	4629      	mov	r1, r5
   b5466:	6820      	ldr	r0, [r4, #0]
   b5468:	f001 fee0 	bl	b722c <memcpy>
    buffer[len] = 0;
   b546c:	6822      	ldr	r2, [r4, #0]
   b546e:	68a3      	ldr	r3, [r4, #8]
   b5470:	2100      	movs	r1, #0
   b5472:	54d1      	strb	r1, [r2, r3]
    return *this;
   b5474:	e7f2      	b.n	b545c <_ZN6String4copyEPKcj+0x18>

000b5476 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b5476:	b538      	push	{r3, r4, r5, lr}
   b5478:	4605      	mov	r5, r0
    if (buffer) {
   b547a:	6800      	ldr	r0, [r0, #0]
{
   b547c:	460c      	mov	r4, r1
    if (buffer) {
   b547e:	b170      	cbz	r0, b549e <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b5480:	686a      	ldr	r2, [r5, #4]
   b5482:	688b      	ldr	r3, [r1, #8]
   b5484:	429a      	cmp	r2, r3
   b5486:	d308      	bcc.n	b549a <_ZN6String4moveERS_+0x24>
   b5488:	6809      	ldr	r1, [r1, #0]
   b548a:	b131      	cbz	r1, b549a <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b548c:	f001 ff43 	bl	b7316 <strcpy>
            len = rhs.len;
   b5490:	68a3      	ldr	r3, [r4, #8]
   b5492:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b5494:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b5496:	60a3      	str	r3, [r4, #8]
}
   b5498:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b549a:	f7ff fef7 	bl	b528c <free>
    buffer = rhs.buffer;
   b549e:	6823      	ldr	r3, [r4, #0]
   b54a0:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b54a2:	6863      	ldr	r3, [r4, #4]
   b54a4:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b54a6:	68a3      	ldr	r3, [r4, #8]
   b54a8:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b54aa:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b54ac:	e9c4 3300 	strd	r3, r3, [r4]
   b54b0:	e7f1      	b.n	b5496 <_ZN6String4moveERS_+0x20>

000b54b2 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b54b2:	b510      	push	{r4, lr}
    buffer = nullptr;
   b54b4:	2300      	movs	r3, #0
    capacity_ = 0;
   b54b6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b54ba:	4604      	mov	r4, r0
    len = 0;
   b54bc:	6083      	str	r3, [r0, #8]
    flags = 0;
   b54be:	7303      	strb	r3, [r0, #12]
    move(rval);
   b54c0:	f7ff ffd9 	bl	b5476 <_ZN6String4moveERS_>
}
   b54c4:	4620      	mov	r0, r4
   b54c6:	bd10      	pop	{r4, pc}

000b54c8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b54c8:	4288      	cmp	r0, r1
{
   b54ca:	b510      	push	{r4, lr}
   b54cc:	4604      	mov	r4, r0
    if (this == &rhs) {
   b54ce:	d005      	beq.n	b54dc <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b54d0:	680b      	ldr	r3, [r1, #0]
   b54d2:	b12b      	cbz	r3, b54e0 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b54d4:	688a      	ldr	r2, [r1, #8]
   b54d6:	4619      	mov	r1, r3
   b54d8:	f7ff ffb4 	bl	b5444 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b54dc:	4620      	mov	r0, r4
   b54de:	bd10      	pop	{r4, pc}
        invalidate();
   b54e0:	f7ff ff85 	bl	b53ee <_ZN6String10invalidateEv>
   b54e4:	e7fa      	b.n	b54dc <_ZN6StringaSERKS_+0x14>

000b54e6 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b54e6:	b510      	push	{r4, lr}
    buffer = nullptr;
   b54e8:	2300      	movs	r3, #0
String::String(const String &value)
   b54ea:	4604      	mov	r4, r0
    capacity_ = 0;
   b54ec:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b54f0:	6083      	str	r3, [r0, #8]
    flags = 0;
   b54f2:	7303      	strb	r3, [r0, #12]
    *this = value;
   b54f4:	f7ff ffe8 	bl	b54c8 <_ZN6StringaSERKS_>
}
   b54f8:	4620      	mov	r0, r4
   b54fa:	bd10      	pop	{r4, pc}

000b54fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b54fc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b54fe:	6843      	ldr	r3, [r0, #4]
   b5500:	3b01      	subs	r3, #1
    {
   b5502:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5504:	6043      	str	r3, [r0, #4]
   b5506:	b963      	cbnz	r3, b5522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5508:	6803      	ldr	r3, [r0, #0]
   b550a:	689b      	ldr	r3, [r3, #8]
   b550c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b550e:	68a3      	ldr	r3, [r4, #8]
   b5510:	3b01      	subs	r3, #1
   b5512:	60a3      	str	r3, [r4, #8]
   b5514:	b92b      	cbnz	r3, b5522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5516:	6823      	ldr	r3, [r4, #0]
   b5518:	4620      	mov	r0, r4
   b551a:	68db      	ldr	r3, [r3, #12]
    }
   b551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5520:	4718      	bx	r3
    }
   b5522:	bd10      	pop	{r4, pc}

000b5524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5524:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5526:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b552a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b552c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5530:	42ae      	cmp	r6, r5
   b5532:	d004      	beq.n	b553e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5534:	4628      	mov	r0, r5
   b5536:	f7ff ff53 	bl	b53e0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b553a:	3510      	adds	r5, #16
   b553c:	e7f8      	b.n	b5530 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b553e:	6820      	ldr	r0, [r4, #0]
   b5540:	f7ff fea4 	bl	b528c <free>
    AllocatorT::free(data_);
}
   b5544:	4620      	mov	r0, r4
   b5546:	bd70      	pop	{r4, r5, r6, pc}

000b5548 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5548:	4802      	ldr	r0, [pc, #8]	; (b5554 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b554a:	2300      	movs	r3, #0
   b554c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b554e:	f7ff bcd9 	b.w	b4f04 <os_mutex_recursive_create>
   b5552:	bf00      	nop
   b5554:	2003e680 	.word	0x2003e680

000b5558 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b5558:	b510      	push	{r4, lr}
   b555a:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b555c:	6880      	ldr	r0, [r0, #8]
   b555e:	6803      	ldr	r3, [r0, #0]
   b5560:	68db      	ldr	r3, [r3, #12]
   b5562:	4798      	blx	r3
   b5564:	68e3      	ldr	r3, [r4, #12]
   b5566:	4418      	add	r0, r3
   b5568:	60e0      	str	r0, [r4, #12]
}
   b556a:	bd10      	pop	{r4, pc}

000b556c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b556e:	4606      	mov	r6, r0
   b5570:	460d      	mov	r5, r1
  size_t n = 0;
   b5572:	188f      	adds	r7, r1, r2
   b5574:	2400      	movs	r4, #0
  while (size--) {
   b5576:	42bd      	cmp	r5, r7
   b5578:	d00c      	beq.n	b5594 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b557a:	6833      	ldr	r3, [r6, #0]
   b557c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5580:	689b      	ldr	r3, [r3, #8]
   b5582:	4630      	mov	r0, r6
   b5584:	4798      	blx	r3
     if (chunk>=0)
   b5586:	1e03      	subs	r3, r0, #0
   b5588:	db01      	blt.n	b558e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b558a:	441c      	add	r4, r3
  while (size--) {
   b558c:	e7f3      	b.n	b5576 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b558e:	2c00      	cmp	r4, #0
   b5590:	bf08      	it	eq
   b5592:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5594:	4620      	mov	r0, r4
   b5596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5598 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5598:	4770      	bx	lr

000b559a <_ZN5spark16JSONStreamWriterD0Ev>:
   b559a:	b510      	push	{r4, lr}
   b559c:	2110      	movs	r1, #16
   b559e:	4604      	mov	r4, r0
   b55a0:	f7ff fa93 	bl	b4aca <_ZdlPvj>
   b55a4:	4620      	mov	r0, r4
   b55a6:	bd10      	pop	{r4, pc}

000b55a8 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b55a8:	b513      	push	{r0, r1, r4, lr}
   b55aa:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b55ac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b55ae:	b159      	cbz	r1, b55c8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b55b0:	9101      	str	r1, [sp, #4]
   b55b2:	f7ff fa43 	bl	b4a3c <strlen>
   b55b6:	6823      	ldr	r3, [r4, #0]
   b55b8:	9901      	ldr	r1, [sp, #4]
   b55ba:	68db      	ldr	r3, [r3, #12]
   b55bc:	4602      	mov	r2, r0
   b55be:	4620      	mov	r0, r4
    }
   b55c0:	b002      	add	sp, #8
   b55c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b55c6:	4718      	bx	r3
    }
   b55c8:	b002      	add	sp, #8
   b55ca:	bd10      	pop	{r4, pc}

000b55cc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b55cc:	b508      	push	{r3, lr}
  return write(str);
   b55ce:	f7ff ffeb 	bl	b55a8 <_ZN5Print5writeEPKc>
}
   b55d2:	bd08      	pop	{r3, pc}

000b55d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b55d4:	6803      	ldr	r3, [r0, #0]
   b55d6:	689b      	ldr	r3, [r3, #8]
   b55d8:	4718      	bx	r3

000b55da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b55da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b55dc:	210d      	movs	r1, #13
{
   b55de:	4605      	mov	r5, r0
  size_t n = print('\r');
   b55e0:	f7ff fff8 	bl	b55d4 <_ZN5Print5printEc>
  n += print('\n');
   b55e4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b55e6:	4604      	mov	r4, r0
  n += print('\n');
   b55e8:	4628      	mov	r0, r5
   b55ea:	f7ff fff3 	bl	b55d4 <_ZN5Print5printEc>
  return n;
}
   b55ee:	4420      	add	r0, r4
   b55f0:	bd38      	pop	{r3, r4, r5, pc}

000b55f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b55f2:	b530      	push	{r4, r5, lr}
   b55f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b55f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b55f8:	2a01      	cmp	r2, #1
  *str = '\0';
   b55fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b55fe:	bf98      	it	ls
   b5600:	220a      	movls	r2, #10
   b5602:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5604:	460d      	mov	r5, r1
   b5606:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b560a:	fb01 5312 	mls	r3, r1, r2, r5
   b560e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5612:	2b09      	cmp	r3, #9
   b5614:	bf94      	ite	ls
   b5616:	3330      	addls	r3, #48	; 0x30
   b5618:	3337      	addhi	r3, #55	; 0x37
   b561a:	b2db      	uxtb	r3, r3
  } while(n);
   b561c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b561e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5622:	d9ef      	bls.n	b5604 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5624:	4621      	mov	r1, r4
   b5626:	f7ff ffbf 	bl	b55a8 <_ZN5Print5writeEPKc>
}
   b562a:	b00b      	add	sp, #44	; 0x2c
   b562c:	bd30      	pop	{r4, r5, pc}

000b562e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b562e:	b510      	push	{r4, lr}
   b5630:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5632:	f7ff fc5f 	bl	b4ef4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5636:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5638:	6823      	ldr	r3, [r4, #0]
   b563a:	4620      	mov	r0, r4
   b563c:	695b      	ldr	r3, [r3, #20]
   b563e:	4798      	blx	r3
    if (c >= 0) return c;
   b5640:	2800      	cmp	r0, #0
   b5642:	da08      	bge.n	b5656 <_ZN6Stream9timedReadEv+0x28>
   b5644:	f7ff fc56 	bl	b4ef4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5648:	68e3      	ldr	r3, [r4, #12]
   b564a:	1ac0      	subs	r0, r0, r3
   b564c:	68a3      	ldr	r3, [r4, #8]
   b564e:	4298      	cmp	r0, r3
   b5650:	d3f2      	bcc.n	b5638 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5652:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5656:	bd10      	pop	{r4, pc}

000b5658 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b565c:	4607      	mov	r7, r0
   b565e:	460c      	mov	r4, r1
   b5660:	188e      	adds	r6, r1, r2
   b5662:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5664:	42b5      	cmp	r5, r6
   b5666:	eba5 0804 	sub.w	r8, r5, r4
   b566a:	d007      	beq.n	b567c <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b566c:	4638      	mov	r0, r7
   b566e:	f7ff ffde 	bl	b562e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b5672:	1e03      	subs	r3, r0, #0
   b5674:	db02      	blt.n	b567c <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b5676:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b567a:	e7f3      	b.n	b5664 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b567c:	4640      	mov	r0, r8
   b567e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5682 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5682:	4770      	bx	lr

000b5684 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5684:	4608      	mov	r0, r1
   b5686:	b111      	cbz	r1, b568e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5688:	680b      	ldr	r3, [r1, #0]
   b568a:	685b      	ldr	r3, [r3, #4]
   b568c:	4718      	bx	r3
}
   b568e:	4770      	bx	lr

000b5690 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5690:	4770      	bx	lr

000b5692 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5692:	4770      	bx	lr

000b5694 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5694:	4770      	bx	lr

000b5696 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5696:	b538      	push	{r3, r4, r5, lr}
   b5698:	4604      	mov	r4, r0
   b569a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b569c:	6800      	ldr	r0, [r0, #0]
   b569e:	212e      	movs	r1, #46	; 0x2e
   b56a0:	f001 fe2f 	bl	b7302 <strchrnul>
    size = s - category;
   b56a4:	6823      	ldr	r3, [r4, #0]
   b56a6:	1ac3      	subs	r3, r0, r3
   b56a8:	602b      	str	r3, [r5, #0]
    if (size) {
   b56aa:	b123      	cbz	r3, b56b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b56ac:	7803      	ldrb	r3, [r0, #0]
   b56ae:	b103      	cbz	r3, b56b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b56b0:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b56b2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b56b4:	6020      	str	r0, [r4, #0]
}
   b56b6:	4618      	mov	r0, r3
   b56b8:	bd38      	pop	{r3, r4, r5, pc}

000b56ba <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b56ba:	b510      	push	{r4, lr}
   b56bc:	2104      	movs	r1, #4
   b56be:	4604      	mov	r4, r0
   b56c0:	f7ff fa03 	bl	b4aca <_ZdlPvj>
   b56c4:	4620      	mov	r0, r4
   b56c6:	bd10      	pop	{r4, pc}

000b56c8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b56c8:	b510      	push	{r4, lr}
   b56ca:	2104      	movs	r1, #4
   b56cc:	4604      	mov	r4, r0
   b56ce:	f7ff f9fc 	bl	b4aca <_ZdlPvj>
   b56d2:	4620      	mov	r0, r4
   b56d4:	bd10      	pop	{r4, pc}

000b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b56d6:	f7ff bc25 	b.w	b4f24 <os_mutex_recursive_lock>

000b56da <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b56da:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b56dc:	f7ff f9a4 	bl	b4a28 <strcmp>
}
   b56e0:	fab0 f080 	clz	r0, r0
   b56e4:	0940      	lsrs	r0, r0, #5
   b56e6:	bd08      	pop	{r3, pc}

000b56e8 <__tcf_1>:
   b56e8:	4770      	bx	lr

000b56ea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b56ea:	b510      	push	{r4, lr}
   b56ec:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b56ee:	f001 f8f5 	bl	b68dc <_Z16_fetch_usbserialv>
   b56f2:	4284      	cmp	r4, r0
   b56f4:	d010      	beq.n	b5718 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b56f6:	f001 fd23 	bl	b7140 <_Z22__fetch_global_Serial1v>
   b56fa:	4284      	cmp	r4, r0
   b56fc:	d105      	bne.n	b570a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b56fe:	f001 fd1f 	bl	b7140 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5706:	f001 b9b4 	b.w	b6a72 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b570a:	b12c      	cbz	r4, b5718 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b570c:	6823      	ldr	r3, [r4, #0]
   b570e:	4620      	mov	r0, r4
   b5710:	685b      	ldr	r3, [r3, #4]
}
   b5712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5716:	4718      	bx	r3
   b5718:	bd10      	pop	{r4, pc}

000b571a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b571a:	b513      	push	{r0, r1, r4, lr}
   b571c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b571e:	4608      	mov	r0, r1
   b5720:	9101      	str	r1, [sp, #4]
   b5722:	f7ff f98b 	bl	b4a3c <strlen>
   b5726:	9901      	ldr	r1, [sp, #4]
   b5728:	4602      	mov	r2, r0
   b572a:	4620      	mov	r0, r4
}
   b572c:	b002      	add	sp, #8
   b572e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5732:	f001 bc85 	b.w	b7040 <_ZN5spark10JSONWriter5valueEPKcj>

000b5736 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5736:	b513      	push	{r0, r1, r4, lr}
   b5738:	4604      	mov	r4, r0
    write(str, strlen(str));
   b573a:	4608      	mov	r0, r1
   b573c:	9101      	str	r1, [sp, #4]
   b573e:	f7ff f97d 	bl	b4a3c <strlen>
   b5742:	6823      	ldr	r3, [r4, #0]
   b5744:	9901      	ldr	r1, [sp, #4]
   b5746:	68db      	ldr	r3, [r3, #12]
   b5748:	4602      	mov	r2, r0
   b574a:	4620      	mov	r0, r4
}
   b574c:	b002      	add	sp, #8
   b574e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5752:	4718      	bx	r3

000b5754 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5754:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5756:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5758:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b575c:	68db      	ldr	r3, [r3, #12]
   b575e:	2201      	movs	r2, #1
   b5760:	f10d 0107 	add.w	r1, sp, #7
   b5764:	4798      	blx	r3
}
   b5766:	b003      	add	sp, #12
   b5768:	f85d fb04 	ldr.w	pc, [sp], #4

000b576c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b576c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5770:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5774:	f04f 0a14 	mov.w	sl, #20
   b5778:	9300      	str	r3, [sp, #0]
   b577a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b577e:	4b18      	ldr	r3, [pc, #96]	; (b57e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5780:	10a4      	asrs	r4, r4, #2
   b5782:	4617      	mov	r7, r2
   b5784:	435c      	muls	r4, r3
   b5786:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5788:	2c00      	cmp	r4, #0
   b578a:	dd21      	ble.n	b57d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b578c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b578e:	fb0a f006 	mul.w	r0, sl, r6
   b5792:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5796:	463a      	mov	r2, r7
   b5798:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b579c:	5828      	ldr	r0, [r5, r0]
   b579e:	9101      	str	r1, [sp, #4]
   b57a0:	455f      	cmp	r7, fp
   b57a2:	bf28      	it	cs
   b57a4:	465a      	movcs	r2, fp
   b57a6:	f001 fdbe 	bl	b7326 <strncmp>
                if (cmp == 0) {
   b57aa:	2800      	cmp	r0, #0
   b57ac:	9901      	ldr	r1, [sp, #4]
   b57ae:	f04f 0301 	mov.w	r3, #1
   b57b2:	d10b      	bne.n	b57cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b57b4:	455f      	cmp	r7, fp
   b57b6:	d103      	bne.n	b57c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b57b8:	9a00      	ldr	r2, [sp, #0]
   b57ba:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b57bc:	4634      	mov	r4, r6
   b57be:	e7e3      	b.n	b5788 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b57c0:	d9fc      	bls.n	b57bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b57c2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b57c4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b57c8:	3e01      	subs	r6, #1
   b57ca:	e7f7      	b.n	b57bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b57cc:	dbf9      	blt.n	b57c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b57ce:	e7f5      	b.n	b57bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b57d0:	eba5 0508 	sub.w	r5, r5, r8
}
   b57d4:	4802      	ldr	r0, [pc, #8]	; (b57e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b57d6:	10ad      	asrs	r5, r5, #2
   b57d8:	4368      	muls	r0, r5
   b57da:	b003      	add	sp, #12
   b57dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b57e0:	cccccccd 	.word	0xcccccccd

000b57e4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b57e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b57e6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b57e8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b57ea:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b57ec:	b303      	cbz	r3, b5830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b57ee:	b1f9      	cbz	r1, b5830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b57f0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b57f2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b57f6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b57f8:	a903      	add	r1, sp, #12
   b57fa:	a801      	add	r0, sp, #4
   b57fc:	f7ff ff4b 	bl	b5696 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5800:	4601      	mov	r1, r0
   b5802:	b1a8      	cbz	r0, b5830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5804:	f10d 030b 	add.w	r3, sp, #11
   b5808:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b580a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b580e:	4620      	mov	r0, r4
   b5810:	f7ff ffac 	bl	b576c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5814:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5818:	b153      	cbz	r3, b5830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b581a:	6823      	ldr	r3, [r4, #0]
   b581c:	2414      	movs	r4, #20
   b581e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5822:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5824:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5828:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b582a:	bfa8      	it	ge
   b582c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b582e:	e7e3      	b.n	b57f8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5830:	4628      	mov	r0, r5
   b5832:	b004      	add	sp, #16
   b5834:	bd70      	pop	{r4, r5, r6, pc}

000b5836 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5836:	b40e      	push	{r1, r2, r3}
   b5838:	b5f0      	push	{r4, r5, r6, r7, lr}
   b583a:	b08c      	sub	sp, #48	; 0x30
   b583c:	af00      	add	r7, sp, #0
   b583e:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5842:	4604      	mov	r4, r0
   b5844:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5848:	607a      	str	r2, [r7, #4]
   b584a:	462b      	mov	r3, r5
   b584c:	2120      	movs	r1, #32
   b584e:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b5852:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5854:	f7ff fd2a 	bl	b52ac <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b5858:	281f      	cmp	r0, #31
   b585a:	687a      	ldr	r2, [r7, #4]
   b585c:	d91a      	bls.n	b5894 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b585e:	f100 0308 	add.w	r3, r0, #8
   b5862:	f023 0307 	bic.w	r3, r3, #7
        }
   b5866:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b5868:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b586c:	1c41      	adds	r1, r0, #1
   b586e:	462b      	mov	r3, r5
   b5870:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5872:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5874:	f7ff fd1a 	bl	b52ac <vsnprintf>
        if (n > 0) {
   b5878:	1e02      	subs	r2, r0, #0
   b587a:	dd04      	ble.n	b5886 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b587c:	6823      	ldr	r3, [r4, #0]
   b587e:	4669      	mov	r1, sp
   b5880:	68db      	ldr	r3, [r3, #12]
   b5882:	4620      	mov	r0, r4
   b5884:	4798      	blx	r3
   b5886:	46b5      	mov	sp, r6
}
   b5888:	3730      	adds	r7, #48	; 0x30
   b588a:	46bd      	mov	sp, r7
   b588c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5890:	b003      	add	sp, #12
   b5892:	4770      	bx	lr
    } else if (n > 0) {
   b5894:	2800      	cmp	r0, #0
   b5896:	d0f7      	beq.n	b5888 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b5898:	6823      	ldr	r3, [r4, #0]
   b589a:	4602      	mov	r2, r0
   b589c:	68db      	ldr	r3, [r3, #12]
   b589e:	f107 0110 	add.w	r1, r7, #16
   b58a2:	4620      	mov	r0, r4
   b58a4:	4798      	blx	r3
}
   b58a6:	e7ef      	b.n	b5888 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b58a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b58a8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b58aa:	4c09      	ldr	r4, [pc, #36]	; (b58d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b58ac:	7823      	ldrb	r3, [r4, #0]
   b58ae:	f3bf 8f5b 	dmb	ish
   b58b2:	07db      	lsls	r3, r3, #31
   b58b4:	d409      	bmi.n	b58ca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b58b6:	4620      	mov	r0, r4
   b58b8:	f7ff f916 	bl	b4ae8 <__cxa_guard_acquire>
   b58bc:	b128      	cbz	r0, b58ca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b58be:	4620      	mov	r0, r4
   b58c0:	f7ff f917 	bl	b4af2 <__cxa_guard_release>
   b58c4:	4803      	ldr	r0, [pc, #12]	; (b58d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b58c6:	f001 fca3 	bl	b7210 <atexit>
}
   b58ca:	4803      	ldr	r0, [pc, #12]	; (b58d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b58cc:	bd10      	pop	{r4, pc}
   b58ce:	bf00      	nop
   b58d0:	2003e688 	.word	0x2003e688
   b58d4:	000b5691 	.word	0x000b5691
   b58d8:	2003e5c4 	.word	0x2003e5c4

000b58dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b58dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b58de:	4c09      	ldr	r4, [pc, #36]	; (b5904 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b58e0:	7823      	ldrb	r3, [r4, #0]
   b58e2:	f3bf 8f5b 	dmb	ish
   b58e6:	07db      	lsls	r3, r3, #31
   b58e8:	d409      	bmi.n	b58fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b58ea:	4620      	mov	r0, r4
   b58ec:	f7ff f8fc 	bl	b4ae8 <__cxa_guard_acquire>
   b58f0:	b128      	cbz	r0, b58fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b58f2:	4620      	mov	r0, r4
   b58f4:	f7ff f8fd 	bl	b4af2 <__cxa_guard_release>
   b58f8:	4803      	ldr	r0, [pc, #12]	; (b5908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b58fa:	f001 fc89 	bl	b7210 <atexit>
    return &factory;
}
   b58fe:	4803      	ldr	r0, [pc, #12]	; (b590c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5900:	bd10      	pop	{r4, pc}
   b5902:	bf00      	nop
   b5904:	2003e68c 	.word	0x2003e68c
   b5908:	000b56e9 	.word	0x000b56e9
   b590c:	2003e5c8 	.word	0x2003e5c8

000b5910 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5910:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5912:	2500      	movs	r5, #0
   b5914:	4604      	mov	r4, r0
   b5916:	e9c0 5500 	strd	r5, r5, [r0]
   b591a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b591e:	6085      	str	r5, [r0, #8]
   b5920:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5922:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5926:	f7ff faed 	bl	b4f04 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b592a:	f7ff ffbd 	bl	b58a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b592e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5930:	f7ff ffd4 	bl	b58dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5934:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5936:	6220      	str	r0, [r4, #32]
}
   b5938:	4620      	mov	r0, r4
   b593a:	bd38      	pop	{r3, r4, r5, pc}

000b593c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b593c:	b510      	push	{r4, lr}
    static LogManager mgr;
   b593e:	4c0a      	ldr	r4, [pc, #40]	; (b5968 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5940:	7823      	ldrb	r3, [r4, #0]
   b5942:	f3bf 8f5b 	dmb	ish
   b5946:	07db      	lsls	r3, r3, #31
   b5948:	d40c      	bmi.n	b5964 <_ZN5spark10LogManager8instanceEv+0x28>
   b594a:	4620      	mov	r0, r4
   b594c:	f7ff f8cc 	bl	b4ae8 <__cxa_guard_acquire>
   b5950:	b140      	cbz	r0, b5964 <_ZN5spark10LogManager8instanceEv+0x28>
   b5952:	4806      	ldr	r0, [pc, #24]	; (b596c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5954:	f7ff ffdc 	bl	b5910 <_ZN5spark10LogManagerC1Ev>
   b5958:	4620      	mov	r0, r4
   b595a:	f7ff f8ca 	bl	b4af2 <__cxa_guard_release>
   b595e:	4804      	ldr	r0, [pc, #16]	; (b5970 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5960:	f001 fc56 	bl	b7210 <atexit>
    return &mgr;
}
   b5964:	4801      	ldr	r0, [pc, #4]	; (b596c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5966:	bd10      	pop	{r4, pc}
   b5968:	2003e684 	.word	0x2003e684
   b596c:	2003e694 	.word	0x2003e694
   b5970:	000b5eb5 	.word	0x000b5eb5

000b5974 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5974:	4a02      	ldr	r2, [pc, #8]	; (b5980 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5976:	4903      	ldr	r1, [pc, #12]	; (b5984 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5978:	4803      	ldr	r0, [pc, #12]	; (b5988 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b597a:	2300      	movs	r3, #0
   b597c:	f7ff bbd2 	b.w	b5124 <log_set_callbacks>
   b5980:	000b5c99 	.word	0x000b5c99
   b5984:	000b5c25 	.word	0x000b5c25
   b5988:	000b5ba5 	.word	0x000b5ba5

000b598c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b598c:	2300      	movs	r3, #0
   b598e:	461a      	mov	r2, r3
   b5990:	4619      	mov	r1, r3
   b5992:	4618      	mov	r0, r3
   b5994:	f7ff bbc6 	b.w	b5124 <log_set_callbacks>

000b5998 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5998:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b599a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b599c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b599e:	4668      	mov	r0, sp
   b59a0:	f7ff fce2 	bl	b5368 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b59a4:	466a      	mov	r2, sp
   b59a6:	4629      	mov	r1, r5
   b59a8:	4620      	mov	r0, r4
   b59aa:	f001 fa69 	bl	b6e80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b59ae:	a801      	add	r0, sp, #4
   b59b0:	f7ff fce3 	bl	b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b59b4:	4620      	mov	r0, r4
   b59b6:	b003      	add	sp, #12
   b59b8:	bd30      	pop	{r4, r5, pc}

000b59ba <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b59ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b59bc:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b59be:	4604      	mov	r4, r0
   b59c0:	4668      	mov	r0, sp
   b59c2:	f7ff fcd1 	bl	b5368 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b59c6:	466a      	mov	r2, sp
   b59c8:	4629      	mov	r1, r5
   b59ca:	4620      	mov	r0, r4
   b59cc:	f001 fa34 	bl	b6e38 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b59d0:	a801      	add	r0, sp, #4
   b59d2:	f7ff fcd2 	bl	b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b59d6:	4620      	mov	r0, r4
   b59d8:	b003      	add	sp, #12
   b59da:	bd30      	pop	{r4, r5, pc}

000b59dc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b59dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b59de:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b59e0:	4604      	mov	r4, r0
   b59e2:	4668      	mov	r0, sp
   b59e4:	f7ff fcc0 	bl	b5368 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b59e8:	466a      	mov	r2, sp
   b59ea:	4629      	mov	r1, r5
   b59ec:	4620      	mov	r0, r4
   b59ee:	f001 f9cc 	bl	b6d8a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b59f2:	a801      	add	r0, sp, #4
   b59f4:	f7ff fcc1 	bl	b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b59f8:	4620      	mov	r0, r4
   b59fa:	b003      	add	sp, #12
   b59fc:	bd30      	pop	{r4, r5, pc}
	...

000b5a00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5a00:	b570      	push	{r4, r5, r6, lr}
   b5a02:	b08a      	sub	sp, #40	; 0x28
   b5a04:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5a06:	4601      	mov	r1, r0
   b5a08:	a804      	add	r0, sp, #16
   b5a0a:	f7ff ffc5 	bl	b5998 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5a0e:	4e14      	ldr	r6, [pc, #80]	; (b5a60 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5a10:	a804      	add	r0, sp, #16
   b5a12:	f001 fa4d 	bl	b6eb0 <_ZN5spark18JSONObjectIterator4nextEv>
   b5a16:	b1e8      	cbz	r0, b5a54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5a18:	a904      	add	r1, sp, #16
   b5a1a:	4668      	mov	r0, sp
   b5a1c:	f7ff ffcd 	bl	b59ba <_ZNK5spark18JSONObjectIterator4nameEv>
   b5a20:	9802      	ldr	r0, [sp, #8]
   b5a22:	4631      	mov	r1, r6
   b5a24:	f7ff fe59 	bl	b56da <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5a28:	4604      	mov	r4, r0
   b5a2a:	b110      	cbz	r0, b5a32 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5a2c:	1e2c      	subs	r4, r5, #0
   b5a2e:	bf18      	it	ne
   b5a30:	2401      	movne	r4, #1
   b5a32:	a801      	add	r0, sp, #4
   b5a34:	f7ff fca1 	bl	b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a38:	2c00      	cmp	r4, #0
   b5a3a:	d0e9      	beq.n	b5a10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5a3c:	a904      	add	r1, sp, #16
   b5a3e:	4668      	mov	r0, sp
   b5a40:	f7ff ffcc 	bl	b59dc <_ZNK5spark18JSONObjectIterator5valueEv>
   b5a44:	4668      	mov	r0, sp
   b5a46:	f001 f9d6 	bl	b6df6 <_ZNK5spark9JSONValue5toIntEv>
   b5a4a:	6028      	str	r0, [r5, #0]
   b5a4c:	a801      	add	r0, sp, #4
   b5a4e:	f7ff fc94 	bl	b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a52:	e7dd      	b.n	b5a10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5a54:	a805      	add	r0, sp, #20
   b5a56:	f7ff fc90 	bl	b537a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a5a:	b00a      	add	sp, #40	; 0x28
   b5a5c:	bd70      	pop	{r4, r5, r6, pc}
   b5a5e:	bf00      	nop
   b5a60:	000b7620 	.word	0x000b7620

000b5a64 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5a66:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5a68:	4620      	mov	r0, r4
   b5a6a:	4913      	ldr	r1, [pc, #76]	; (b5ab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5a6c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5a6e:	f7fe ffdb 	bl	b4a28 <strcmp>
   b5a72:	b950      	cbnz	r0, b5a8a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5a74:	f000 ff32 	bl	b68dc <_Z16_fetch_usbserialv>
   b5a78:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5a7c:	f000 ff1e 	bl	b68bc <_ZN9USBSerial5beginEl>
}
   b5a80:	b003      	add	sp, #12
   b5a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5a86:	f000 bf29 	b.w	b68dc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5a8a:	490c      	ldr	r1, [pc, #48]	; (b5abc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	f7fe ffcb 	bl	b4a28 <strcmp>
   b5a92:	b978      	cbnz	r0, b5ab4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5a94:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5a98:	a901      	add	r1, sp, #4
   b5a9a:	4628      	mov	r0, r5
        int baud = 9600;
   b5a9c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5a9e:	f7ff ffaf 	bl	b5a00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5aa2:	f001 fb4d 	bl	b7140 <_Z22__fetch_global_Serial1v>
   b5aa6:	9901      	ldr	r1, [sp, #4]
   b5aa8:	f000 ffe0 	bl	b6a6c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5aac:	f001 fb48 	bl	b7140 <_Z22__fetch_global_Serial1v>
}
   b5ab0:	b003      	add	sp, #12
   b5ab2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5ab4:	2000      	movs	r0, #0
   b5ab6:	e7fb      	b.n	b5ab0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5ab8:	000b7625 	.word	0x000b7625
   b5abc:	000b762c 	.word	0x000b762c

000b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ac0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ac2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5ac6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ac8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5aca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ace:	42ae      	cmp	r6, r5
   b5ad0:	d005      	beq.n	b5ade <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5ad2:	f105 0008 	add.w	r0, r5, #8
   b5ad6:	f7ff fff3 	bl	b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5ada:	3514      	adds	r5, #20
   b5adc:	e7f7      	b.n	b5ace <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5ade:	6820      	ldr	r0, [r4, #0]
   b5ae0:	f7ff fbd4 	bl	b528c <free>
}
   b5ae4:	4620      	mov	r0, r4
   b5ae6:	bd70      	pop	{r4, r5, r6, pc}

000b5ae8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5ae8:	b510      	push	{r4, lr}
   b5aea:	4604      	mov	r4, r0
   b5aec:	300c      	adds	r0, #12
   b5aee:	f7ff ffe7 	bl	b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5af2:	4620      	mov	r0, r4
   b5af4:	f7ff fd16 	bl	b5524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5af8:	4620      	mov	r0, r4
   b5afa:	bd10      	pop	{r4, pc}

000b5afc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5afc:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5afe:	4b04      	ldr	r3, [pc, #16]	; (b5b10 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5b00:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5b02:	f840 3b04 	str.w	r3, [r0], #4
   b5b06:	f7ff ffef 	bl	b5ae8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	bd10      	pop	{r4, pc}
   b5b0e:	bf00      	nop
   b5b10:	000b759c 	.word	0x000b759c

000b5b14 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5b14:	b510      	push	{r4, lr}
   b5b16:	4604      	mov	r4, r0
   b5b18:	f7ff fff0 	bl	b5afc <_ZN5spark16StreamLogHandlerD1Ev>
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	2124      	movs	r1, #36	; 0x24
   b5b20:	f7fe ffd3 	bl	b4aca <_ZdlPvj>
   b5b24:	4620      	mov	r0, r4
   b5b26:	bd10      	pop	{r4, pc}

000b5b28 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5b28:	b510      	push	{r4, lr}
   b5b2a:	4b03      	ldr	r3, [pc, #12]	; (b5b38 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5b2c:	6003      	str	r3, [r0, #0]
   b5b2e:	4604      	mov	r4, r0
   b5b30:	f7ff ffe4 	bl	b5afc <_ZN5spark16StreamLogHandlerD1Ev>
   b5b34:	4620      	mov	r0, r4
   b5b36:	bd10      	pop	{r4, pc}
   b5b38:	000b76b4 	.word	0x000b76b4

000b5b3c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5b3c:	b510      	push	{r4, lr}
   b5b3e:	4604      	mov	r4, r0
   b5b40:	f7ff fff2 	bl	b5b28 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5b44:	4620      	mov	r0, r4
   b5b46:	2124      	movs	r1, #36	; 0x24
   b5b48:	f7fe ffbf 	bl	b4aca <_ZdlPvj>
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	bd10      	pop	{r4, pc}

000b5b50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5b50:	680a      	ldr	r2, [r1, #0]
   b5b52:	6002      	str	r2, [r0, #0]
   b5b54:	684a      	ldr	r2, [r1, #4]
   b5b56:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5b58:	2200      	movs	r2, #0
   b5b5a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5b5e:	b510      	push	{r4, lr}
   b5b60:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5b62:	688c      	ldr	r4, [r1, #8]
   b5b64:	6084      	str	r4, [r0, #8]
   b5b66:	68cc      	ldr	r4, [r1, #12]
   b5b68:	60c4      	str	r4, [r0, #12]
   b5b6a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b6c:	608a      	str	r2, [r1, #8]
   b5b6e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5b70:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b72:	610a      	str	r2, [r1, #16]
   b5b74:	bd10      	pop	{r4, pc}

000b5b76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b5b76:	2200      	movs	r2, #0
   b5b78:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5b7c:	b510      	push	{r4, lr}
        capacity_(0) {
   b5b7e:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5b80:	680c      	ldr	r4, [r1, #0]
   b5b82:	6004      	str	r4, [r0, #0]
   b5b84:	684c      	ldr	r4, [r1, #4]
   b5b86:	6044      	str	r4, [r0, #4]
   b5b88:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b8a:	600a      	str	r2, [r1, #0]
   b5b8c:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5b8e:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b90:	608a      	str	r2, [r1, #8]
}
   b5b92:	bd10      	pop	{r4, pc}

000b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5b94:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5b96:	6803      	ldr	r3, [r0, #0]
   b5b98:	4604      	mov	r4, r0
   b5b9a:	6818      	ldr	r0, [r3, #0]
   b5b9c:	f7ff f9ca 	bl	b4f34 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	bd10      	pop	{r4, pc}

000b5ba4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ba8:	b087      	sub	sp, #28
   b5baa:	4680      	mov	r8, r0
   b5bac:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5bae:	4b1c      	ldr	r3, [pc, #112]	; (b5c20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5bb0:	685b      	ldr	r3, [r3, #4]
   b5bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5bb6:	4689      	mov	r9, r1
   b5bb8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b5bba:	b96b      	cbnz	r3, b5bd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5bbc:	f7ff febe 	bl	b593c <_ZN5spark10LogManager8instanceEv>
   b5bc0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5bc2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5bc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5bc8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5bca:	f7ff fd84 	bl	b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5bce:	7b23      	ldrb	r3, [r4, #12]
   b5bd0:	b12b      	cbz	r3, b5bde <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5bd2:	a805      	add	r0, sp, #20
   b5bd4:	f7ff ffde 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5bd8:	b007      	add	sp, #28
   b5bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5bde:	2301      	movs	r3, #1
   b5be0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5be2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5be6:	fa5f f989 	uxtb.w	r9, r9
   b5bea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5bee:	45aa      	cmp	sl, r5
   b5bf0:	d012      	beq.n	b5c18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5bf2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5bf6:	4631      	mov	r1, r6
   b5bf8:	1d38      	adds	r0, r7, #4
   b5bfa:	f7ff fdf3 	bl	b57e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5bfe:	4581      	cmp	r9, r0
   b5c00:	d3f5      	bcc.n	b5bee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5c02:	683b      	ldr	r3, [r7, #0]
   b5c04:	9a03      	ldr	r2, [sp, #12]
   b5c06:	9200      	str	r2, [sp, #0]
   b5c08:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5c0c:	464a      	mov	r2, r9
   b5c0e:	4633      	mov	r3, r6
   b5c10:	4641      	mov	r1, r8
   b5c12:	4638      	mov	r0, r7
   b5c14:	47d8      	blx	fp
   b5c16:	e7ea      	b.n	b5bee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5c18:	2300      	movs	r3, #0
   b5c1a:	7323      	strb	r3, [r4, #12]
   b5c1c:	e7d9      	b.n	b5bd2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5c1e:	bf00      	nop
   b5c20:	e000ed00 	.word	0xe000ed00

000b5c24 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c28:	469b      	mov	fp, r3
   b5c2a:	4b1a      	ldr	r3, [pc, #104]	; (b5c94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5c2c:	685b      	ldr	r3, [r3, #4]
   b5c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5c32:	4680      	mov	r8, r0
   b5c34:	4689      	mov	r9, r1
   b5c36:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b5c38:	b96b      	cbnz	r3, b5c56 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5c3a:	f7ff fe7f 	bl	b593c <_ZN5spark10LogManager8instanceEv>
   b5c3e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5c40:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5c44:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c46:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5c48:	f7ff fd45 	bl	b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5c4c:	7b23      	ldrb	r3, [r4, #12]
   b5c4e:	b12b      	cbz	r3, b5c5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5c50:	a801      	add	r0, sp, #4
   b5c52:	f7ff ff9f 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5c56:	b003      	add	sp, #12
   b5c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5c5c:	2301      	movs	r3, #1
   b5c5e:	7323      	strb	r3, [r4, #12]
   b5c60:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5c64:	b2f6      	uxtb	r6, r6
   b5c66:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5c6a:	4555      	cmp	r5, sl
   b5c6c:	d00e      	beq.n	b5c8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5c6e:	f855 7b04 	ldr.w	r7, [r5], #4
   b5c72:	4659      	mov	r1, fp
   b5c74:	1d38      	adds	r0, r7, #4
   b5c76:	f7ff fdb5 	bl	b57e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5c7a:	4286      	cmp	r6, r0
   b5c7c:	d3f5      	bcc.n	b5c6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5c7e:	683b      	ldr	r3, [r7, #0]
   b5c80:	464a      	mov	r2, r9
   b5c82:	68db      	ldr	r3, [r3, #12]
   b5c84:	4641      	mov	r1, r8
   b5c86:	4638      	mov	r0, r7
   b5c88:	4798      	blx	r3
   b5c8a:	e7ee      	b.n	b5c6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5c8c:	2300      	movs	r3, #0
   b5c8e:	7323      	strb	r3, [r4, #12]
   b5c90:	e7de      	b.n	b5c50 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5c92:	bf00      	nop
   b5c94:	e000ed00 	.word	0xe000ed00

000b5c98 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c9c:	4b16      	ldr	r3, [pc, #88]	; (b5cf8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5c9e:	685b      	ldr	r3, [r3, #4]
   b5ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5ca4:	4605      	mov	r5, r0
   b5ca6:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b5ca8:	bb1b      	cbnz	r3, b5cf2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5caa:	f7ff fe47 	bl	b593c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5cae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5cb2:	4604      	mov	r4, r0
   b5cb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5cb6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5cb8:	f7ff fd0d 	bl	b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5cbc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5cc0:	2446      	movs	r4, #70	; 0x46
   b5cc2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5cc6:	45b0      	cmp	r8, r6
   b5cc8:	d109      	bne.n	b5cde <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5cca:	a801      	add	r0, sp, #4
   b5ccc:	f7ff ff62 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5cd0:	42a5      	cmp	r5, r4
   b5cd2:	bfb4      	ite	lt
   b5cd4:	2000      	movlt	r0, #0
   b5cd6:	2001      	movge	r0, #1
}
   b5cd8:	b002      	add	sp, #8
   b5cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5cde:	f856 0b04 	ldr.w	r0, [r6], #4
   b5ce2:	4639      	mov	r1, r7
   b5ce4:	3004      	adds	r0, #4
   b5ce6:	f7ff fd7d 	bl	b57e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5cea:	4284      	cmp	r4, r0
   b5cec:	bfa8      	it	ge
   b5cee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5cf0:	e7e9      	b.n	b5cc6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5cf2:	2000      	movs	r0, #0
   b5cf4:	e7f0      	b.n	b5cd8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5cf6:	bf00      	nop
   b5cf8:	e000ed00 	.word	0xe000ed00

000b5cfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cfe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5d02:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d04:	4604      	mov	r4, r0
   b5d06:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d08:	db0d      	blt.n	b5d26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5d0a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5d0c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5d0e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5d10:	dd04      	ble.n	b5d1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5d12:	00b9      	lsls	r1, r7, #2
   b5d14:	f7ff fac2 	bl	b529c <realloc>
            if (!d) {
   b5d18:	b918      	cbnz	r0, b5d22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5d1c:	f7ff fab6 	bl	b528c <free>
        T* d = nullptr;
   b5d20:	2000      	movs	r0, #0
        data_ = d;
   b5d22:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5d24:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5d26:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5d28:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d2a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5d2e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d30:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5d34:	1d08      	adds	r0, r1, #4
   b5d36:	f001 fa87 	bl	b7248 <memmove>
    new(p) T(std::move(value));
   b5d3a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5d3e:	6863      	ldr	r3, [r4, #4]
   b5d40:	3301      	adds	r3, #1
   b5d42:	6063      	str	r3, [r4, #4]
    return true;
   b5d44:	2001      	movs	r0, #1
   b5d46:	e7e8      	b.n	b5d1a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5d48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5d4a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5d4e:	4604      	mov	r4, r0
   b5d50:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5d52:	9301      	str	r3, [sp, #4]
   b5d54:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5d56:	f7ff fcbe 	bl	b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5d5a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5d5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5d62:	4293      	cmp	r3, r2
   b5d64:	4619      	mov	r1, r3
   b5d66:	d00b      	beq.n	b5d80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5d68:	6809      	ldr	r1, [r1, #0]
   b5d6a:	42a9      	cmp	r1, r5
   b5d6c:	f103 0304 	add.w	r3, r3, #4
   b5d70:	d1f7      	bne.n	b5d62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5d72:	a801      	add	r0, sp, #4
   b5d74:	f7ff ff0e 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5d78:	2500      	movs	r5, #0
}
   b5d7a:	4628      	mov	r0, r5
   b5d7c:	b003      	add	sp, #12
   b5d7e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5d80:	4629      	mov	r1, r5
   b5d82:	4620      	mov	r0, r4
   b5d84:	f7ff ffba 	bl	b5cfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5d88:	4605      	mov	r5, r0
   b5d8a:	2800      	cmp	r0, #0
   b5d8c:	d0f1      	beq.n	b5d72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5d8e:	6863      	ldr	r3, [r4, #4]
   b5d90:	2b01      	cmp	r3, #1
   b5d92:	d101      	bne.n	b5d98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5d94:	f7ff fdee 	bl	b5974 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5d98:	a801      	add	r0, sp, #4
   b5d9a:	f7ff fefb 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5d9e:	e7ec      	b.n	b5d7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5da0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5da0:	b570      	push	{r4, r5, r6, lr}
   b5da2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5da4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5da8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5daa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5dae:	4282      	cmp	r2, r0
   b5db0:	d00f      	beq.n	b5dd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5db2:	4601      	mov	r1, r0
            if (*p == value) {
   b5db4:	681d      	ldr	r5, [r3, #0]
   b5db6:	f851 6b04 	ldr.w	r6, [r1], #4
   b5dba:	42ae      	cmp	r6, r5
   b5dbc:	d107      	bne.n	b5dce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5dbe:	1a52      	subs	r2, r2, r1
   b5dc0:	f001 fa42 	bl	b7248 <memmove>
    --size_;
   b5dc4:	6863      	ldr	r3, [r4, #4]
   b5dc6:	3b01      	subs	r3, #1
   b5dc8:	6063      	str	r3, [r4, #4]
    return true;
   b5dca:	2001      	movs	r0, #1
}
   b5dcc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5dce:	4608      	mov	r0, r1
   b5dd0:	e7ed      	b.n	b5dae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5dd2:	2000      	movs	r0, #0
   b5dd4:	e7fa      	b.n	b5dcc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5dd6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5dd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5dd8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5ddc:	4604      	mov	r4, r0
   b5dde:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5de0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5de2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5de4:	f7ff fc77 	bl	b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5de8:	a901      	add	r1, sp, #4
   b5dea:	4620      	mov	r0, r4
   b5dec:	f7ff ffd8 	bl	b5da0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5df0:	b118      	cbz	r0, b5dfa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5df2:	6863      	ldr	r3, [r4, #4]
   b5df4:	b90b      	cbnz	r3, b5dfa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5df6:	f7ff fdc9 	bl	b598c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5dfa:	a803      	add	r0, sp, #12
   b5dfc:	f7ff feca 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5e00:	b004      	add	sp, #16
   b5e02:	bd10      	pop	{r4, pc}

000b5e04 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5e04:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5e06:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5e0a:	2318      	movs	r3, #24
   b5e0c:	4604      	mov	r4, r0
   b5e0e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e12:	42ae      	cmp	r6, r5
   b5e14:	d015      	beq.n	b5e42 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5e16:	f105 0110 	add.w	r1, r5, #16
   b5e1a:	4620      	mov	r0, r4
   b5e1c:	f7ff ffc0 	bl	b5da0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5e20:	6863      	ldr	r3, [r4, #4]
   b5e22:	b90b      	cbnz	r3, b5e28 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5e24:	f7ff fdb2 	bl	b598c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5e28:	69e0      	ldr	r0, [r4, #28]
   b5e2a:	6929      	ldr	r1, [r5, #16]
   b5e2c:	6803      	ldr	r3, [r0, #0]
   b5e2e:	68db      	ldr	r3, [r3, #12]
   b5e30:	4798      	blx	r3
        if (h.stream) {
   b5e32:	6969      	ldr	r1, [r5, #20]
   b5e34:	b119      	cbz	r1, b5e3e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5e36:	6a20      	ldr	r0, [r4, #32]
   b5e38:	6803      	ldr	r3, [r0, #0]
   b5e3a:	68db      	ldr	r3, [r3, #12]
   b5e3c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e3e:	3518      	adds	r5, #24
   b5e40:	e7e7      	b.n	b5e12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5e42:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5e46:	2618      	movs	r6, #24
   b5e48:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e4c:	42ae      	cmp	r6, r5
   b5e4e:	d004      	beq.n	b5e5a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5e50:	4628      	mov	r0, r5
   b5e52:	f7ff fac5 	bl	b53e0 <_ZN6StringD1Ev>
   b5e56:	3518      	adds	r5, #24
   b5e58:	e7f8      	b.n	b5e4c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5e5a:	2300      	movs	r3, #0
   b5e5c:	6163      	str	r3, [r4, #20]
}
   b5e5e:	bd70      	pop	{r4, r5, r6, pc}

000b5e60 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e62:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5e64:	f7ff fd92 	bl	b598c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5e68:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5e6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5e6e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5e70:	f7ff fc31 	bl	b56d6 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5e74:	4620      	mov	r0, r4
   b5e76:	f7ff ffc5 	bl	b5e04 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5e7a:	a801      	add	r0, sp, #4
   b5e7c:	f7ff fe8a 	bl	b5b94 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5e80:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e82:	b108      	cbz	r0, b5e88 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5e84:	f7ff f846 	bl	b4f14 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5e88:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5e8c:	2618      	movs	r6, #24
   b5e8e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5e92:	42ae      	cmp	r6, r5
   b5e94:	d004      	beq.n	b5ea0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5e96:	4628      	mov	r0, r5
   b5e98:	f7ff faa2 	bl	b53e0 <_ZN6StringD1Ev>
   b5e9c:	3518      	adds	r5, #24
   b5e9e:	e7f8      	b.n	b5e92 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5ea0:	6920      	ldr	r0, [r4, #16]
   b5ea2:	f7ff f9f3 	bl	b528c <free>
   b5ea6:	6820      	ldr	r0, [r4, #0]
   b5ea8:	f7ff f9f0 	bl	b528c <free>
}
   b5eac:	4620      	mov	r0, r4
   b5eae:	b002      	add	sp, #8
   b5eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5eb4 <__tcf_2>:
    static LogManager mgr;
   b5eb4:	4801      	ldr	r0, [pc, #4]	; (b5ebc <__tcf_2+0x8>)
   b5eb6:	f7ff bfd3 	b.w	b5e60 <_ZN5spark10LogManagerD1Ev>
   b5eba:	bf00      	nop
   b5ebc:	2003e694 	.word	0x2003e694

000b5ec0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5ec0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ec4:	4604      	mov	r4, r0
   b5ec6:	460d      	mov	r5, r1
   b5ec8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5eca:	d915      	bls.n	b5ef8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5ecc:	4290      	cmp	r0, r2
   b5ece:	d214      	bcs.n	b5efa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5ed0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5ed4:	1a75      	subs	r5, r6, r1
   b5ed6:	f1a1 0714 	sub.w	r7, r1, #20
   b5eda:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5edc:	42b7      	cmp	r7, r6
   b5ede:	d01a      	beq.n	b5f16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5ee0:	b11c      	cbz	r4, b5eea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5ee2:	4631      	mov	r1, r6
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	f7ff fe33 	bl	b5b50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5eea:	f106 0008 	add.w	r0, r6, #8
   b5eee:	f7ff fde7 	bl	b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5ef2:	3e14      	subs	r6, #20
   b5ef4:	3c14      	subs	r4, #20
   b5ef6:	e7f1      	b.n	b5edc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5ef8:	d00d      	beq.n	b5f16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5efa:	42b5      	cmp	r5, r6
   b5efc:	d00b      	beq.n	b5f16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5efe:	b11c      	cbz	r4, b5f08 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5f00:	4629      	mov	r1, r5
   b5f02:	4620      	mov	r0, r4
   b5f04:	f7ff fe24 	bl	b5b50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5f08:	f105 0008 	add.w	r0, r5, #8
   b5f0c:	f7ff fdd8 	bl	b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5f10:	3514      	adds	r5, #20
   b5f12:	3414      	adds	r4, #20
   b5f14:	e7f1      	b.n	b5efa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5f18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f1c:	4604      	mov	r4, r0
   b5f1e:	460d      	mov	r5, r1
   b5f20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f22:	d914      	bls.n	b5f4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5f24:	4290      	cmp	r0, r2
   b5f26:	d213      	bcs.n	b5f50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5f28:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5f2c:	1a75      	subs	r5, r6, r1
   b5f2e:	f1a1 0710 	sub.w	r7, r1, #16
   b5f32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f34:	42b7      	cmp	r7, r6
   b5f36:	d018      	beq.n	b5f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5f38:	b11c      	cbz	r4, b5f42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5f3a:	4631      	mov	r1, r6
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	f7ff fab8 	bl	b54b2 <_ZN6StringC1EOS_>
                end->~T();
   b5f42:	4630      	mov	r0, r6
   b5f44:	f7ff fa4c 	bl	b53e0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5f48:	3e10      	subs	r6, #16
   b5f4a:	3c10      	subs	r4, #16
   b5f4c:	e7f2      	b.n	b5f34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5f4e:	d00c      	beq.n	b5f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5f50:	42b5      	cmp	r5, r6
   b5f52:	d00a      	beq.n	b5f6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5f54:	b11c      	cbz	r4, b5f5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5f56:	4629      	mov	r1, r5
   b5f58:	4620      	mov	r0, r4
   b5f5a:	f7ff faaa 	bl	b54b2 <_ZN6StringC1EOS_>
                p->~T();
   b5f5e:	4628      	mov	r0, r5
   b5f60:	f7ff fa3e 	bl	b53e0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5f64:	3510      	adds	r5, #16
   b5f66:	3410      	adds	r4, #16
   b5f68:	e7f2      	b.n	b5f50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5f6c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5f6e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5f70:	4605      	mov	r5, r0
        if (n > 0) {
   b5f72:	dd11      	ble.n	b5f98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5f74:	0130      	lsls	r0, r6, #4
   b5f76:	f7ff f981 	bl	b527c <malloc>
            if (!d) {
   b5f7a:	4604      	mov	r4, r0
   b5f7c:	b158      	cbz	r0, b5f96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5f7e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5f82:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5f86:	f7ff ffc7 	bl	b5f18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5f8a:	6828      	ldr	r0, [r5, #0]
   b5f8c:	f7ff f97e 	bl	b528c <free>
        data_ = d;
   b5f90:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5f92:	60ae      	str	r6, [r5, #8]
        return true;
   b5f94:	2001      	movs	r0, #1
    }
   b5f96:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5f98:	2400      	movs	r4, #0
   b5f9a:	e7f6      	b.n	b5f8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5f9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fa0:	4690      	mov	r8, r2
   b5fa2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5fa4:	2300      	movs	r3, #0
   b5fa6:	9103      	str	r1, [sp, #12]
    return size_;
   b5fa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5fac:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5fae:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5fb0:	4299      	cmp	r1, r3
        capacity_(0) {
   b5fb2:	e9c0 3300 	strd	r3, r3, [r0]
   b5fb6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5fbe:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5fc2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5fc4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5fc6:	dc23      	bgt.n	b6010 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5fc8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5fcc:	2314      	movs	r3, #20
   b5fce:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5fd2:	42af      	cmp	r7, r5
   b5fd4:	d03b      	beq.n	b604e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5fd6:	4629      	mov	r1, r5
   b5fd8:	a80b      	add	r0, sp, #44	; 0x2c
   b5fda:	f7ff fa6a 	bl	b54b2 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5fde:	a90b      	add	r1, sp, #44	; 0x2c
   b5fe0:	a80f      	add	r0, sp, #60	; 0x3c
   b5fe2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5fe4:	f7ff fa65 	bl	b54b2 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5fe8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5fec:	4299      	cmp	r1, r3
   b5fee:	da1b      	bge.n	b6028 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5ff0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5ff4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5ff8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5ffc:	4631      	mov	r1, r6
   b5ffe:	f106 0010 	add.w	r0, r6, #16
   b6002:	f7ff ff89 	bl	b5f18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6006:	b9ee      	cbnz	r6, b6044 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6008:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b600a:	3301      	adds	r3, #1
   b600c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b600e:	e011      	b.n	b6034 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6010:	a808      	add	r0, sp, #32
   b6012:	f7ff ffab 	bl	b5f6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6016:	2800      	cmp	r0, #0
   b6018:	d1d6      	bne.n	b5fc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b601a:	a808      	add	r0, sp, #32
   b601c:	f7ff fa82 	bl	b5524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6020:	4620      	mov	r0, r4
   b6022:	b015      	add	sp, #84	; 0x54
   b6024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6028:	3101      	adds	r1, #1
   b602a:	a808      	add	r0, sp, #32
   b602c:	f7ff ff9e 	bl	b5f6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6030:	2800      	cmp	r0, #0
   b6032:	d1dd      	bne.n	b5ff0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6034:	a80f      	add	r0, sp, #60	; 0x3c
   b6036:	f7ff f9d3 	bl	b53e0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b603a:	a80b      	add	r0, sp, #44	; 0x2c
   b603c:	f7ff f9d0 	bl	b53e0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6040:	3514      	adds	r5, #20
   b6042:	e7c6      	b.n	b5fd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6044:	a90f      	add	r1, sp, #60	; 0x3c
   b6046:	4630      	mov	r0, r6
   b6048:	f7ff fa33 	bl	b54b2 <_ZN6StringC1EOS_>
   b604c:	e7dc      	b.n	b6008 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b604e:	2600      	movs	r6, #0
   b6050:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6054:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6056:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b605a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b605e:	429e      	cmp	r6, r3
   b6060:	da7c      	bge.n	b615c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b6062:	0133      	lsls	r3, r6, #4
   b6064:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6066:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6068:	b90b      	cbnz	r3, b606e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b606a:	3601      	adds	r6, #1
   b606c:	e7f5      	b.n	b605a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b606e:	2300      	movs	r3, #0
   b6070:	9307      	str	r3, [sp, #28]
   b6072:	fb09 f306 	mul.w	r3, r9, r6
   b6076:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6078:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b607a:	a907      	add	r1, sp, #28
   b607c:	a806      	add	r0, sp, #24
   b607e:	f7ff fb0a 	bl	b5696 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6082:	4682      	mov	sl, r0
   b6084:	2800      	cmp	r0, #0
   b6086:	d0f0      	beq.n	b606a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6088:	f04f 0300 	mov.w	r3, #0
   b608c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6090:	4601      	mov	r1, r0
   b6092:	9a07      	ldr	r2, [sp, #28]
   b6094:	f10d 0317 	add.w	r3, sp, #23
   b6098:	4628      	mov	r0, r5
   b609a:	f7ff fb67 	bl	b576c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b609e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b60a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b60a4:	2f00      	cmp	r7, #0
   b60a6:	d14a      	bne.n	b613e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b60a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b60ac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b60b0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b60b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b60b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b60bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b60c0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b60c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b60c6:	4293      	cmp	r3, r2
   b60c8:	db17      	blt.n	b60fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b60ca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b60ce:	f1ba 0f00 	cmp.w	sl, #0
   b60d2:	dd30      	ble.n	b6136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b60d4:	fb09 f00a 	mul.w	r0, r9, sl
   b60d8:	f7ff f8d0 	bl	b527c <malloc>
            if (!d) {
   b60dc:	4683      	mov	fp, r0
   b60de:	b360      	cbz	r0, b613a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b60e0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b60e4:	fb09 1202 	mla	r2, r9, r2, r1
   b60e8:	f7ff feea 	bl	b5ec0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b60ec:	6828      	ldr	r0, [r5, #0]
   b60ee:	f7ff f8cd 	bl	b528c <free>
        data_ = d;
   b60f2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b60f6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b60fa:	682b      	ldr	r3, [r5, #0]
   b60fc:	9a01      	ldr	r2, [sp, #4]
   b60fe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6102:	686a      	ldr	r2, [r5, #4]
   b6104:	4651      	mov	r1, sl
   b6106:	fb09 3202 	mla	r2, r9, r2, r3
   b610a:	f10a 0014 	add.w	r0, sl, #20
   b610e:	f7ff fed7 	bl	b5ec0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6112:	f1ba 0f00 	cmp.w	sl, #0
   b6116:	d003      	beq.n	b6120 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6118:	a90f      	add	r1, sp, #60	; 0x3c
   b611a:	4650      	mov	r0, sl
   b611c:	f7ff fd18 	bl	b5b50 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6120:	686b      	ldr	r3, [r5, #4]
   b6122:	3301      	adds	r3, #1
   b6124:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6126:	a811      	add	r0, sp, #68	; 0x44
   b6128:	f7ff fcca 	bl	b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b612c:	b13f      	cbz	r7, b613e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b612e:	a80b      	add	r0, sp, #44	; 0x2c
   b6130:	f7ff fcc6 	bl	b5ac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6134:	e771      	b.n	b601a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6136:	46bb      	mov	fp, r7
   b6138:	e7d8      	b.n	b60ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b613a:	2701      	movs	r7, #1
   b613c:	e7f3      	b.n	b6126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b613e:	9b01      	ldr	r3, [sp, #4]
   b6140:	682d      	ldr	r5, [r5, #0]
   b6142:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6146:	9b06      	ldr	r3, [sp, #24]
   b6148:	781b      	ldrb	r3, [r3, #0]
   b614a:	b92b      	cbnz	r3, b6158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b614c:	f8d8 3000 	ldr.w	r3, [r8]
   b6150:	9a02      	ldr	r2, [sp, #8]
   b6152:	4413      	add	r3, r2
   b6154:	7c1b      	ldrb	r3, [r3, #16]
   b6156:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6158:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b615a:	e78e      	b.n	b607a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b615c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b615e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6160:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6162:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6164:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6166:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b616a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b616c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b616e:	60a2      	str	r2, [r4, #8]
   b6170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6172:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6174:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6176:	60e2      	str	r2, [r4, #12]
   b6178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b617a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b617c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b617e:	6122      	str	r2, [r4, #16]
   b6180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6182:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6184:	9b03      	ldr	r3, [sp, #12]
   b6186:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6188:	6162      	str	r2, [r4, #20]
   b618a:	7623      	strb	r3, [r4, #24]
   b618c:	e7cf      	b.n	b612e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6190 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6190:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6192:	4604      	mov	r4, r0
   b6194:	b087      	sub	sp, #28
   b6196:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6198:	4626      	mov	r6, r4
        stream_(&stream) {
   b619a:	4619      	mov	r1, r3
   b619c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b619e:	4617      	mov	r7, r2
        stream_(&stream) {
   b61a0:	f7fe fdef 	bl	b4d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b61a4:	4b0b      	ldr	r3, [pc, #44]	; (b61d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b61a6:	f846 3b04 	str.w	r3, [r6], #4
   b61aa:	4669      	mov	r1, sp
   b61ac:	a803      	add	r0, sp, #12
   b61ae:	f7fe fde8 	bl	b4d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b61b2:	aa03      	add	r2, sp, #12
   b61b4:	4639      	mov	r1, r7
   b61b6:	4630      	mov	r0, r6
   b61b8:	f7ff fef0 	bl	b5f9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b61bc:	a803      	add	r0, sp, #12
   b61be:	f7fe fd9f 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b61c2:	4668      	mov	r0, sp
   b61c4:	f7fe fd9c 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b61c8:	4b03      	ldr	r3, [pc, #12]	; (b61d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b61ca:	6023      	str	r3, [r4, #0]
}
   b61cc:	4620      	mov	r0, r4
        stream_(&stream) {
   b61ce:	6225      	str	r5, [r4, #32]
}
   b61d0:	b007      	add	sp, #28
   b61d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b61d4:	000b759c 	.word	0x000b759c
   b61d8:	000b769c 	.word	0x000b769c

000b61dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b61dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61de:	460f      	mov	r7, r1
   b61e0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b61e2:	491d      	ldr	r1, [pc, #116]	; (b6258 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b61e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b61e6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b61e8:	4616      	mov	r6, r2
   b61ea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b61ec:	f7fe fc1c 	bl	b4a28 <strcmp>
   b61f0:	b9c0      	cbnz	r0, b6224 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b61f2:	b1a4      	cbz	r4, b621e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b61f4:	4629      	mov	r1, r5
   b61f6:	a801      	add	r0, sp, #4
   b61f8:	f7ff fcbd 	bl	b5b76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b61fc:	4917      	ldr	r1, [pc, #92]	; (b625c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b61fe:	2024      	movs	r0, #36	; 0x24
   b6200:	f001 f802 	bl	b7208 <_ZnwjRKSt9nothrow_t>
   b6204:	4605      	mov	r5, r0
   b6206:	b130      	cbz	r0, b6216 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6208:	ab01      	add	r3, sp, #4
   b620a:	4632      	mov	r2, r6
   b620c:	4621      	mov	r1, r4
   b620e:	f7ff ffbf 	bl	b6190 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6212:	4b13      	ldr	r3, [pc, #76]	; (b6260 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6214:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6216:	a801      	add	r0, sp, #4
   b6218:	f7fe fd72 	bl	b4d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b621c:	462c      	mov	r4, r5
}
   b621e:	4620      	mov	r0, r4
   b6220:	b005      	add	sp, #20
   b6222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6224:	490f      	ldr	r1, [pc, #60]	; (b6264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6226:	4638      	mov	r0, r7
   b6228:	f7fe fbfe 	bl	b4a28 <strcmp>
   b622c:	b990      	cbnz	r0, b6254 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b622e:	2c00      	cmp	r4, #0
   b6230:	d0f5      	beq.n	b621e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6232:	4629      	mov	r1, r5
   b6234:	a801      	add	r0, sp, #4
   b6236:	f7ff fc9e 	bl	b5b76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b623a:	4908      	ldr	r1, [pc, #32]	; (b625c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b623c:	2024      	movs	r0, #36	; 0x24
   b623e:	f000 ffe3 	bl	b7208 <_ZnwjRKSt9nothrow_t>
   b6242:	4605      	mov	r5, r0
   b6244:	2800      	cmp	r0, #0
   b6246:	d0e6      	beq.n	b6216 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6248:	ab01      	add	r3, sp, #4
   b624a:	4632      	mov	r2, r6
   b624c:	4621      	mov	r1, r4
   b624e:	f7ff ff9f 	bl	b6190 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6252:	e7e0      	b.n	b6216 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6254:	2400      	movs	r4, #0
   b6256:	e7e2      	b.n	b621e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6258:	000b7634 	.word	0x000b7634
   b625c:	000b7849 	.word	0x000b7849
   b6260:	000b76b4 	.word	0x000b76b4
   b6264:	000b7638 	.word	0x000b7638

000b6268 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6268:	4b01      	ldr	r3, [pc, #4]	; (b6270 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b626a:	4a02      	ldr	r2, [pc, #8]	; (b6274 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b626c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b626e:	4770      	bx	lr
   b6270:	2003e690 	.word	0x2003e690
   b6274:	000b7649 	.word	0x000b7649

000b6278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b627c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b627e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6282:	4604      	mov	r4, r0
   b6284:	460e      	mov	r6, r1
   b6286:	4617      	mov	r7, r2
   b6288:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b628a:	f000 fb27 	bl	b68dc <_Z16_fetch_usbserialv>
   b628e:	4581      	cmp	r9, r0
   b6290:	d04c      	beq.n	b632c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6292:	792b      	ldrb	r3, [r5, #4]
   b6294:	0719      	lsls	r1, r3, #28
   b6296:	d504      	bpl.n	b62a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6298:	696a      	ldr	r2, [r5, #20]
   b629a:	4954      	ldr	r1, [pc, #336]	; (b63ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b629c:	4620      	mov	r0, r4
   b629e:	f7ff faca 	bl	b5836 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b62a2:	f1b8 0f00 	cmp.w	r8, #0
   b62a6:	d00d      	beq.n	b62c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b62a8:	215b      	movs	r1, #91	; 0x5b
   b62aa:	4620      	mov	r0, r4
   b62ac:	f7ff fa52 	bl	b5754 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b62b0:	4641      	mov	r1, r8
   b62b2:	4620      	mov	r0, r4
   b62b4:	f7ff fa3f 	bl	b5736 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b62b8:	6823      	ldr	r3, [r4, #0]
   b62ba:	494d      	ldr	r1, [pc, #308]	; (b63f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b62bc:	68db      	ldr	r3, [r3, #12]
   b62be:	2202      	movs	r2, #2
   b62c0:	4620      	mov	r0, r4
   b62c2:	4798      	blx	r3
    if (attr.has_file) {
   b62c4:	792b      	ldrb	r3, [r5, #4]
   b62c6:	07da      	lsls	r2, r3, #31
   b62c8:	d523      	bpl.n	b6312 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b62ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b62ce:	212f      	movs	r1, #47	; 0x2f
   b62d0:	4640      	mov	r0, r8
   b62d2:	f001 f83c 	bl	b734e <strrchr>
    if (s1) {
   b62d6:	b108      	cbz	r0, b62dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b62d8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b62dc:	4641      	mov	r1, r8
   b62de:	4620      	mov	r0, r4
   b62e0:	f7ff fa29 	bl	b5736 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b62e4:	792b      	ldrb	r3, [r5, #4]
   b62e6:	079b      	lsls	r3, r3, #30
   b62e8:	d508      	bpl.n	b62fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b62ea:	213a      	movs	r1, #58	; 0x3a
   b62ec:	4620      	mov	r0, r4
   b62ee:	f7ff fa31 	bl	b5754 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b62f2:	68ea      	ldr	r2, [r5, #12]
   b62f4:	493f      	ldr	r1, [pc, #252]	; (b63f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b62f6:	4620      	mov	r0, r4
   b62f8:	f7ff fa9d 	bl	b5836 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b62fc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b62fe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6300:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6304:	68db      	ldr	r3, [r3, #12]
   b6306:	bf14      	ite	ne
   b6308:	493b      	ldrne	r1, [pc, #236]	; (b63f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b630a:	493c      	ldreq	r1, [pc, #240]	; (b63fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b630c:	2202      	movs	r2, #2
            write(": ", 2);
   b630e:	4620      	mov	r0, r4
   b6310:	4798      	blx	r3
    if (attr.has_function) {
   b6312:	792b      	ldrb	r3, [r5, #4]
   b6314:	0758      	lsls	r0, r3, #29
   b6316:	d51d      	bpl.n	b6354 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6318:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b631a:	460b      	mov	r3, r1
   b631c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b631e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6322:	b160      	cbz	r0, b633e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6324:	2820      	cmp	r0, #32
   b6326:	d108      	bne.n	b633a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6328:	4619      	mov	r1, r3
   b632a:	e7f7      	b.n	b631c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b632c:	4834      	ldr	r0, [pc, #208]	; (b6400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b632e:	f000 fc24 	bl	b6b7a <_ZN5spark12NetworkClass9listeningEv>
   b6332:	2800      	cmp	r0, #0
   b6334:	d0ad      	beq.n	b6292 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b633a:	2828      	cmp	r0, #40	; 0x28
   b633c:	d1ee      	bne.n	b631c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b633e:	6823      	ldr	r3, [r4, #0]
   b6340:	1a52      	subs	r2, r2, r1
   b6342:	68db      	ldr	r3, [r3, #12]
   b6344:	4620      	mov	r0, r4
   b6346:	4798      	blx	r3
        write("(): ", 4);
   b6348:	6823      	ldr	r3, [r4, #0]
   b634a:	492e      	ldr	r1, [pc, #184]	; (b6404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b634c:	68db      	ldr	r3, [r3, #12]
   b634e:	2204      	movs	r2, #4
   b6350:	4620      	mov	r0, r4
   b6352:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6354:	2100      	movs	r1, #0
   b6356:	4638      	mov	r0, r7
   b6358:	f7fe fedc 	bl	b5114 <log_level_name>
   b635c:	4601      	mov	r1, r0
    write(s);
   b635e:	4620      	mov	r0, r4
   b6360:	f7ff f9e9 	bl	b5736 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6364:	6823      	ldr	r3, [r4, #0]
   b6366:	4925      	ldr	r1, [pc, #148]	; (b63fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6368:	68db      	ldr	r3, [r3, #12]
   b636a:	2202      	movs	r2, #2
   b636c:	4620      	mov	r0, r4
   b636e:	4798      	blx	r3
    if (msg) {
   b6370:	b11e      	cbz	r6, b637a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6372:	4631      	mov	r1, r6
   b6374:	4620      	mov	r0, r4
   b6376:	f7ff f9de 	bl	b5736 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b637a:	792b      	ldrb	r3, [r5, #4]
   b637c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6380:	d02c      	beq.n	b63dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6382:	6823      	ldr	r3, [r4, #0]
   b6384:	4920      	ldr	r1, [pc, #128]	; (b6408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6386:	68db      	ldr	r3, [r3, #12]
   b6388:	2202      	movs	r2, #2
   b638a:	4620      	mov	r0, r4
   b638c:	4798      	blx	r3
        if (attr.has_code) {
   b638e:	792b      	ldrb	r3, [r5, #4]
   b6390:	06d9      	lsls	r1, r3, #27
   b6392:	d50a      	bpl.n	b63aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6394:	6823      	ldr	r3, [r4, #0]
   b6396:	491d      	ldr	r1, [pc, #116]	; (b640c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6398:	68db      	ldr	r3, [r3, #12]
   b639a:	2207      	movs	r2, #7
   b639c:	4620      	mov	r0, r4
   b639e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b63a0:	69aa      	ldr	r2, [r5, #24]
   b63a2:	491b      	ldr	r1, [pc, #108]	; (b6410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b63a4:	4620      	mov	r0, r4
   b63a6:	f7ff fa46 	bl	b5836 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b63aa:	792b      	ldrb	r3, [r5, #4]
   b63ac:	069a      	lsls	r2, r3, #26
   b63ae:	d511      	bpl.n	b63d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b63b0:	06db      	lsls	r3, r3, #27
   b63b2:	d505      	bpl.n	b63c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b63b4:	6823      	ldr	r3, [r4, #0]
   b63b6:	4910      	ldr	r1, [pc, #64]	; (b63f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b63b8:	68db      	ldr	r3, [r3, #12]
   b63ba:	2202      	movs	r2, #2
   b63bc:	4620      	mov	r0, r4
   b63be:	4798      	blx	r3
            write("details = ", 10);
   b63c0:	6823      	ldr	r3, [r4, #0]
   b63c2:	4914      	ldr	r1, [pc, #80]	; (b6414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b63c4:	68db      	ldr	r3, [r3, #12]
   b63c6:	4620      	mov	r0, r4
   b63c8:	220a      	movs	r2, #10
   b63ca:	4798      	blx	r3
            write(attr.details);
   b63cc:	69e9      	ldr	r1, [r5, #28]
   b63ce:	4620      	mov	r0, r4
   b63d0:	f7ff f9b1 	bl	b5736 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b63d4:	215d      	movs	r1, #93	; 0x5d
   b63d6:	4620      	mov	r0, r4
   b63d8:	f7ff f9bc 	bl	b5754 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b63dc:	6823      	ldr	r3, [r4, #0]
   b63de:	490e      	ldr	r1, [pc, #56]	; (b6418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b63e0:	68db      	ldr	r3, [r3, #12]
   b63e2:	4620      	mov	r0, r4
   b63e4:	2202      	movs	r2, #2
}
   b63e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b63ea:	4718      	bx	r3
   b63ec:	000b764d 	.word	0x000b764d
   b63f0:	000b7654 	.word	0x000b7654
   b63f4:	000b7657 	.word	0x000b7657
   b63f8:	000b765a 	.word	0x000b765a
   b63fc:	000b765f 	.word	0x000b765f
   b6400:	2003e720 	.word	0x2003e720
   b6404:	000b765d 	.word	0x000b765d
   b6408:	000b7662 	.word	0x000b7662
   b640c:	000b7665 	.word	0x000b7665
   b6410:	000b766d 	.word	0x000b766d
   b6414:	000b7670 	.word	0x000b7670
   b6418:	000b767b 	.word	0x000b767b

000b641c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6420:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6422:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6424:	460d      	mov	r5, r1
   b6426:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6428:	f000 fa58 	bl	b68dc <_Z16_fetch_usbserialv>
   b642c:	4287      	cmp	r7, r0
   b642e:	d007      	beq.n	b6440 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6430:	6a20      	ldr	r0, [r4, #32]
   b6432:	6803      	ldr	r3, [r0, #0]
   b6434:	4632      	mov	r2, r6
   b6436:	4629      	mov	r1, r5
   b6438:	68db      	ldr	r3, [r3, #12]
}
   b643a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b643e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6440:	4803      	ldr	r0, [pc, #12]	; (b6450 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6442:	f000 fb9a 	bl	b6b7a <_ZN5spark12NetworkClass9listeningEv>
   b6446:	2800      	cmp	r0, #0
   b6448:	d0f2      	beq.n	b6430 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b644a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b644e:	bf00      	nop
   b6450:	2003e720 	.word	0x2003e720

000b6454 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6458:	b085      	sub	sp, #20
    return stream_;
   b645a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b645e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6460:	4605      	mov	r5, r0
   b6462:	460f      	mov	r7, r1
   b6464:	4690      	mov	r8, r2
   b6466:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6468:	f000 fa38 	bl	b68dc <_Z16_fetch_usbserialv>
   b646c:	4581      	cmp	r9, r0
   b646e:	d105      	bne.n	b647c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6470:	4849      	ldr	r0, [pc, #292]	; (b6598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6472:	f000 fb82 	bl	b6b7a <_ZN5spark12NetworkClass9listeningEv>
   b6476:	2800      	cmp	r0, #0
   b6478:	f040 808a 	bne.w	b6590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b647c:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b647e:	4a47      	ldr	r2, [pc, #284]	; (b659c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6480:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b6482:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6486:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b6488:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b648c:	f88d 9004 	strb.w	r9, [sp, #4]
   b6490:	f000 fd37 	bl	b6f02 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6494:	4649      	mov	r1, r9
   b6496:	4640      	mov	r0, r8
   b6498:	f7fe fe3c 	bl	b5114 <log_level_name>
    json.name("l", 1).value(s);
   b649c:	4940      	ldr	r1, [pc, #256]	; (b65a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b649e:	4680      	mov	r8, r0
   b64a0:	2201      	movs	r2, #1
   b64a2:	4668      	mov	r0, sp
   b64a4:	f000 fdbc 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b64a8:	4641      	mov	r1, r8
   b64aa:	f7ff f936 	bl	b571a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b64ae:	b13f      	cbz	r7, b64c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b64b0:	493c      	ldr	r1, [pc, #240]	; (b65a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b64b2:	2201      	movs	r2, #1
   b64b4:	4668      	mov	r0, sp
   b64b6:	f000 fdb3 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b64ba:	4639      	mov	r1, r7
   b64bc:	f7ff f92d 	bl	b571a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b64c0:	b13e      	cbz	r6, b64d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b64c2:	4939      	ldr	r1, [pc, #228]	; (b65a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b64c4:	2201      	movs	r2, #1
   b64c6:	4668      	mov	r0, sp
   b64c8:	f000 fdaa 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b64cc:	4631      	mov	r1, r6
   b64ce:	f7ff f924 	bl	b571a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b64d2:	7923      	ldrb	r3, [r4, #4]
   b64d4:	07df      	lsls	r7, r3, #31
   b64d6:	d50e      	bpl.n	b64f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b64d8:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b64da:	212f      	movs	r1, #47	; 0x2f
   b64dc:	4630      	mov	r0, r6
   b64de:	f000 ff36 	bl	b734e <strrchr>
    if (s1) {
   b64e2:	b100      	cbz	r0, b64e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b64e4:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b64e6:	4931      	ldr	r1, [pc, #196]	; (b65ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b64e8:	2201      	movs	r2, #1
   b64ea:	4668      	mov	r0, sp
   b64ec:	f000 fd98 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b64f0:	4631      	mov	r1, r6
   b64f2:	f7ff f912 	bl	b571a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b64f6:	7923      	ldrb	r3, [r4, #4]
   b64f8:	079e      	lsls	r6, r3, #30
   b64fa:	d507      	bpl.n	b650c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b64fc:	492c      	ldr	r1, [pc, #176]	; (b65b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b64fe:	2202      	movs	r2, #2
   b6500:	4668      	mov	r0, sp
   b6502:	f000 fd8d 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b6506:	68e1      	ldr	r1, [r4, #12]
   b6508:	f000 fd08 	bl	b6f1c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b650c:	7923      	ldrb	r3, [r4, #4]
   b650e:	0758      	lsls	r0, r3, #29
   b6510:	d514      	bpl.n	b653c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6512:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6514:	4633      	mov	r3, r6
   b6516:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6518:	f813 2b01 	ldrb.w	r2, [r3], #1
   b651c:	b12a      	cbz	r2, b652a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b651e:	2a20      	cmp	r2, #32
   b6520:	d101      	bne.n	b6526 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b6522:	461e      	mov	r6, r3
   b6524:	e7f7      	b.n	b6516 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b6526:	2a28      	cmp	r2, #40	; 0x28
   b6528:	d1f5      	bne.n	b6516 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b652a:	4922      	ldr	r1, [pc, #136]	; (b65b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b652c:	2202      	movs	r2, #2
   b652e:	4668      	mov	r0, sp
   b6530:	f000 fd76 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b6534:	1bba      	subs	r2, r7, r6
   b6536:	4631      	mov	r1, r6
   b6538:	f000 fd82 	bl	b7040 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b653c:	7923      	ldrb	r3, [r4, #4]
   b653e:	0719      	lsls	r1, r3, #28
   b6540:	d507      	bpl.n	b6552 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b6542:	491d      	ldr	r1, [pc, #116]	; (b65b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6544:	2201      	movs	r2, #1
   b6546:	4668      	mov	r0, sp
   b6548:	f000 fd6a 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b654c:	6961      	ldr	r1, [r4, #20]
   b654e:	f000 fcf7 	bl	b6f40 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6552:	7923      	ldrb	r3, [r4, #4]
   b6554:	06da      	lsls	r2, r3, #27
   b6556:	d507      	bpl.n	b6568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6558:	4918      	ldr	r1, [pc, #96]	; (b65bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b655a:	2204      	movs	r2, #4
   b655c:	4668      	mov	r0, sp
   b655e:	f000 fd5f 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b6562:	69a1      	ldr	r1, [r4, #24]
   b6564:	f000 fcda 	bl	b6f1c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6568:	7923      	ldrb	r3, [r4, #4]
   b656a:	069b      	lsls	r3, r3, #26
   b656c:	d507      	bpl.n	b657e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b656e:	4914      	ldr	r1, [pc, #80]	; (b65c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6570:	2206      	movs	r2, #6
   b6572:	4668      	mov	r0, sp
   b6574:	f000 fd54 	bl	b7020 <_ZN5spark10JSONWriter4nameEPKcj>
   b6578:	69e1      	ldr	r1, [r4, #28]
   b657a:	f7ff f8ce 	bl	b571a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b657e:	4668      	mov	r0, sp
   b6580:	f000 fca9 	bl	b6ed6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6584:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6586:	490f      	ldr	r1, [pc, #60]	; (b65c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6588:	6803      	ldr	r3, [r0, #0]
   b658a:	2202      	movs	r2, #2
   b658c:	68db      	ldr	r3, [r3, #12]
   b658e:	4798      	blx	r3
}
   b6590:	b005      	add	sp, #20
   b6592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6596:	bf00      	nop
   b6598:	2003e720 	.word	0x2003e720
   b659c:	000b7610 	.word	0x000b7610
   b65a0:	000b762a 	.word	0x000b762a
   b65a4:	000b767e 	.word	0x000b767e
   b65a8:	000b78dc 	.word	0x000b78dc
   b65ac:	000b758b 	.word	0x000b758b
   b65b0:	000b7680 	.word	0x000b7680
   b65b4:	000b7683 	.word	0x000b7683
   b65b8:	000b7686 	.word	0x000b7686
   b65bc:	000b7688 	.word	0x000b7688
   b65c0:	000b768d 	.word	0x000b768d
   b65c4:	000b767b 	.word	0x000b767b

000b65c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b65c8:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b65ca:	681a      	ldr	r2, [r3, #0]
   b65cc:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b65ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b65d0:	4770      	bx	lr
   b65d2:	bf00      	nop
   b65d4:	2003e5cc 	.word	0x2003e5cc
   b65d8:	2003e6bc 	.word	0x2003e6bc

000b65dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b65dc:	2100      	movs	r1, #0
   b65de:	f7fe bdb1 	b.w	b5144 <system_delay_ms>
	...

000b65e4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b65e4:	4b01      	ldr	r3, [pc, #4]	; (b65ec <_GLOBAL__sub_I_RGB+0x8>)
   b65e6:	2200      	movs	r2, #0
   b65e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b65ea:	4770      	bx	lr
   b65ec:	2003e6c0 	.word	0x2003e6c0

000b65f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b65f0:	4b01      	ldr	r3, [pc, #4]	; (b65f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b65f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b65f4:	4770      	bx	lr
   b65f6:	bf00      	nop
   b65f8:	2003e5d0 	.word	0x2003e5d0

000b65fc <serialEventRun>:
{
   b65fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b65fe:	4b0b      	ldr	r3, [pc, #44]	; (b662c <serialEventRun+0x30>)
   b6600:	b143      	cbz	r3, b6614 <serialEventRun+0x18>
   b6602:	f000 f96b 	bl	b68dc <_Z16_fetch_usbserialv>
   b6606:	6803      	ldr	r3, [r0, #0]
   b6608:	691b      	ldr	r3, [r3, #16]
   b660a:	4798      	blx	r3
   b660c:	2800      	cmp	r0, #0
   b660e:	dd01      	ble.n	b6614 <serialEventRun+0x18>
        serialEvent();
   b6610:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6614:	4b06      	ldr	r3, [pc, #24]	; (b6630 <serialEventRun+0x34>)
   b6616:	b143      	cbz	r3, b662a <serialEventRun+0x2e>
   b6618:	f000 fd92 	bl	b7140 <_Z22__fetch_global_Serial1v>
   b661c:	6803      	ldr	r3, [r0, #0]
   b661e:	691b      	ldr	r3, [r3, #16]
   b6620:	4798      	blx	r3
   b6622:	2800      	cmp	r0, #0
   b6624:	dd01      	ble.n	b662a <serialEventRun+0x2e>
        serialEvent1();
   b6626:	f3af 8000 	nop.w
}
   b662a:	bd08      	pop	{r3, pc}
	...

000b6634 <_post_loop>:
{
   b6634:	b508      	push	{r3, lr}
	serialEventRun();
   b6636:	f7ff ffe1 	bl	b65fc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b663a:	f7fe fc5b 	bl	b4ef4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b663e:	4b01      	ldr	r3, [pc, #4]	; (b6644 <_post_loop+0x10>)
   b6640:	6018      	str	r0, [r3, #0]
}
   b6642:	bd08      	pop	{r3, pc}
   b6644:	2003e74c 	.word	0x2003e74c

000b6648 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6648:	4805      	ldr	r0, [pc, #20]	; (b6660 <_Z33system_initialize_user_backup_ramv+0x18>)
   b664a:	4a06      	ldr	r2, [pc, #24]	; (b6664 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b664c:	4906      	ldr	r1, [pc, #24]	; (b6668 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b664e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6650:	1a12      	subs	r2, r2, r0
   b6652:	f000 fdeb 	bl	b722c <memcpy>
    __backup_sram_signature = signature;
   b6656:	4b05      	ldr	r3, [pc, #20]	; (b666c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6658:	4a05      	ldr	r2, [pc, #20]	; (b6670 <_Z33system_initialize_user_backup_ramv+0x28>)
   b665a:	601a      	str	r2, [r3, #0]
}
   b665c:	bd08      	pop	{r3, pc}
   b665e:	bf00      	nop
   b6660:	2003f400 	.word	0x2003f400
   b6664:	2003f404 	.word	0x2003f404
   b6668:	000b7a9c 	.word	0x000b7a9c
   b666c:	2003f400 	.word	0x2003f400
   b6670:	9a271c1e 	.word	0x9a271c1e

000b6674 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6674:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6676:	2300      	movs	r3, #0
   b6678:	9300      	str	r3, [sp, #0]
   b667a:	461a      	mov	r2, r3
   b667c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6680:	f7fe fd7a 	bl	b5178 <system_ctrl_set_result>
}
   b6684:	b003      	add	sp, #12
   b6686:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b668c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b668c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b668e:	8843      	ldrh	r3, [r0, #2]
   b6690:	2b0a      	cmp	r3, #10
   b6692:	d008      	beq.n	b66a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6694:	2b50      	cmp	r3, #80	; 0x50
   b6696:	d10b      	bne.n	b66b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6698:	4b09      	ldr	r3, [pc, #36]	; (b66c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b669a:	681b      	ldr	r3, [r3, #0]
   b669c:	b14b      	cbz	r3, b66b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b669e:	b003      	add	sp, #12
   b66a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b66a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b66a6:	f7ff ffe5 	bl	b6674 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b66aa:	b003      	add	sp, #12
   b66ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b66b0:	2300      	movs	r3, #0
   b66b2:	9300      	str	r3, [sp, #0]
   b66b4:	461a      	mov	r2, r3
   b66b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b66ba:	f7fe fd5d 	bl	b5178 <system_ctrl_set_result>
}
   b66be:	e7f4      	b.n	b66aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b66c0:	2003e6d4 	.word	0x2003e6d4

000b66c4 <module_user_init_hook>:
{
   b66c4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b66c6:	4812      	ldr	r0, [pc, #72]	; (b6710 <module_user_init_hook+0x4c>)
   b66c8:	2100      	movs	r1, #0
   b66ca:	f7fe fe07 	bl	b52dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b66ce:	4b11      	ldr	r3, [pc, #68]	; (b6714 <module_user_init_hook+0x50>)
   b66d0:	681a      	ldr	r2, [r3, #0]
   b66d2:	4b11      	ldr	r3, [pc, #68]	; (b6718 <module_user_init_hook+0x54>)
   b66d4:	429a      	cmp	r2, r3
   b66d6:	4b11      	ldr	r3, [pc, #68]	; (b671c <module_user_init_hook+0x58>)
   b66d8:	bf0c      	ite	eq
   b66da:	2201      	moveq	r2, #1
   b66dc:	2200      	movne	r2, #0
   b66de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b66e0:	d001      	beq.n	b66e6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b66e2:	f7ff ffb1 	bl	b6648 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b66e6:	f7fe fbf5 	bl	b4ed4 <HAL_RNG_GetRandomNumber>
   b66ea:	4604      	mov	r4, r0
    srand(seed);
   b66ec:	f000 fdce 	bl	b728c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b66f0:	4b0b      	ldr	r3, [pc, #44]	; (b6720 <module_user_init_hook+0x5c>)
   b66f2:	b113      	cbz	r3, b66fa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b66f4:	4620      	mov	r0, r4
   b66f6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b66fa:	2100      	movs	r1, #0
   b66fc:	4808      	ldr	r0, [pc, #32]	; (b6720 <module_user_init_hook+0x5c>)
   b66fe:	f7fe fdb5 	bl	b526c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6706:	4807      	ldr	r0, [pc, #28]	; (b6724 <module_user_init_hook+0x60>)
   b6708:	2100      	movs	r1, #0
   b670a:	f7fe bd2b 	b.w	b5164 <system_ctrl_set_app_request_handler>
   b670e:	bf00      	nop
   b6710:	000b65f1 	.word	0x000b65f1
   b6714:	2003f400 	.word	0x2003f400
   b6718:	9a271c1e 	.word	0x9a271c1e
   b671c:	2003e6d0 	.word	0x2003e6d0
   b6720:	00000000 	.word	0x00000000
   b6724:	000b668d 	.word	0x000b668d

000b6728 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6728:	4770      	bx	lr

000b672a <_ZN9IPAddressD0Ev>:
   b672a:	b510      	push	{r4, lr}
   b672c:	2118      	movs	r1, #24
   b672e:	4604      	mov	r4, r0
   b6730:	f7fe f9cb 	bl	b4aca <_ZdlPvj>
   b6734:	4620      	mov	r0, r4
   b6736:	bd10      	pop	{r4, pc}

000b6738 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6738:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b673a:	7d03      	ldrb	r3, [r0, #20]
   b673c:	2b06      	cmp	r3, #6
{
   b673e:	b08d      	sub	sp, #52	; 0x34
   b6740:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6742:	f100 0704 	add.w	r7, r0, #4
   b6746:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b674a:	d012      	beq.n	b6772 <_ZNK9IPAddress7printToER5Print+0x3a>
   b674c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6750:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6754:	220a      	movs	r2, #10
   b6756:	4630      	mov	r0, r6
   b6758:	f7fe ff4b 	bl	b55f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b675c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b675e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6760:	d019      	beq.n	b6796 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6762:	2c00      	cmp	r4, #0
   b6764:	d0f4      	beq.n	b6750 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6766:	212e      	movs	r1, #46	; 0x2e
   b6768:	4630      	mov	r0, r6
   b676a:	f7fe ff33 	bl	b55d4 <_ZN5Print5printEc>
   b676e:	4404      	add	r4, r0
   b6770:	e7ee      	b.n	b6750 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6772:	232f      	movs	r3, #47	; 0x2f
   b6774:	466a      	mov	r2, sp
   b6776:	4639      	mov	r1, r7
   b6778:	200a      	movs	r0, #10
		buf[0] = 0;
   b677a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b677e:	f7fe fbe1 	bl	b4f44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6782:	4668      	mov	r0, sp
   b6784:	f7fe f95a 	bl	b4a3c <strlen>
   b6788:	6833      	ldr	r3, [r6, #0]
   b678a:	4602      	mov	r2, r0
   b678c:	68db      	ldr	r3, [r3, #12]
   b678e:	4669      	mov	r1, sp
   b6790:	4630      	mov	r0, r6
   b6792:	4798      	blx	r3
   b6794:	4604      	mov	r4, r0
    }
    return n;
}
   b6796:	4620      	mov	r0, r4
   b6798:	b00d      	add	sp, #52	; 0x34
   b679a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b679c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b679c:	b510      	push	{r4, lr}
   b679e:	4b05      	ldr	r3, [pc, #20]	; (b67b4 <_ZN9IPAddressC1Ev+0x18>)
   b67a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b67a2:	2211      	movs	r2, #17
   b67a4:	f840 3b04 	str.w	r3, [r0], #4
   b67a8:	2100      	movs	r1, #0
   b67aa:	f000 fd67 	bl	b727c <memset>
}
   b67ae:	4620      	mov	r0, r4
   b67b0:	bd10      	pop	{r4, pc}
   b67b2:	bf00      	nop
   b67b4:	000b7718 	.word	0x000b7718

000b67b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b67b8:	4603      	mov	r3, r0
   b67ba:	4a07      	ldr	r2, [pc, #28]	; (b67d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b67bc:	b510      	push	{r4, lr}
   b67be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b67c2:	f101 0210 	add.w	r2, r1, #16
   b67c6:	f851 4b04 	ldr.w	r4, [r1], #4
   b67ca:	f843 4b04 	str.w	r4, [r3], #4
   b67ce:	4291      	cmp	r1, r2
   b67d0:	d1f9      	bne.n	b67c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b67d2:	780a      	ldrb	r2, [r1, #0]
   b67d4:	701a      	strb	r2, [r3, #0]
}
   b67d6:	bd10      	pop	{r4, pc}
   b67d8:	000b7718 	.word	0x000b7718

000b67dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b67dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b67de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b67e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b67e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b67ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b67ee:	2304      	movs	r3, #4
   b67f0:	6041      	str	r1, [r0, #4]
   b67f2:	7503      	strb	r3, [r0, #20]
}
   b67f4:	bd10      	pop	{r4, pc}
	...

000b67f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b67f8:	b507      	push	{r0, r1, r2, lr}
   b67fa:	4b06      	ldr	r3, [pc, #24]	; (b6814 <_ZN9IPAddressC1EPKh+0x1c>)
   b67fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b67fe:	78cb      	ldrb	r3, [r1, #3]
   b6800:	9300      	str	r3, [sp, #0]
   b6802:	788b      	ldrb	r3, [r1, #2]
   b6804:	784a      	ldrb	r2, [r1, #1]
   b6806:	7809      	ldrb	r1, [r1, #0]
   b6808:	f7ff ffe8 	bl	b67dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b680c:	b003      	add	sp, #12
   b680e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6812:	bf00      	nop
   b6814:	000b7718 	.word	0x000b7718

000b6818 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6818:	7441      	strb	r1, [r0, #17]
}
   b681a:	4770      	bx	lr

000b681c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b681c:	4770      	bx	lr

000b681e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b681e:	4770      	bx	lr

000b6820 <_ZN9USBSerial4readEv>:
{
   b6820:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6822:	2100      	movs	r1, #0
   b6824:	7c00      	ldrb	r0, [r0, #16]
   b6826:	f7fe fc55 	bl	b50d4 <HAL_USB_USART_Receive_Data>
}
   b682a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b682e:	bd08      	pop	{r3, pc}

000b6830 <_ZN9USBSerial4peekEv>:
{
   b6830:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6832:	2101      	movs	r1, #1
   b6834:	7c00      	ldrb	r0, [r0, #16]
   b6836:	f7fe fc4d 	bl	b50d4 <HAL_USB_USART_Receive_Data>
}
   b683a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b683e:	bd08      	pop	{r3, pc}

000b6840 <_ZN9USBSerial17availableForWriteEv>:
{
   b6840:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6842:	7c00      	ldrb	r0, [r0, #16]
   b6844:	f7fe fc3e 	bl	b50c4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6848:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b684c:	bd08      	pop	{r3, pc}

000b684e <_ZN9USBSerial9availableEv>:
{
   b684e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6850:	7c00      	ldrb	r0, [r0, #16]
   b6852:	f7fe fc2f 	bl	b50b4 <HAL_USB_USART_Available_Data>
}
   b6856:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b685a:	bd08      	pop	{r3, pc}

000b685c <_ZN9USBSerial5writeEh>:
{
   b685c:	b513      	push	{r0, r1, r4, lr}
   b685e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6860:	7c00      	ldrb	r0, [r0, #16]
{
   b6862:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6864:	f7fe fc2e 	bl	b50c4 <HAL_USB_USART_Available_Data_For_Write>
   b6868:	2800      	cmp	r0, #0
   b686a:	9901      	ldr	r1, [sp, #4]
   b686c:	dc01      	bgt.n	b6872 <_ZN9USBSerial5writeEh+0x16>
   b686e:	7c60      	ldrb	r0, [r4, #17]
   b6870:	b120      	cbz	r0, b687c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6872:	7c20      	ldrb	r0, [r4, #16]
   b6874:	f7fe fc36 	bl	b50e4 <HAL_USB_USART_Send_Data>
   b6878:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b687c:	b002      	add	sp, #8
   b687e:	bd10      	pop	{r4, pc}

000b6880 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6880:	7c00      	ldrb	r0, [r0, #16]
   b6882:	f7fe bc37 	b.w	b50f4 <HAL_USB_USART_Flush_Data>

000b6886 <_ZN9USBSerialD0Ev>:
   b6886:	b510      	push	{r4, lr}
   b6888:	2114      	movs	r1, #20
   b688a:	4604      	mov	r4, r0
   b688c:	f7fe f91d 	bl	b4aca <_ZdlPvj>
   b6890:	4620      	mov	r0, r4
   b6892:	bd10      	pop	{r4, pc}

000b6894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6894:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b689a:	4604      	mov	r4, r0
   b689c:	4608      	mov	r0, r1
   b689e:	2100      	movs	r1, #0
   b68a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b68a4:	4b04      	ldr	r3, [pc, #16]	; (b68b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b68a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b68a8:	2301      	movs	r3, #1
  _serial = serial;
   b68aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b68ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b68ae:	4611      	mov	r1, r2
   b68b0:	f7fe fbe8 	bl	b5084 <HAL_USB_USART_Init>
}
   b68b4:	4620      	mov	r0, r4
   b68b6:	bd10      	pop	{r4, pc}
   b68b8:	000b772c 	.word	0x000b772c

000b68bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b68bc:	7c00      	ldrb	r0, [r0, #16]
   b68be:	2200      	movs	r2, #0
   b68c0:	f7fe bbe8 	b.w	b5094 <HAL_USB_USART_Begin>

000b68c4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b68c4:	7c00      	ldrb	r0, [r0, #16]
   b68c6:	f7fe bbed 	b.w	b50a4 <HAL_USB_USART_End>

000b68ca <_Z19acquireSerialBufferv>:
{
   b68ca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b68cc:	2214      	movs	r2, #20
{
   b68ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b68d0:	2100      	movs	r1, #0
   b68d2:	f000 fcd3 	bl	b727c <memset>
}
   b68d6:	4620      	mov	r0, r4
   b68d8:	bd10      	pop	{r4, pc}
	...

000b68dc <_Z16_fetch_usbserialv>:
{
   b68dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68de:	4c0f      	ldr	r4, [pc, #60]	; (b691c <_Z16_fetch_usbserialv+0x40>)
{
   b68e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b68e2:	a803      	add	r0, sp, #12
   b68e4:	f7ff fff1 	bl	b68ca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68e8:	7821      	ldrb	r1, [r4, #0]
   b68ea:	f3bf 8f5b 	dmb	ish
   b68ee:	f011 0101 	ands.w	r1, r1, #1
   b68f2:	d10f      	bne.n	b6914 <_Z16_fetch_usbserialv+0x38>
   b68f4:	4620      	mov	r0, r4
   b68f6:	9101      	str	r1, [sp, #4]
   b68f8:	f7fe f8f6 	bl	b4ae8 <__cxa_guard_acquire>
   b68fc:	9901      	ldr	r1, [sp, #4]
   b68fe:	b148      	cbz	r0, b6914 <_Z16_fetch_usbserialv+0x38>
   b6900:	aa03      	add	r2, sp, #12
   b6902:	4807      	ldr	r0, [pc, #28]	; (b6920 <_Z16_fetch_usbserialv+0x44>)
   b6904:	f7ff ffc6 	bl	b6894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6908:	4620      	mov	r0, r4
   b690a:	f7fe f8f2 	bl	b4af2 <__cxa_guard_release>
   b690e:	4805      	ldr	r0, [pc, #20]	; (b6924 <_Z16_fetch_usbserialv+0x48>)
   b6910:	f000 fc7e 	bl	b7210 <atexit>
	return _usbserial;
}
   b6914:	4802      	ldr	r0, [pc, #8]	; (b6920 <_Z16_fetch_usbserialv+0x44>)
   b6916:	b008      	add	sp, #32
   b6918:	bd10      	pop	{r4, pc}
   b691a:	bf00      	nop
   b691c:	2003e6d8 	.word	0x2003e6d8
   b6920:	2003e6dc 	.word	0x2003e6dc
   b6924:	000b681d 	.word	0x000b681d

000b6928 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6928:	2200      	movs	r2, #0
   b692a:	6840      	ldr	r0, [r0, #4]
   b692c:	4611      	mov	r1, r2
   b692e:	f7fe bc45 	b.w	b51bc <network_ready>

000b6932 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6932:	2200      	movs	r2, #0
   b6934:	6840      	ldr	r0, [r0, #4]
   b6936:	4611      	mov	r1, r2
   b6938:	f7fe bc60 	b.w	b51fc <network_listening>

000b693c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b693c:	2200      	movs	r2, #0
   b693e:	6840      	ldr	r0, [r0, #4]
   b6940:	4611      	mov	r1, r2
   b6942:	f7fe bc6b 	b.w	b521c <network_get_listen_timeout>

000b6946 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6946:	6840      	ldr	r0, [r0, #4]
   b6948:	2200      	movs	r2, #0
   b694a:	f7fe bc5f 	b.w	b520c <network_set_listen_timeout>

000b694e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b694e:	6840      	ldr	r0, [r0, #4]
   b6950:	2200      	movs	r2, #0
   b6952:	f081 0101 	eor.w	r1, r1, #1
   b6956:	f7fe bc49 	b.w	b51ec <network_listen>

000b695a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b695a:	2300      	movs	r3, #0
   b695c:	6840      	ldr	r0, [r0, #4]
   b695e:	461a      	mov	r2, r3
   b6960:	4619      	mov	r1, r3
   b6962:	f7fe bc3b 	b.w	b51dc <network_off>

000b6966 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6966:	2300      	movs	r3, #0
   b6968:	6840      	ldr	r0, [r0, #4]
   b696a:	461a      	mov	r2, r3
   b696c:	4619      	mov	r1, r3
   b696e:	f7fe bc2d 	b.w	b51cc <network_on>

000b6972 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6972:	2200      	movs	r2, #0
   b6974:	6840      	ldr	r0, [r0, #4]
   b6976:	4611      	mov	r1, r2
   b6978:	f7fe bc10 	b.w	b519c <network_connecting>

000b697c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b697c:	6840      	ldr	r0, [r0, #4]
   b697e:	2200      	movs	r2, #0
   b6980:	2102      	movs	r1, #2
   b6982:	f7fe bc13 	b.w	b51ac <network_disconnect>

000b6986 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6986:	2300      	movs	r3, #0
   b6988:	6840      	ldr	r0, [r0, #4]
   b698a:	461a      	mov	r2, r3
   b698c:	f7fe bbfe 	b.w	b518c <network_connect>

000b6990 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6990:	4b08      	ldr	r3, [pc, #32]	; (b69b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6992:	b510      	push	{r4, lr}
   b6994:	2428      	movs	r4, #40	; 0x28
   b6996:	4622      	mov	r2, r4
   b6998:	4618      	mov	r0, r3
   b699a:	2100      	movs	r1, #0
   b699c:	f000 fc6e 	bl	b727c <memset>
   b69a0:	4b05      	ldr	r3, [pc, #20]	; (b69b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b69a2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b69a4:	f04f 32ff 	mov.w	r2, #4294967295
   b69a8:	6042      	str	r2, [r0, #4]
   b69aa:	2204      	movs	r2, #4
   b69ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b69ae:	4a03      	ldr	r2, [pc, #12]	; (b69bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b69b0:	601a      	str	r2, [r3, #0]
   b69b2:	bd10      	pop	{r4, pc}
   b69b4:	2003e6f8 	.word	0x2003e6f8
   b69b8:	2003e6f0 	.word	0x2003e6f0
   b69bc:	000b7760 	.word	0x000b7760

000b69c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b69c0:	4770      	bx	lr

000b69c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b69c2:	7441      	strb	r1, [r0, #17]
}
   b69c4:	4770      	bx	lr

000b69c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b69c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b69c8:	7c00      	ldrb	r0, [r0, #16]
   b69ca:	f7fe fafb 	bl	b4fc4 <hal_usart_available_data_for_write>
}
   b69ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69d2:	bd08      	pop	{r3, pc}

000b69d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b69d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b69d6:	7c00      	ldrb	r0, [r0, #16]
   b69d8:	f7fe facc 	bl	b4f74 <hal_usart_available>
}
   b69dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69e0:	bd08      	pop	{r3, pc}

000b69e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b69e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b69e4:	7c00      	ldrb	r0, [r0, #16]
   b69e6:	f7fe fad5 	bl	b4f94 <hal_usart_peek>
}
   b69ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69ee:	bd08      	pop	{r3, pc}

000b69f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b69f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b69f2:	7c00      	ldrb	r0, [r0, #16]
   b69f4:	f7fe fac6 	bl	b4f84 <hal_usart_read>
}
   b69f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69fc:	bd08      	pop	{r3, pc}

000b69fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b69fe:	7c00      	ldrb	r0, [r0, #16]
   b6a00:	f7fe bad0 	b.w	b4fa4 <hal_usart_flush>

000b6a04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a06:	7c45      	ldrb	r5, [r0, #17]
{
   b6a08:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a0a:	b12d      	cbz	r5, b6a18 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6a0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6a0e:	b003      	add	sp, #12
   b6a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6a14:	f7fe baa6 	b.w	b4f64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a18:	7c00      	ldrb	r0, [r0, #16]
   b6a1a:	9101      	str	r1, [sp, #4]
   b6a1c:	f7fe fad2 	bl	b4fc4 <hal_usart_available_data_for_write>
   b6a20:	2800      	cmp	r0, #0
   b6a22:	9901      	ldr	r1, [sp, #4]
   b6a24:	dcf2      	bgt.n	b6a0c <_ZN11USARTSerial5writeEh+0x8>
}
   b6a26:	4628      	mov	r0, r5
   b6a28:	b003      	add	sp, #12
   b6a2a:	bd30      	pop	{r4, r5, pc}

000b6a2c <_ZN11USARTSerialD0Ev>:
   b6a2c:	b510      	push	{r4, lr}
   b6a2e:	2114      	movs	r1, #20
   b6a30:	4604      	mov	r4, r0
   b6a32:	f7fe f84a 	bl	b4aca <_ZdlPvj>
   b6a36:	4620      	mov	r0, r4
   b6a38:	bd10      	pop	{r4, pc}
	...

000b6a3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6a3c:	b510      	push	{r4, lr}
   b6a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a42:	4604      	mov	r4, r0
   b6a44:	4608      	mov	r0, r1
   b6a46:	4611      	mov	r1, r2
   b6a48:	2200      	movs	r2, #0
   b6a4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a4e:	4b04      	ldr	r3, [pc, #16]	; (b6a60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6a50:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6a52:	2301      	movs	r3, #1
  _serial = serial;
   b6a54:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6a56:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6a58:	f7fe fac4 	bl	b4fe4 <hal_usart_init_ex>
}
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	bd10      	pop	{r4, pc}
   b6a60:	000b77a4 	.word	0x000b77a4

000b6a64 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6a64:	7c00      	ldrb	r0, [r0, #16]
   b6a66:	2300      	movs	r3, #0
   b6a68:	f7fe bab4 	b.w	b4fd4 <hal_usart_begin_config>

000b6a6c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6a6c:	2200      	movs	r2, #0
   b6a6e:	f7ff bff9 	b.w	b6a64 <_ZN11USARTSerial5beginEmm>

000b6a72 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b6a72:	7c00      	ldrb	r0, [r0, #16]
   b6a74:	f7fe ba6e 	b.w	b4f54 <hal_usart_end>

000b6a78 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6a78:	4770      	bx	lr

000b6a7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a7c:	4606      	mov	r6, r0
   b6a7e:	4615      	mov	r5, r2
   b6a80:	460c      	mov	r4, r1
   b6a82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6a84:	42bc      	cmp	r4, r7
   b6a86:	d006      	beq.n	b6a96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6a88:	6833      	ldr	r3, [r6, #0]
   b6a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6a8e:	689b      	ldr	r3, [r3, #8]
   b6a90:	4630      	mov	r0, r6
   b6a92:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6a94:	e7f6      	b.n	b6a84 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6a96:	4628      	mov	r0, r5
   b6a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a9a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6a9a:	7c00      	ldrb	r0, [r0, #16]
   b6a9c:	2200      	movs	r2, #0
   b6a9e:	f7fe baa9 	b.w	b4ff4 <hal_i2c_write>

000b6aa2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6aa2:	7c00      	ldrb	r0, [r0, #16]
   b6aa4:	2100      	movs	r1, #0
   b6aa6:	f7fe baad 	b.w	b5004 <hal_i2c_available>

000b6aaa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6aaa:	7c00      	ldrb	r0, [r0, #16]
   b6aac:	2100      	movs	r1, #0
   b6aae:	f7fe bab1 	b.w	b5014 <hal_i2c_read>

000b6ab2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6ab2:	7c00      	ldrb	r0, [r0, #16]
   b6ab4:	2100      	movs	r1, #0
   b6ab6:	f7fe bab5 	b.w	b5024 <hal_i2c_peek>

000b6aba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6aba:	7c00      	ldrb	r0, [r0, #16]
   b6abc:	2100      	movs	r1, #0
   b6abe:	f7fe bab9 	b.w	b5034 <hal_i2c_flush>

000b6ac2 <_ZN7TwoWireD0Ev>:
   b6ac2:	b510      	push	{r4, lr}
   b6ac4:	2114      	movs	r1, #20
   b6ac6:	4604      	mov	r4, r0
   b6ac8:	f7fd ffff 	bl	b4aca <_ZdlPvj>
   b6acc:	4620      	mov	r0, r4
   b6ace:	bd10      	pop	{r4, pc}

000b6ad0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ad0:	b538      	push	{r3, r4, r5, lr}
   b6ad2:	4604      	mov	r4, r0
   b6ad4:	4615      	mov	r5, r2
   b6ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ada:	2200      	movs	r2, #0
   b6adc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6ae0:	4b09      	ldr	r3, [pc, #36]	; (b6b08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6ae2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ae4:	4608      	mov	r0, r1
   b6ae6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6ae8:	4629      	mov	r1, r5
   b6aea:	f7fe fab3 	bl	b5054 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6aee:	30bf      	adds	r0, #191	; 0xbf
   b6af0:	d108      	bne.n	b6b04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6af2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6af4:	07db      	lsls	r3, r3, #31
   b6af6:	d505      	bpl.n	b6b04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6af8:	6868      	ldr	r0, [r5, #4]
   b6afa:	f7fe fbc7 	bl	b528c <free>
    free(conf.tx_buffer);
   b6afe:	68e8      	ldr	r0, [r5, #12]
   b6b00:	f7fe fbc4 	bl	b528c <free>
}
   b6b04:	4620      	mov	r0, r4
   b6b06:	bd38      	pop	{r3, r4, r5, pc}
   b6b08:	000b77d8 	.word	0x000b77d8

000b6b0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6b0c:	2300      	movs	r3, #0
   b6b0e:	6840      	ldr	r0, [r0, #4]
   b6b10:	461a      	mov	r2, r3
   b6b12:	f7fe bb3b 	b.w	b518c <network_connect>

000b6b16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6b16:	6840      	ldr	r0, [r0, #4]
   b6b18:	2200      	movs	r2, #0
   b6b1a:	2102      	movs	r1, #2
   b6b1c:	f7fe bb46 	b.w	b51ac <network_disconnect>

000b6b20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6b20:	2200      	movs	r2, #0
   b6b22:	6840      	ldr	r0, [r0, #4]
   b6b24:	4611      	mov	r1, r2
   b6b26:	f7fe bb39 	b.w	b519c <network_connecting>

000b6b2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6b2a:	2200      	movs	r2, #0
   b6b2c:	6840      	ldr	r0, [r0, #4]
   b6b2e:	4611      	mov	r1, r2
   b6b30:	f7fe bb44 	b.w	b51bc <network_ready>

000b6b34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6b34:	2300      	movs	r3, #0
   b6b36:	6840      	ldr	r0, [r0, #4]
   b6b38:	461a      	mov	r2, r3
   b6b3a:	4619      	mov	r1, r3
   b6b3c:	f7fe bb46 	b.w	b51cc <network_on>

000b6b40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6b40:	2300      	movs	r3, #0
   b6b42:	6840      	ldr	r0, [r0, #4]
   b6b44:	461a      	mov	r2, r3
   b6b46:	4619      	mov	r1, r3
   b6b48:	f7fe bb48 	b.w	b51dc <network_off>

000b6b4c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6b4c:	6840      	ldr	r0, [r0, #4]
   b6b4e:	2100      	movs	r1, #0
   b6b50:	f7fe bb6c 	b.w	b522c <network_is_on>

000b6b54 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6b54:	6840      	ldr	r0, [r0, #4]
   b6b56:	2100      	movs	r1, #0
   b6b58:	f7fe bb70 	b.w	b523c <network_is_off>

000b6b5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6b5c:	6840      	ldr	r0, [r0, #4]
   b6b5e:	2200      	movs	r2, #0
   b6b60:	f081 0101 	eor.w	r1, r1, #1
   b6b64:	f7fe bb42 	b.w	b51ec <network_listen>

000b6b68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6b68:	6840      	ldr	r0, [r0, #4]
   b6b6a:	2200      	movs	r2, #0
   b6b6c:	f7fe bb4e 	b.w	b520c <network_set_listen_timeout>

000b6b70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6b70:	2200      	movs	r2, #0
   b6b72:	6840      	ldr	r0, [r0, #4]
   b6b74:	4611      	mov	r1, r2
   b6b76:	f7fe bb51 	b.w	b521c <network_get_listen_timeout>

000b6b7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6b7a:	2200      	movs	r2, #0
   b6b7c:	6840      	ldr	r0, [r0, #4]
   b6b7e:	4611      	mov	r1, r2
   b6b80:	f7fe bb3c 	b.w	b51fc <network_listening>

000b6b84 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b6b84:	6840      	ldr	r0, [r0, #4]
   b6b86:	2100      	movs	r1, #0
   b6b88:	f7fe bb68 	b.w	b525c <network_is_preferred>

000b6b8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b90:	b095      	sub	sp, #84	; 0x54
   b6b92:	4614      	mov	r4, r2
   b6b94:	460d      	mov	r5, r1
   b6b96:	4607      	mov	r7, r0
    IPAddress addr;
   b6b98:	f7ff fe00 	bl	b679c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6b9c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6b9e:	221c      	movs	r2, #28
   b6ba0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6ba2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6ba4:	f000 fb6a 	bl	b727c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6ba8:	2340      	movs	r3, #64	; 0x40
   b6baa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6bac:	4620      	mov	r0, r4
   b6bae:	466b      	mov	r3, sp
   b6bb0:	aa0c      	add	r2, sp, #48	; 0x30
   b6bb2:	2100      	movs	r1, #0
   b6bb4:	f7fe f976 	bl	b4ea4 <netdb_getaddrinfo>
    if (!r) {
   b6bb8:	4604      	mov	r4, r0
   b6bba:	2800      	cmp	r0, #0
   b6bbc:	d14b      	bne.n	b6c56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6bbe:	4602      	mov	r2, r0
   b6bc0:	2101      	movs	r1, #1
   b6bc2:	6868      	ldr	r0, [r5, #4]
   b6bc4:	f7fe fafa 	bl	b51bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6bc8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6bca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6bcc:	4622      	mov	r2, r4
   b6bce:	6868      	ldr	r0, [r5, #4]
   b6bd0:	f7fe faf4 	bl	b51bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bd4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6bd6:	4681      	mov	r9, r0
        bool ok = false;
   b6bd8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bda:	2e00      	cmp	r6, #0
   b6bdc:	d03b      	beq.n	b6c56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6bde:	2900      	cmp	r1, #0
   b6be0:	d139      	bne.n	b6c56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6be2:	6873      	ldr	r3, [r6, #4]
   b6be4:	2b02      	cmp	r3, #2
   b6be6:	d003      	beq.n	b6bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6be8:	2b0a      	cmp	r3, #10
   b6bea:	d011      	beq.n	b6c10 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bec:	69f6      	ldr	r6, [r6, #28]
   b6bee:	e7f4      	b.n	b6bda <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6bf0:	f1b8 0f00 	cmp.w	r8, #0
   b6bf4:	d0fa      	beq.n	b6bec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6bf6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6bf8:	a806      	add	r0, sp, #24
   b6bfa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6bfc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6bfe:	f7ff fdfb 	bl	b67f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c04:	1d3c      	adds	r4, r7, #4
   b6c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c08:	682b      	ldr	r3, [r5, #0]
   b6c0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c0c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6c0e:	e7ed      	b.n	b6bec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6c10:	f1b9 0f00 	cmp.w	r9, #0
   b6c14:	d0ea      	beq.n	b6bec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6c16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6c18:	2210      	movs	r2, #16
   b6c1a:	a801      	add	r0, sp, #4
   b6c1c:	f000 fb2e 	bl	b727c <memset>
                    a.v = 6;
   b6c20:	2306      	movs	r3, #6
   b6c22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6c26:	ad01      	add	r5, sp, #4
   b6c28:	f104 0308 	add.w	r3, r4, #8
   b6c2c:	3418      	adds	r4, #24
   b6c2e:	6818      	ldr	r0, [r3, #0]
   b6c30:	6859      	ldr	r1, [r3, #4]
   b6c32:	462a      	mov	r2, r5
   b6c34:	c203      	stmia	r2!, {r0, r1}
   b6c36:	3308      	adds	r3, #8
   b6c38:	42a3      	cmp	r3, r4
   b6c3a:	4615      	mov	r5, r2
   b6c3c:	d1f7      	bne.n	b6c2e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6c3e:	a901      	add	r1, sp, #4
   b6c40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6c42:	ad07      	add	r5, sp, #28
   b6c44:	f7ff fdb8 	bl	b67b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c4a:	1d3c      	adds	r4, r7, #4
   b6c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c4e:	682b      	ldr	r3, [r5, #0]
   b6c50:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c52:	4649      	mov	r1, r9
   b6c54:	e7ca      	b.n	b6bec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6c56:	9800      	ldr	r0, [sp, #0]
   b6c58:	f7fe f91c 	bl	b4e94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6c5c:	4638      	mov	r0, r7
   b6c5e:	b015      	add	sp, #84	; 0x54
   b6c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6c64 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b6c64:	2803      	cmp	r0, #3
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b6c66:	4602      	mov	r2, r0
    switch (nif) {
   b6c68:	d005      	beq.n	b6c76 <_ZN5spark12NetworkClass4fromEm+0x12>
   b6c6a:	4b04      	ldr	r3, [pc, #16]	; (b6c7c <_ZN5spark12NetworkClass4fromEm+0x18>)
   b6c6c:	4804      	ldr	r0, [pc, #16]	; (b6c80 <_ZN5spark12NetworkClass4fromEm+0x1c>)
   b6c6e:	2a04      	cmp	r2, #4
   b6c70:	bf18      	it	ne
   b6c72:	4618      	movne	r0, r3
   b6c74:	4770      	bx	lr
        return Ethernet;
   b6c76:	4803      	ldr	r0, [pc, #12]	; (b6c84 <_ZN5spark12NetworkClass4fromEm+0x20>)
}
   b6c78:	4770      	bx	lr
   b6c7a:	bf00      	nop
   b6c7c:	2003e720 	.word	0x2003e720
   b6c80:	2003e6f0 	.word	0x2003e6f0
   b6c84:	2003e668 	.word	0x2003e668

000b6c88 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b6c88:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b6c8a:	2200      	movs	r2, #0
   b6c8c:	6840      	ldr	r0, [r0, #4]
   b6c8e:	f7fe fadd 	bl	b524c <network_prefer>
}
   b6c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b6c96:	f7ff bfe5 	b.w	b6c64 <_ZN5spark12NetworkClass4fromEm>
	...

000b6c9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6c9c:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6c9e:	4a03      	ldr	r2, [pc, #12]	; (b6cac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6ca0:	601a      	str	r2, [r3, #0]
   b6ca2:	2200      	movs	r2, #0
   b6ca4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6ca6:	4770      	bx	lr
   b6ca8:	2003e720 	.word	0x2003e720
   b6cac:	000b7804 	.word	0x000b7804

000b6cb0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6cb0:	f100 0310 	add.w	r3, r0, #16
   b6cb4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6cb6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6cba:	2901      	cmp	r1, #1
   b6cbc:	4618      	mov	r0, r3
   b6cbe:	d108      	bne.n	b6cd2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6cc0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6cc4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6cc8:	3a01      	subs	r2, #1
   b6cca:	f103 0310 	add.w	r3, r3, #16
   b6cce:	d1f2      	bne.n	b6cb6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6cd0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6cd2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6cd4:	bf04      	itt	eq
   b6cd6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6cda:	1852      	addeq	r2, r2, r1
   b6cdc:	e7f4      	b.n	b6cc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6cde <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6cde:	b40e      	push	{r1, r2, r3}
   b6ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ce2:	b088      	sub	sp, #32
   b6ce4:	af00      	add	r7, sp, #0
   b6ce6:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6cea:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6cec:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6cf0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6cf2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6cf4:	462b      	mov	r3, r5
   b6cf6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6cf8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6cfa:	f7fe fad7 	bl	b52ac <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6cfe:	280f      	cmp	r0, #15
   b6d00:	687a      	ldr	r2, [r7, #4]
   b6d02:	d91a      	bls.n	b6d3a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6d04:	f100 0308 	add.w	r3, r0, #8
   b6d08:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6d0c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6d0e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d12:	1c41      	adds	r1, r0, #1
   b6d14:	462b      	mov	r3, r5
   b6d16:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6d18:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6d1a:	f7fe fac7 	bl	b52ac <vsnprintf>
        if (n > 0) {
   b6d1e:	1e02      	subs	r2, r0, #0
   b6d20:	dd04      	ble.n	b6d2c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6d22:	6823      	ldr	r3, [r4, #0]
   b6d24:	4669      	mov	r1, sp
   b6d26:	689b      	ldr	r3, [r3, #8]
   b6d28:	4620      	mov	r0, r4
   b6d2a:	4798      	blx	r3
   b6d2c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6d2e:	3720      	adds	r7, #32
   b6d30:	46bd      	mov	sp, r7
   b6d32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6d36:	b003      	add	sp, #12
   b6d38:	4770      	bx	lr
    } else if (n > 0) {
   b6d3a:	2800      	cmp	r0, #0
   b6d3c:	d0f7      	beq.n	b6d2e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6d3e:	6823      	ldr	r3, [r4, #0]
   b6d40:	4602      	mov	r2, r0
   b6d42:	689b      	ldr	r3, [r3, #8]
   b6d44:	f107 0110 	add.w	r1, r7, #16
   b6d48:	4620      	mov	r0, r4
   b6d4a:	4798      	blx	r3
}
   b6d4c:	e7ef      	b.n	b6d2e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6d4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6d4e:	b538      	push	{r3, r4, r5, lr}
   b6d50:	680b      	ldr	r3, [r1, #0]
   b6d52:	6003      	str	r3, [r0, #0]
   b6d54:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6d56:	6843      	ldr	r3, [r0, #4]
   b6d58:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6d5a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6d5c:	d008      	beq.n	b6d70 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6d5e:	b115      	cbz	r5, b6d66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6d60:	686b      	ldr	r3, [r5, #4]
   b6d62:	3301      	adds	r3, #1
   b6d64:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6d66:	6860      	ldr	r0, [r4, #4]
   b6d68:	b108      	cbz	r0, b6d6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6d6a:	f7fe fbc7 	bl	b54fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6d6e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6d70:	bd38      	pop	{r3, r4, r5, pc}

000b6d72 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b6d72:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6d74:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6d76:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6d7a:	689b      	ldr	r3, [r3, #8]
   b6d7c:	2201      	movs	r2, #1
   b6d7e:	f10d 0107 	add.w	r1, sp, #7
   b6d82:	4798      	blx	r3
}
   b6d84:	b003      	add	sp, #12
   b6d86:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d8a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6d8a:	460b      	mov	r3, r1
   b6d8c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6d8e:	2200      	movs	r2, #0
   b6d90:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6d92:	e9c0 2200 	strd	r2, r2, [r0]
   b6d96:	4604      	mov	r4, r0
        t_ = t;
   b6d98:	6083      	str	r3, [r0, #8]
    if (t) {
   b6d9a:	b90b      	cbnz	r3, b6da0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6da0:	f7ff ffd5 	bl	b6d4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6da4:	e7fa      	b.n	b6d9c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6da6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6da6:	6883      	ldr	r3, [r0, #8]
   b6da8:	b1eb      	cbz	r3, b6de6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6daa:	781a      	ldrb	r2, [r3, #0]
   b6dac:	2a03      	cmp	r2, #3
   b6dae:	d81a      	bhi.n	b6de6 <_ZNK5spark9JSONValue4typeEv+0x40>
   b6db0:	e8df f002 	tbb	[pc, r2]
   b6db4:	1b021704 	.word	0x1b021704
   b6db8:	2005      	movs	r0, #5
   b6dba:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6dbc:	6802      	ldr	r2, [r0, #0]
   b6dbe:	685b      	ldr	r3, [r3, #4]
   b6dc0:	6852      	ldr	r2, [r2, #4]
   b6dc2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6dc4:	282d      	cmp	r0, #45	; 0x2d
   b6dc6:	d012      	beq.n	b6dee <_ZNK5spark9JSONValue4typeEv+0x48>
   b6dc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6dcc:	2b09      	cmp	r3, #9
   b6dce:	d90e      	bls.n	b6dee <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6dd0:	2874      	cmp	r0, #116	; 0x74
   b6dd2:	d00e      	beq.n	b6df2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6dd4:	2866      	cmp	r0, #102	; 0x66
   b6dd6:	d00c      	beq.n	b6df2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6dd8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6ddc:	4258      	negs	r0, r3
   b6dde:	4158      	adcs	r0, r3
   b6de0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6de2:	2006      	movs	r0, #6
   b6de4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6de6:	2000      	movs	r0, #0
   b6de8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6dea:	2004      	movs	r0, #4
   b6dec:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6dee:	2003      	movs	r0, #3
   b6df0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6df2:	2002      	movs	r0, #2
}
   b6df4:	4770      	bx	lr

000b6df6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6df6:	b510      	push	{r4, lr}
   b6df8:	4604      	mov	r4, r0
    switch (type()) {
   b6dfa:	f7ff ffd4 	bl	b6da6 <_ZNK5spark9JSONValue4typeEv>
   b6dfe:	2802      	cmp	r0, #2
   b6e00:	d00e      	beq.n	b6e20 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6e02:	1ec3      	subs	r3, r0, #3
   b6e04:	b2db      	uxtb	r3, r3
   b6e06:	2b01      	cmp	r3, #1
   b6e08:	d814      	bhi.n	b6e34 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6e0a:	6822      	ldr	r2, [r4, #0]
   b6e0c:	68a3      	ldr	r3, [r4, #8]
   b6e0e:	6850      	ldr	r0, [r2, #4]
   b6e10:	685b      	ldr	r3, [r3, #4]
}
   b6e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6e16:	220a      	movs	r2, #10
   b6e18:	2100      	movs	r1, #0
   b6e1a:	4418      	add	r0, r3
   b6e1c:	f000 bb2e 	b.w	b747c <strtol>
        const char* const s = d_->json + t_->start;
   b6e20:	6822      	ldr	r2, [r4, #0]
   b6e22:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6e24:	6852      	ldr	r2, [r2, #4]
   b6e26:	685b      	ldr	r3, [r3, #4]
   b6e28:	5cd0      	ldrb	r0, [r2, r3]
   b6e2a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6e2e:	4258      	negs	r0, r3
   b6e30:	4158      	adcs	r0, r3
}
   b6e32:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6e34:	2000      	movs	r0, #0
   b6e36:	e7fc      	b.n	b6e32 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6e38 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6e38:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6e3a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6e3c:	e9c0 3300 	strd	r3, r3, [r0]
   b6e40:	4604      	mov	r4, r0
        n_(0) {
   b6e42:	480e      	ldr	r0, [pc, #56]	; (b6e7c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6e44:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6e48:	b1a9      	cbz	r1, b6e76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6e4a:	780b      	ldrb	r3, [r1, #0]
   b6e4c:	2b03      	cmp	r3, #3
   b6e4e:	d006      	beq.n	b6e5e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6e50:	b98b      	cbnz	r3, b6e76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6e52:	6813      	ldr	r3, [r2, #0]
   b6e54:	6858      	ldr	r0, [r3, #4]
   b6e56:	684b      	ldr	r3, [r1, #4]
   b6e58:	5cc3      	ldrb	r3, [r0, r3]
   b6e5a:	2b6e      	cmp	r3, #110	; 0x6e
   b6e5c:	d007      	beq.n	b6e6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6e5e:	6813      	ldr	r3, [r2, #0]
   b6e60:	684d      	ldr	r5, [r1, #4]
   b6e62:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6e64:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6e66:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6e68:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6e6a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6e6c:	60e3      	str	r3, [r4, #12]
   b6e6e:	4611      	mov	r1, r2
   b6e70:	4620      	mov	r0, r4
   b6e72:	f7ff ff6c 	bl	b6d4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6e76:	4620      	mov	r0, r4
   b6e78:	bd38      	pop	{r3, r4, r5, pc}
   b6e7a:	bf00      	nop
   b6e7c:	000b767d 	.word	0x000b767d

000b6e80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6e80:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6e82:	2500      	movs	r5, #0
   b6e84:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6e86:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6e8a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6e8e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6e92:	4604      	mov	r4, r0
   b6e94:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6e96:	b14b      	cbz	r3, b6eac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6e98:	781a      	ldrb	r2, [r3, #0]
   b6e9a:	2a01      	cmp	r2, #1
   b6e9c:	d106      	bne.n	b6eac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6e9e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6ea2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6ea4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6ea6:	6143      	str	r3, [r0, #20]
   b6ea8:	f7ff ff51 	bl	b6d4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6eac:	4620      	mov	r0, r4
   b6eae:	bd38      	pop	{r3, r4, r5, pc}

000b6eb0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6eb0:	b510      	push	{r4, lr}
    if (!n_) {
   b6eb2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6eb4:	4604      	mov	r4, r0
    if (!n_) {
   b6eb6:	b163      	cbz	r3, b6ed2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6eb8:	6880      	ldr	r0, [r0, #8]
   b6eba:	60e0      	str	r0, [r4, #12]
    --n_;
   b6ebc:	3b01      	subs	r3, #1
    ++t_;
   b6ebe:	3010      	adds	r0, #16
   b6ec0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6ec2:	6120      	str	r0, [r4, #16]
    --n_;
   b6ec4:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6ec6:	b113      	cbz	r3, b6ece <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6ec8:	f7ff fef2 	bl	b6cb0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6ecc:	60a0      	str	r0, [r4, #8]
    return true;
   b6ece:	2001      	movs	r0, #1
   b6ed0:	e000      	b.n	b6ed4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6ed2:	4618      	mov	r0, r3
}
   b6ed4:	bd10      	pop	{r4, pc}

000b6ed6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6ed6:	b510      	push	{r4, lr}
    write('}');
   b6ed8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6eda:	4604      	mov	r4, r0
    write('}');
   b6edc:	f7ff ff49 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6ee0:	2301      	movs	r3, #1
   b6ee2:	7123      	strb	r3, [r4, #4]
}
   b6ee4:	4620      	mov	r0, r4
   b6ee6:	bd10      	pop	{r4, pc}

000b6ee8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6ee8:	b508      	push	{r3, lr}
    switch (state_) {
   b6eea:	7903      	ldrb	r3, [r0, #4]
   b6eec:	2b01      	cmp	r3, #1
   b6eee:	d002      	beq.n	b6ef6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6ef0:	2b02      	cmp	r3, #2
   b6ef2:	d004      	beq.n	b6efe <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6ef4:	bd08      	pop	{r3, pc}
        write(',');
   b6ef6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6ef8:	f7ff ff3b 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
}
   b6efc:	e7fa      	b.n	b6ef4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6efe:	213a      	movs	r1, #58	; 0x3a
   b6f00:	e7fa      	b.n	b6ef8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6f02 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6f02:	b510      	push	{r4, lr}
   b6f04:	4604      	mov	r4, r0
    writeSeparator();
   b6f06:	f7ff ffef 	bl	b6ee8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6f0a:	4620      	mov	r0, r4
   b6f0c:	217b      	movs	r1, #123	; 0x7b
   b6f0e:	f7ff ff30 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6f12:	2300      	movs	r3, #0
   b6f14:	7123      	strb	r3, [r4, #4]
}
   b6f16:	4620      	mov	r0, r4
   b6f18:	bd10      	pop	{r4, pc}
	...

000b6f1c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6f1c:	b513      	push	{r0, r1, r4, lr}
   b6f1e:	4604      	mov	r4, r0
   b6f20:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6f22:	f7ff ffe1 	bl	b6ee8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6f26:	6823      	ldr	r3, [r4, #0]
   b6f28:	9a01      	ldr	r2, [sp, #4]
   b6f2a:	68db      	ldr	r3, [r3, #12]
   b6f2c:	4903      	ldr	r1, [pc, #12]	; (b6f3c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6f2e:	4620      	mov	r0, r4
   b6f30:	4798      	blx	r3
    state_ = NEXT;
   b6f32:	2301      	movs	r3, #1
}
   b6f34:	4620      	mov	r0, r4
    state_ = NEXT;
   b6f36:	7123      	strb	r3, [r4, #4]
}
   b6f38:	b002      	add	sp, #8
   b6f3a:	bd10      	pop	{r4, pc}
   b6f3c:	000b7657 	.word	0x000b7657

000b6f40 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6f40:	b513      	push	{r0, r1, r4, lr}
   b6f42:	4604      	mov	r4, r0
   b6f44:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6f46:	f7ff ffcf 	bl	b6ee8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6f4a:	6823      	ldr	r3, [r4, #0]
   b6f4c:	9a01      	ldr	r2, [sp, #4]
   b6f4e:	68db      	ldr	r3, [r3, #12]
   b6f50:	4903      	ldr	r1, [pc, #12]	; (b6f60 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6f52:	4620      	mov	r0, r4
   b6f54:	4798      	blx	r3
    state_ = NEXT;
   b6f56:	2301      	movs	r3, #1
}
   b6f58:	4620      	mov	r0, r4
    state_ = NEXT;
   b6f5a:	7123      	strb	r3, [r4, #4]
}
   b6f5c:	b002      	add	sp, #8
   b6f5e:	bd10      	pop	{r4, pc}
   b6f60:	000b7840 	.word	0x000b7840

000b6f64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6f68:	460d      	mov	r5, r1
    write('"');
   b6f6a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6f6c:	4690      	mov	r8, r2
   b6f6e:	4604      	mov	r4, r0
    write('"');
   b6f70:	f7ff feff 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6f74:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b701c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6f78:	44a8      	add	r8, r5
    const char *s = str;
   b6f7a:	462f      	mov	r7, r5
    while (s != end) {
   b6f7c:	4547      	cmp	r7, r8
   b6f7e:	46ba      	mov	sl, r7
   b6f80:	d03d      	beq.n	b6ffe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6f82:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6f86:	2e22      	cmp	r6, #34	; 0x22
   b6f88:	d006      	beq.n	b6f98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6f8a:	2e5c      	cmp	r6, #92	; 0x5c
   b6f8c:	d004      	beq.n	b6f98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6f8e:	4630      	mov	r0, r6
   b6f90:	f000 f944 	bl	b721c <isprint>
   b6f94:	2800      	cmp	r0, #0
   b6f96:	d1f1      	bne.n	b6f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6f98:	6823      	ldr	r3, [r4, #0]
   b6f9a:	ebaa 0205 	sub.w	r2, sl, r5
   b6f9e:	689b      	ldr	r3, [r3, #8]
   b6fa0:	4629      	mov	r1, r5
   b6fa2:	4620      	mov	r0, r4
   b6fa4:	4798      	blx	r3
            write('\\');
   b6fa6:	215c      	movs	r1, #92	; 0x5c
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7ff fee2 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6fae:	2e0d      	cmp	r6, #13
   b6fb0:	d80a      	bhi.n	b6fc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6fb2:	2e07      	cmp	r6, #7
   b6fb4:	d91c      	bls.n	b6ff0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6fb6:	f1a6 0308 	sub.w	r3, r6, #8
   b6fba:	2b05      	cmp	r3, #5
   b6fbc:	d818      	bhi.n	b6ff0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6fbe:	e8df f003 	tbb	[pc, r3]
   b6fc2:	0f0d      	.short	0x0f0d
   b6fc4:	15131711 	.word	0x15131711
   b6fc8:	2e22      	cmp	r6, #34	; 0x22
   b6fca:	d001      	beq.n	b6fd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6fcc:	2e5c      	cmp	r6, #92	; 0x5c
   b6fce:	d10f      	bne.n	b6ff0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6fd0:	4631      	mov	r1, r6
                write('b');
   b6fd2:	4620      	mov	r0, r4
   b6fd4:	f7ff fecd 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6fd8:	463d      	mov	r5, r7
    while (s != end) {
   b6fda:	e7cf      	b.n	b6f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6fdc:	2162      	movs	r1, #98	; 0x62
   b6fde:	e7f8      	b.n	b6fd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6fe0:	2174      	movs	r1, #116	; 0x74
   b6fe2:	e7f6      	b.n	b6fd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6fe4:	216e      	movs	r1, #110	; 0x6e
   b6fe6:	e7f4      	b.n	b6fd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6fe8:	2166      	movs	r1, #102	; 0x66
   b6fea:	e7f2      	b.n	b6fd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6fec:	2172      	movs	r1, #114	; 0x72
   b6fee:	e7f0      	b.n	b6fd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6ff0:	6823      	ldr	r3, [r4, #0]
   b6ff2:	4632      	mov	r2, r6
   b6ff4:	68db      	ldr	r3, [r3, #12]
   b6ff6:	4649      	mov	r1, r9
   b6ff8:	4620      	mov	r0, r4
   b6ffa:	4798      	blx	r3
                break;
   b6ffc:	e7ec      	b.n	b6fd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6ffe:	42bd      	cmp	r5, r7
   b7000:	d005      	beq.n	b700e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7002:	6823      	ldr	r3, [r4, #0]
   b7004:	1b7a      	subs	r2, r7, r5
   b7006:	689b      	ldr	r3, [r3, #8]
   b7008:	4629      	mov	r1, r5
   b700a:	4620      	mov	r0, r4
   b700c:	4798      	blx	r3
    }
    write('"');
   b700e:	2122      	movs	r1, #34	; 0x22
   b7010:	4620      	mov	r0, r4
   b7012:	f7ff feae 	bl	b6d72 <_ZN5spark10JSONWriter5writeEc>
}
   b7016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b701a:	bf00      	nop
   b701c:	000b7843 	.word	0x000b7843

000b7020 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7020:	b513      	push	{r0, r1, r4, lr}
   b7022:	4604      	mov	r4, r0
   b7024:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7028:	f7ff ff5e 	bl	b6ee8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b702c:	4620      	mov	r0, r4
   b702e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7032:	f7ff ff97 	bl	b6f64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7036:	2302      	movs	r3, #2
}
   b7038:	4620      	mov	r0, r4
    state_ = VALUE;
   b703a:	7123      	strb	r3, [r4, #4]
}
   b703c:	b002      	add	sp, #8
   b703e:	bd10      	pop	{r4, pc}

000b7040 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7040:	b513      	push	{r0, r1, r4, lr}
   b7042:	4604      	mov	r4, r0
   b7044:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7048:	f7ff ff4e 	bl	b6ee8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b704c:	4620      	mov	r0, r4
   b704e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7052:	f7ff ff87 	bl	b6f64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7056:	2301      	movs	r3, #1
}
   b7058:	4620      	mov	r0, r4
    state_ = NEXT;
   b705a:	7123      	strb	r3, [r4, #4]
}
   b705c:	b002      	add	sp, #8
   b705e:	bd10      	pop	{r4, pc}

000b7060 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7060:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7062:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7064:	d902      	bls.n	b706c <pinAvailable+0xc>
    return false;
   b7066:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7068:	b002      	add	sp, #8
   b706a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b706c:	f1a0 030b 	sub.w	r3, r0, #11
   b7070:	2b02      	cmp	r3, #2
   b7072:	d81a      	bhi.n	b70aa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7074:	4c17      	ldr	r4, [pc, #92]	; (b70d4 <pinAvailable+0x74>)
   b7076:	7821      	ldrb	r1, [r4, #0]
   b7078:	f3bf 8f5b 	dmb	ish
   b707c:	f011 0101 	ands.w	r1, r1, #1
   b7080:	d10b      	bne.n	b709a <pinAvailable+0x3a>
   b7082:	4620      	mov	r0, r4
   b7084:	9101      	str	r1, [sp, #4]
   b7086:	f7fd fd2f 	bl	b4ae8 <__cxa_guard_acquire>
   b708a:	9901      	ldr	r1, [sp, #4]
   b708c:	b128      	cbz	r0, b709a <pinAvailable+0x3a>
   b708e:	4812      	ldr	r0, [pc, #72]	; (b70d8 <pinAvailable+0x78>)
   b7090:	f7fe f989 	bl	b53a6 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7094:	4620      	mov	r0, r4
   b7096:	f7fd fd2c 	bl	b4af2 <__cxa_guard_release>
   b709a:	4b0f      	ldr	r3, [pc, #60]	; (b70d8 <pinAvailable+0x78>)
   b709c:	7818      	ldrb	r0, [r3, #0]
   b709e:	f7fd ffe9 	bl	b5074 <hal_spi_is_enabled>
   b70a2:	2800      	cmp	r0, #0
   b70a4:	d1df      	bne.n	b7066 <pinAvailable+0x6>
  return true; // 'pin' is available
   b70a6:	2001      	movs	r0, #1
   b70a8:	e7de      	b.n	b7068 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b70aa:	2801      	cmp	r0, #1
   b70ac:	d809      	bhi.n	b70c2 <pinAvailable+0x62>
   b70ae:	f000 f887 	bl	b71c0 <_Z19__fetch_global_Wirev>
   b70b2:	2100      	movs	r1, #0
   b70b4:	7c00      	ldrb	r0, [r0, #16]
   b70b6:	f7fd ffc5 	bl	b5044 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b70ba:	f080 0001 	eor.w	r0, r0, #1
   b70be:	b2c0      	uxtb	r0, r0
   b70c0:	e7d2      	b.n	b7068 <pinAvailable+0x8>
   b70c2:	3809      	subs	r0, #9
   b70c4:	2801      	cmp	r0, #1
   b70c6:	d8ee      	bhi.n	b70a6 <pinAvailable+0x46>
   b70c8:	f000 f83a 	bl	b7140 <_Z22__fetch_global_Serial1v>
   b70cc:	7c00      	ldrb	r0, [r0, #16]
   b70ce:	f7fd ff71 	bl	b4fb4 <hal_usart_is_enabled>
   b70d2:	e7f2      	b.n	b70ba <pinAvailable+0x5a>
   b70d4:	2003e728 	.word	0x2003e728
   b70d8:	2003e72c 	.word	0x2003e72c

000b70dc <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b70dc:	280d      	cmp	r0, #13
{
   b70de:	b510      	push	{r4, lr}
   b70e0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b70e2:	bf9c      	itt	ls
   b70e4:	340e      	addls	r4, #14
   b70e6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b70e8:	4620      	mov	r0, r4
   b70ea:	f7ff ffb9 	bl	b7060 <pinAvailable>
   b70ee:	b150      	cbz	r0, b7106 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b70f0:	2103      	movs	r1, #3
   b70f2:	4620      	mov	r0, r4
   b70f4:	f7fd fede 	bl	b4eb4 <hal_pin_validate_function>
   b70f8:	2803      	cmp	r0, #3
   b70fa:	d104      	bne.n	b7106 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b70fc:	4620      	mov	r0, r4
}
   b70fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7102:	f7fd bedf 	b.w	b4ec4 <hal_adc_read>
}
   b7106:	2000      	movs	r0, #0
   b7108:	bd10      	pop	{r4, pc}

000b710a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b710a:	4770      	bx	lr

000b710c <_Z20acquireSerial1Bufferv>:
{
   b710c:	b538      	push	{r3, r4, r5, lr}
   b710e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7110:	2514      	movs	r5, #20
   b7112:	462a      	mov	r2, r5
   b7114:	2100      	movs	r1, #0
   b7116:	f000 f8b1 	bl	b727c <memset>
   b711a:	8025      	strh	r5, [r4, #0]
   b711c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b711e:	4907      	ldr	r1, [pc, #28]	; (b713c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7120:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7122:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7124:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7126:	f000 f871 	bl	b720c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b712a:	4904      	ldr	r1, [pc, #16]	; (b713c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b712c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b712e:	4628      	mov	r0, r5
   b7130:	f000 f86c 	bl	b720c <_ZnajRKSt9nothrow_t>
    };
   b7134:	60e0      	str	r0, [r4, #12]
}
   b7136:	4620      	mov	r0, r4
   b7138:	bd38      	pop	{r3, r4, r5, pc}
   b713a:	bf00      	nop
   b713c:	000b7849 	.word	0x000b7849

000b7140 <_Z22__fetch_global_Serial1v>:
{
   b7140:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7142:	4d0e      	ldr	r5, [pc, #56]	; (b717c <_Z22__fetch_global_Serial1v+0x3c>)
   b7144:	7829      	ldrb	r1, [r5, #0]
   b7146:	f3bf 8f5b 	dmb	ish
   b714a:	f011 0401 	ands.w	r4, r1, #1
{
   b714e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7150:	d111      	bne.n	b7176 <_Z22__fetch_global_Serial1v+0x36>
   b7152:	4628      	mov	r0, r5
   b7154:	f7fd fcc8 	bl	b4ae8 <__cxa_guard_acquire>
   b7158:	b168      	cbz	r0, b7176 <_Z22__fetch_global_Serial1v+0x36>
   b715a:	a801      	add	r0, sp, #4
   b715c:	f7ff ffd6 	bl	b710c <_Z20acquireSerial1Bufferv>
   b7160:	aa01      	add	r2, sp, #4
   b7162:	4621      	mov	r1, r4
   b7164:	4806      	ldr	r0, [pc, #24]	; (b7180 <_Z22__fetch_global_Serial1v+0x40>)
   b7166:	f7ff fc69 	bl	b6a3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b716a:	4628      	mov	r0, r5
   b716c:	f7fd fcc1 	bl	b4af2 <__cxa_guard_release>
   b7170:	4804      	ldr	r0, [pc, #16]	; (b7184 <_Z22__fetch_global_Serial1v+0x44>)
   b7172:	f000 f84d 	bl	b7210 <atexit>
    return serial1;
}
   b7176:	4802      	ldr	r0, [pc, #8]	; (b7180 <_Z22__fetch_global_Serial1v+0x40>)
   b7178:	b007      	add	sp, #28
   b717a:	bd30      	pop	{r4, r5, pc}
   b717c:	2003e734 	.word	0x2003e734
   b7180:	2003e738 	.word	0x2003e738
   b7184:	000b710b 	.word	0x000b710b

000b7188 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7188:	4770      	bx	lr
	...

000b718c <_Z17acquireWireBufferv>:
{
   b718c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b718e:	4b0a      	ldr	r3, [pc, #40]	; (b71b8 <_Z17acquireWireBufferv+0x2c>)
   b7190:	6003      	str	r3, [r0, #0]
   b7192:	2301      	movs	r3, #1
{
   b7194:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7196:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7198:	4908      	ldr	r1, [pc, #32]	; (b71bc <_Z17acquireWireBufferv+0x30>)
   b719a:	2020      	movs	r0, #32
   b719c:	f000 f836 	bl	b720c <_ZnajRKSt9nothrow_t>
	};
   b71a0:	2520      	movs	r5, #32
   b71a2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b71a4:	4905      	ldr	r1, [pc, #20]	; (b71bc <_Z17acquireWireBufferv+0x30>)
	};
   b71a6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b71a8:	4628      	mov	r0, r5
   b71aa:	f000 f82f 	bl	b720c <_ZnajRKSt9nothrow_t>
	};
   b71ae:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b71b2:	4620      	mov	r0, r4
   b71b4:	bd38      	pop	{r3, r4, r5, pc}
   b71b6:	bf00      	nop
   b71b8:	00010018 	.word	0x00010018
   b71bc:	000b7849 	.word	0x000b7849

000b71c0 <_Z19__fetch_global_Wirev>:
{
   b71c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b71c2:	4d0e      	ldr	r5, [pc, #56]	; (b71fc <_Z19__fetch_global_Wirev+0x3c>)
   b71c4:	7829      	ldrb	r1, [r5, #0]
   b71c6:	f3bf 8f5b 	dmb	ish
   b71ca:	f011 0401 	ands.w	r4, r1, #1
{
   b71ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b71d0:	d111      	bne.n	b71f6 <_Z19__fetch_global_Wirev+0x36>
   b71d2:	4628      	mov	r0, r5
   b71d4:	f7fd fc88 	bl	b4ae8 <__cxa_guard_acquire>
   b71d8:	b168      	cbz	r0, b71f6 <_Z19__fetch_global_Wirev+0x36>
   b71da:	4668      	mov	r0, sp
   b71dc:	f7ff ffd6 	bl	b718c <_Z17acquireWireBufferv>
   b71e0:	466a      	mov	r2, sp
   b71e2:	4621      	mov	r1, r4
   b71e4:	4806      	ldr	r0, [pc, #24]	; (b7200 <_Z19__fetch_global_Wirev+0x40>)
   b71e6:	f7ff fc73 	bl	b6ad0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b71ea:	4628      	mov	r0, r5
   b71ec:	f7fd fc81 	bl	b4af2 <__cxa_guard_release>
   b71f0:	4804      	ldr	r0, [pc, #16]	; (b7204 <_Z19__fetch_global_Wirev+0x44>)
   b71f2:	f000 f80d 	bl	b7210 <atexit>
	return wire;
}
   b71f6:	4802      	ldr	r0, [pc, #8]	; (b7200 <_Z19__fetch_global_Wirev+0x40>)
   b71f8:	b007      	add	sp, #28
   b71fa:	bd30      	pop	{r4, r5, pc}
   b71fc:	2003e750 	.word	0x2003e750
   b7200:	2003e754 	.word	0x2003e754
   b7204:	000b7189 	.word	0x000b7189

000b7208 <_ZnwjRKSt9nothrow_t>:
   b7208:	f7fd bc5b 	b.w	b4ac2 <_Znwj>

000b720c <_ZnajRKSt9nothrow_t>:
   b720c:	f7fd bc5b 	b.w	b4ac6 <_Znaj>

000b7210 <atexit>:
   b7210:	2300      	movs	r3, #0
   b7212:	4601      	mov	r1, r0
   b7214:	461a      	mov	r2, r3
   b7216:	4618      	mov	r0, r3
   b7218:	f000 b93a 	b.w	b7490 <__register_exitproc>

000b721c <isprint>:
   b721c:	4b02      	ldr	r3, [pc, #8]	; (b7228 <isprint+0xc>)
   b721e:	4418      	add	r0, r3
   b7220:	7840      	ldrb	r0, [r0, #1]
   b7222:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7226:	4770      	bx	lr
   b7228:	000b78de 	.word	0x000b78de

000b722c <memcpy>:
   b722c:	440a      	add	r2, r1
   b722e:	4291      	cmp	r1, r2
   b7230:	f100 33ff 	add.w	r3, r0, #4294967295
   b7234:	d100      	bne.n	b7238 <memcpy+0xc>
   b7236:	4770      	bx	lr
   b7238:	b510      	push	{r4, lr}
   b723a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b723e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7242:	4291      	cmp	r1, r2
   b7244:	d1f9      	bne.n	b723a <memcpy+0xe>
   b7246:	bd10      	pop	{r4, pc}

000b7248 <memmove>:
   b7248:	4288      	cmp	r0, r1
   b724a:	b510      	push	{r4, lr}
   b724c:	eb01 0402 	add.w	r4, r1, r2
   b7250:	d902      	bls.n	b7258 <memmove+0x10>
   b7252:	4284      	cmp	r4, r0
   b7254:	4623      	mov	r3, r4
   b7256:	d807      	bhi.n	b7268 <memmove+0x20>
   b7258:	1e43      	subs	r3, r0, #1
   b725a:	42a1      	cmp	r1, r4
   b725c:	d008      	beq.n	b7270 <memmove+0x28>
   b725e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7262:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7266:	e7f8      	b.n	b725a <memmove+0x12>
   b7268:	4402      	add	r2, r0
   b726a:	4601      	mov	r1, r0
   b726c:	428a      	cmp	r2, r1
   b726e:	d100      	bne.n	b7272 <memmove+0x2a>
   b7270:	bd10      	pop	{r4, pc}
   b7272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7276:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b727a:	e7f7      	b.n	b726c <memmove+0x24>

000b727c <memset>:
   b727c:	4402      	add	r2, r0
   b727e:	4603      	mov	r3, r0
   b7280:	4293      	cmp	r3, r2
   b7282:	d100      	bne.n	b7286 <memset+0xa>
   b7284:	4770      	bx	lr
   b7286:	f803 1b01 	strb.w	r1, [r3], #1
   b728a:	e7f9      	b.n	b7280 <memset+0x4>

000b728c <srand>:
   b728c:	b538      	push	{r3, r4, r5, lr}
   b728e:	4b10      	ldr	r3, [pc, #64]	; (b72d0 <srand+0x44>)
   b7290:	681d      	ldr	r5, [r3, #0]
   b7292:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7294:	4604      	mov	r4, r0
   b7296:	b9b3      	cbnz	r3, b72c6 <srand+0x3a>
   b7298:	2018      	movs	r0, #24
   b729a:	f7fd ffef 	bl	b527c <malloc>
   b729e:	4602      	mov	r2, r0
   b72a0:	63a8      	str	r0, [r5, #56]	; 0x38
   b72a2:	b920      	cbnz	r0, b72ae <srand+0x22>
   b72a4:	4b0b      	ldr	r3, [pc, #44]	; (b72d4 <srand+0x48>)
   b72a6:	480c      	ldr	r0, [pc, #48]	; (b72d8 <srand+0x4c>)
   b72a8:	2142      	movs	r1, #66	; 0x42
   b72aa:	f7fe f80f 	bl	b52cc <__assert_func>
   b72ae:	490b      	ldr	r1, [pc, #44]	; (b72dc <srand+0x50>)
   b72b0:	4b0b      	ldr	r3, [pc, #44]	; (b72e0 <srand+0x54>)
   b72b2:	e9c0 1300 	strd	r1, r3, [r0]
   b72b6:	4b0b      	ldr	r3, [pc, #44]	; (b72e4 <srand+0x58>)
   b72b8:	6083      	str	r3, [r0, #8]
   b72ba:	230b      	movs	r3, #11
   b72bc:	8183      	strh	r3, [r0, #12]
   b72be:	2100      	movs	r1, #0
   b72c0:	2001      	movs	r0, #1
   b72c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72c8:	2200      	movs	r2, #0
   b72ca:	611c      	str	r4, [r3, #16]
   b72cc:	615a      	str	r2, [r3, #20]
   b72ce:	bd38      	pop	{r3, r4, r5, pc}
   b72d0:	2003e5d0 	.word	0x2003e5d0
   b72d4:	000b784a 	.word	0x000b784a
   b72d8:	000b7861 	.word	0x000b7861
   b72dc:	abcd330e 	.word	0xabcd330e
   b72e0:	e66d1234 	.word	0xe66d1234
   b72e4:	0005deec 	.word	0x0005deec

000b72e8 <strchr>:
   b72e8:	b2c9      	uxtb	r1, r1
   b72ea:	4603      	mov	r3, r0
   b72ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   b72f0:	b11a      	cbz	r2, b72fa <strchr+0x12>
   b72f2:	428a      	cmp	r2, r1
   b72f4:	d1f9      	bne.n	b72ea <strchr+0x2>
   b72f6:	4618      	mov	r0, r3
   b72f8:	4770      	bx	lr
   b72fa:	2900      	cmp	r1, #0
   b72fc:	bf18      	it	ne
   b72fe:	2300      	movne	r3, #0
   b7300:	e7f9      	b.n	b72f6 <strchr+0xe>

000b7302 <strchrnul>:
   b7302:	b510      	push	{r4, lr}
   b7304:	4604      	mov	r4, r0
   b7306:	f7ff ffef 	bl	b72e8 <strchr>
   b730a:	b918      	cbnz	r0, b7314 <strchrnul+0x12>
   b730c:	4620      	mov	r0, r4
   b730e:	f7fd fb95 	bl	b4a3c <strlen>
   b7312:	4420      	add	r0, r4
   b7314:	bd10      	pop	{r4, pc}

000b7316 <strcpy>:
   b7316:	4603      	mov	r3, r0
   b7318:	f811 2b01 	ldrb.w	r2, [r1], #1
   b731c:	f803 2b01 	strb.w	r2, [r3], #1
   b7320:	2a00      	cmp	r2, #0
   b7322:	d1f9      	bne.n	b7318 <strcpy+0x2>
   b7324:	4770      	bx	lr

000b7326 <strncmp>:
   b7326:	b510      	push	{r4, lr}
   b7328:	b17a      	cbz	r2, b734a <strncmp+0x24>
   b732a:	4603      	mov	r3, r0
   b732c:	3901      	subs	r1, #1
   b732e:	1884      	adds	r4, r0, r2
   b7330:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7334:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7338:	4290      	cmp	r0, r2
   b733a:	d101      	bne.n	b7340 <strncmp+0x1a>
   b733c:	42a3      	cmp	r3, r4
   b733e:	d101      	bne.n	b7344 <strncmp+0x1e>
   b7340:	1a80      	subs	r0, r0, r2
   b7342:	bd10      	pop	{r4, pc}
   b7344:	2800      	cmp	r0, #0
   b7346:	d1f3      	bne.n	b7330 <strncmp+0xa>
   b7348:	e7fa      	b.n	b7340 <strncmp+0x1a>
   b734a:	4610      	mov	r0, r2
   b734c:	e7f9      	b.n	b7342 <strncmp+0x1c>

000b734e <strrchr>:
   b734e:	b538      	push	{r3, r4, r5, lr}
   b7350:	4603      	mov	r3, r0
   b7352:	460c      	mov	r4, r1
   b7354:	b969      	cbnz	r1, b7372 <strrchr+0x24>
   b7356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b735a:	f7ff bfc5 	b.w	b72e8 <strchr>
   b735e:	1c43      	adds	r3, r0, #1
   b7360:	4605      	mov	r5, r0
   b7362:	4621      	mov	r1, r4
   b7364:	4618      	mov	r0, r3
   b7366:	f7ff ffbf 	bl	b72e8 <strchr>
   b736a:	2800      	cmp	r0, #0
   b736c:	d1f7      	bne.n	b735e <strrchr+0x10>
   b736e:	4628      	mov	r0, r5
   b7370:	bd38      	pop	{r3, r4, r5, pc}
   b7372:	2500      	movs	r5, #0
   b7374:	e7f5      	b.n	b7362 <strrchr+0x14>
	...

000b7378 <_strtol_l.constprop.0>:
   b7378:	2b01      	cmp	r3, #1
   b737a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b737e:	d001      	beq.n	b7384 <_strtol_l.constprop.0+0xc>
   b7380:	2b24      	cmp	r3, #36	; 0x24
   b7382:	d906      	bls.n	b7392 <_strtol_l.constprop.0+0x1a>
   b7384:	f7fd ff9a 	bl	b52bc <__errno>
   b7388:	2316      	movs	r3, #22
   b738a:	6003      	str	r3, [r0, #0]
   b738c:	2000      	movs	r0, #0
   b738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7392:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7478 <_strtol_l.constprop.0+0x100>
   b7396:	460d      	mov	r5, r1
   b7398:	462e      	mov	r6, r5
   b739a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b739e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b73a2:	f017 0708 	ands.w	r7, r7, #8
   b73a6:	d1f7      	bne.n	b7398 <_strtol_l.constprop.0+0x20>
   b73a8:	2c2d      	cmp	r4, #45	; 0x2d
   b73aa:	d132      	bne.n	b7412 <_strtol_l.constprop.0+0x9a>
   b73ac:	782c      	ldrb	r4, [r5, #0]
   b73ae:	2701      	movs	r7, #1
   b73b0:	1cb5      	adds	r5, r6, #2
   b73b2:	2b00      	cmp	r3, #0
   b73b4:	d05b      	beq.n	b746e <_strtol_l.constprop.0+0xf6>
   b73b6:	2b10      	cmp	r3, #16
   b73b8:	d109      	bne.n	b73ce <_strtol_l.constprop.0+0x56>
   b73ba:	2c30      	cmp	r4, #48	; 0x30
   b73bc:	d107      	bne.n	b73ce <_strtol_l.constprop.0+0x56>
   b73be:	782c      	ldrb	r4, [r5, #0]
   b73c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b73c4:	2c58      	cmp	r4, #88	; 0x58
   b73c6:	d14d      	bne.n	b7464 <_strtol_l.constprop.0+0xec>
   b73c8:	786c      	ldrb	r4, [r5, #1]
   b73ca:	2310      	movs	r3, #16
   b73cc:	3502      	adds	r5, #2
   b73ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b73d2:	f108 38ff 	add.w	r8, r8, #4294967295
   b73d6:	f04f 0c00 	mov.w	ip, #0
   b73da:	fbb8 f9f3 	udiv	r9, r8, r3
   b73de:	4666      	mov	r6, ip
   b73e0:	fb03 8a19 	mls	sl, r3, r9, r8
   b73e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b73e8:	f1be 0f09 	cmp.w	lr, #9
   b73ec:	d816      	bhi.n	b741c <_strtol_l.constprop.0+0xa4>
   b73ee:	4674      	mov	r4, lr
   b73f0:	42a3      	cmp	r3, r4
   b73f2:	dd24      	ble.n	b743e <_strtol_l.constprop.0+0xc6>
   b73f4:	f1bc 0f00 	cmp.w	ip, #0
   b73f8:	db1e      	blt.n	b7438 <_strtol_l.constprop.0+0xc0>
   b73fa:	45b1      	cmp	r9, r6
   b73fc:	d31c      	bcc.n	b7438 <_strtol_l.constprop.0+0xc0>
   b73fe:	d101      	bne.n	b7404 <_strtol_l.constprop.0+0x8c>
   b7400:	45a2      	cmp	sl, r4
   b7402:	db19      	blt.n	b7438 <_strtol_l.constprop.0+0xc0>
   b7404:	fb06 4603 	mla	r6, r6, r3, r4
   b7408:	f04f 0c01 	mov.w	ip, #1
   b740c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7410:	e7e8      	b.n	b73e4 <_strtol_l.constprop.0+0x6c>
   b7412:	2c2b      	cmp	r4, #43	; 0x2b
   b7414:	bf04      	itt	eq
   b7416:	782c      	ldrbeq	r4, [r5, #0]
   b7418:	1cb5      	addeq	r5, r6, #2
   b741a:	e7ca      	b.n	b73b2 <_strtol_l.constprop.0+0x3a>
   b741c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7420:	f1be 0f19 	cmp.w	lr, #25
   b7424:	d801      	bhi.n	b742a <_strtol_l.constprop.0+0xb2>
   b7426:	3c37      	subs	r4, #55	; 0x37
   b7428:	e7e2      	b.n	b73f0 <_strtol_l.constprop.0+0x78>
   b742a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b742e:	f1be 0f19 	cmp.w	lr, #25
   b7432:	d804      	bhi.n	b743e <_strtol_l.constprop.0+0xc6>
   b7434:	3c57      	subs	r4, #87	; 0x57
   b7436:	e7db      	b.n	b73f0 <_strtol_l.constprop.0+0x78>
   b7438:	f04f 3cff 	mov.w	ip, #4294967295
   b743c:	e7e6      	b.n	b740c <_strtol_l.constprop.0+0x94>
   b743e:	f1bc 0f00 	cmp.w	ip, #0
   b7442:	da05      	bge.n	b7450 <_strtol_l.constprop.0+0xd8>
   b7444:	2322      	movs	r3, #34	; 0x22
   b7446:	6003      	str	r3, [r0, #0]
   b7448:	4646      	mov	r6, r8
   b744a:	b942      	cbnz	r2, b745e <_strtol_l.constprop.0+0xe6>
   b744c:	4630      	mov	r0, r6
   b744e:	e79e      	b.n	b738e <_strtol_l.constprop.0+0x16>
   b7450:	b107      	cbz	r7, b7454 <_strtol_l.constprop.0+0xdc>
   b7452:	4276      	negs	r6, r6
   b7454:	2a00      	cmp	r2, #0
   b7456:	d0f9      	beq.n	b744c <_strtol_l.constprop.0+0xd4>
   b7458:	f1bc 0f00 	cmp.w	ip, #0
   b745c:	d000      	beq.n	b7460 <_strtol_l.constprop.0+0xe8>
   b745e:	1e69      	subs	r1, r5, #1
   b7460:	6011      	str	r1, [r2, #0]
   b7462:	e7f3      	b.n	b744c <_strtol_l.constprop.0+0xd4>
   b7464:	2430      	movs	r4, #48	; 0x30
   b7466:	2b00      	cmp	r3, #0
   b7468:	d1b1      	bne.n	b73ce <_strtol_l.constprop.0+0x56>
   b746a:	2308      	movs	r3, #8
   b746c:	e7af      	b.n	b73ce <_strtol_l.constprop.0+0x56>
   b746e:	2c30      	cmp	r4, #48	; 0x30
   b7470:	d0a5      	beq.n	b73be <_strtol_l.constprop.0+0x46>
   b7472:	230a      	movs	r3, #10
   b7474:	e7ab      	b.n	b73ce <_strtol_l.constprop.0+0x56>
   b7476:	bf00      	nop
   b7478:	000b78df 	.word	0x000b78df

000b747c <strtol>:
   b747c:	4613      	mov	r3, r2
   b747e:	460a      	mov	r2, r1
   b7480:	4601      	mov	r1, r0
   b7482:	4802      	ldr	r0, [pc, #8]	; (b748c <strtol+0x10>)
   b7484:	6800      	ldr	r0, [r0, #0]
   b7486:	f7ff bf77 	b.w	b7378 <_strtol_l.constprop.0>
   b748a:	bf00      	nop
   b748c:	2003e5d0 	.word	0x2003e5d0

000b7490 <__register_exitproc>:
   b7490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7494:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7550 <__register_exitproc+0xc0>
   b7498:	4606      	mov	r6, r0
   b749a:	f8d8 0000 	ldr.w	r0, [r8]
   b749e:	461f      	mov	r7, r3
   b74a0:	460d      	mov	r5, r1
   b74a2:	4691      	mov	r9, r2
   b74a4:	f000 f856 	bl	b7554 <__retarget_lock_acquire_recursive>
   b74a8:	4b25      	ldr	r3, [pc, #148]	; (b7540 <__register_exitproc+0xb0>)
   b74aa:	681c      	ldr	r4, [r3, #0]
   b74ac:	b934      	cbnz	r4, b74bc <__register_exitproc+0x2c>
   b74ae:	4c25      	ldr	r4, [pc, #148]	; (b7544 <__register_exitproc+0xb4>)
   b74b0:	601c      	str	r4, [r3, #0]
   b74b2:	4b25      	ldr	r3, [pc, #148]	; (b7548 <__register_exitproc+0xb8>)
   b74b4:	b113      	cbz	r3, b74bc <__register_exitproc+0x2c>
   b74b6:	681b      	ldr	r3, [r3, #0]
   b74b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b74bc:	6863      	ldr	r3, [r4, #4]
   b74be:	2b1f      	cmp	r3, #31
   b74c0:	dd07      	ble.n	b74d2 <__register_exitproc+0x42>
   b74c2:	f8d8 0000 	ldr.w	r0, [r8]
   b74c6:	f000 f847 	bl	b7558 <__retarget_lock_release_recursive>
   b74ca:	f04f 30ff 	mov.w	r0, #4294967295
   b74ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b74d2:	b34e      	cbz	r6, b7528 <__register_exitproc+0x98>
   b74d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b74d8:	b988      	cbnz	r0, b74fe <__register_exitproc+0x6e>
   b74da:	4b1c      	ldr	r3, [pc, #112]	; (b754c <__register_exitproc+0xbc>)
   b74dc:	b923      	cbnz	r3, b74e8 <__register_exitproc+0x58>
   b74de:	f8d8 0000 	ldr.w	r0, [r8]
   b74e2:	f000 f838 	bl	b7556 <__retarget_lock_release>
   b74e6:	e7f0      	b.n	b74ca <__register_exitproc+0x3a>
   b74e8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b74ec:	f7fd fec6 	bl	b527c <malloc>
   b74f0:	2800      	cmp	r0, #0
   b74f2:	d0f4      	beq.n	b74de <__register_exitproc+0x4e>
   b74f4:	2300      	movs	r3, #0
   b74f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b74fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b74fe:	6863      	ldr	r3, [r4, #4]
   b7500:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7504:	2201      	movs	r2, #1
   b7506:	409a      	lsls	r2, r3
   b7508:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b750c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7510:	4313      	orrs	r3, r2
   b7512:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7516:	2e02      	cmp	r6, #2
   b7518:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b751c:	bf02      	ittt	eq
   b751e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7522:	4313      	orreq	r3, r2
   b7524:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7528:	6863      	ldr	r3, [r4, #4]
   b752a:	f8d8 0000 	ldr.w	r0, [r8]
   b752e:	1c5a      	adds	r2, r3, #1
   b7530:	3302      	adds	r3, #2
   b7532:	6062      	str	r2, [r4, #4]
   b7534:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7538:	f000 f80e 	bl	b7558 <__retarget_lock_release_recursive>
   b753c:	2000      	movs	r0, #0
   b753e:	e7c6      	b.n	b74ce <__register_exitproc+0x3e>
   b7540:	2003e7f4 	.word	0x2003e7f4
   b7544:	2003e768 	.word	0x2003e768
   b7548:	00000000 	.word	0x00000000
   b754c:	000b527d 	.word	0x000b527d
   b7550:	2003e634 	.word	0x2003e634

000b7554 <__retarget_lock_acquire_recursive>:
   b7554:	4770      	bx	lr

000b7556 <__retarget_lock_release>:
   b7556:	4770      	bx	lr

000b7558 <__retarget_lock_release_recursive>:
   b7558:	4770      	bx	lr

000b755a <link_code_end>:
	...

000b755c <dynalib_user>:
   b755c:	4a4d 000b 4a89 000b 4ab1 000b 4ab5 000b     MJ...J...J...J..
   b756c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b757c:	7620 7269 7574 6c61 6e00 6e61 6900 666e      virtual.nan.inf
   b758c:	6f00 6676 2e00 0000                         .ovf....

000b7594 <_ZTVN5spark10LogHandlerE>:
	...
   b75a4:	4ad1 000b 4af9 000b                         .J...J..

000b75ac <_ZTVN5spark16SerialLogHandlerE>:
	...
   b75b4:	4afd 000b 4b31 000b 6279 000b 641d 000b     .J..1K..yb...d..

000b75c4 <_ZTVN5spark13EthernetClassE>:
	...
   b75cc:	534b 000b 5341 000b 5337 000b 532d 000b     KS..AS..7S..-S..
   b75dc:	5321 000b 5315 000b 6b4d 000b 6b55 000b     !S...S..Mk..Uk..
   b75ec:	5309 000b 5301 000b 52f7 000b 52ed 000b     .S...S...R...R..
   b75fc:	6c89 000b 6b85 000b 6b8d 000b               .l...k...k..

000b7608 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7610:	5599 000b 559b 000b 5559 000b 6cdf 000b     .U...U..YU...l..
   b7620:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   b7630:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   b7640:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   b7650:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   b7660:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   b7670:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
   b7680:	6e6c 6600 006e 0074 6f63 6564 6400 7465     ln.fn.t.code.det
   b7690:	6961 006c                                   ail.

000b7694 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b769c:	5afd 000b 5b15 000b 6279 000b 641d 000b     .Z...[..yb...d..

000b76ac <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b76b4:	5b29 000b 5b3d 000b 6455 000b 5683 000b     )[..=[..Ud...V..

000b76c4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b76cc:	5695 000b 56bb 000b 61dd 000b 5685 000b     .V...V...a...V..

000b76dc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b76e4:	5693 000b 56c9 000b 5a65 000b 56eb 000b     .V...V..eZ...V..
   b76f4:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b7704:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b7710 <_ZTV9IPAddress>:
	...
   b7718:	6739 000b 6729 000b 672b 000b               9g..)g..+g..

000b7724 <_ZTV9USBSerial>:
	...
   b772c:	681f 000b 6887 000b 685d 000b 556d 000b     .h...h..]h..mU..
   b773c:	684f 000b 6821 000b 6831 000b 6881 000b     Oh..!h..1h...h..
   b774c:	5659 000b 6841 000b 6819 000b               YV..Ah...h..

000b7758 <_ZTVN5spark13CellularClassE>:
	...
   b7760:	6987 000b 697d 000b 6973 000b 6929 000b     .i..}i..si..)i..
   b7770:	6967 000b 695b 000b 6b4d 000b 6b55 000b     gi..[i..Mk..Uk..
   b7780:	694f 000b 6947 000b 693d 000b 6933 000b     Oi..Gi..=i..3i..
   b7790:	6c89 000b 6b85 000b 6b8d 000b               .l...k...k..

000b779c <_ZTV11USARTSerial>:
	...
   b77a4:	69c1 000b 6a2d 000b 6a05 000b 556d 000b     .i..-j...j..mU..
   b77b4:	69d5 000b 69f1 000b 69e3 000b 69ff 000b     .i...i...i...i..
   b77c4:	5659 000b 69c3 000b 69c7 000b               YV...i...i..

000b77d0 <_ZTV7TwoWire>:
	...
   b77d8:	6a79 000b 6ac3 000b 6a9b 000b 6a7b 000b     yj...j...j..{j..
   b77e8:	6aa3 000b 6aab 000b 6ab3 000b 6abb 000b     .j...j...j...j..
   b77f8:	5659 000b                                   YV..

000b77fc <_ZTVN5spark12NetworkClassE>:
	...
   b7804:	6b0d 000b 6b17 000b 6b21 000b 6b2b 000b     .k...k..!k..+k..
   b7814:	6b35 000b 6b41 000b 6b4d 000b 6b55 000b     5k..Ak..Mk..Uk..
   b7824:	6b5d 000b 6b69 000b 6b71 000b 6b7b 000b     ]k..ik..qk..{k..
   b7834:	6c89 000b 6b85 000b 6b8d 000b 7525 7500     .l...k...k..%u.u
   b7844:	3025 7834                                    %04x.

000b7849 <_ZSt7nothrow>:
   b7849:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7859:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7869:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7879:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7889:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7899:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b78a9:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b78b9:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b78c9:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b78d9:	646e 632e                                    nd.c.

000b78de <_ctype_>:
   b78de:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b78ee:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b78fe:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b790e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b791e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b792e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b793e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b794e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b795e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b79df <link_const_data_end>:
	...

000b79e0 <link_constructors_location>:
   b79e0:	000b4de9 	.word	0x000b4de9
   b79e4:	000b5355 	.word	0x000b5355
   b79e8:	000b53bd 	.word	0x000b53bd
   b79ec:	000b5549 	.word	0x000b5549
   b79f0:	000b6269 	.word	0x000b6269
   b79f4:	000b65c9 	.word	0x000b65c9
   b79f8:	000b65e5 	.word	0x000b65e5
   b79fc:	000b6991 	.word	0x000b6991
   b7a00:	000b6c9d 	.word	0x000b6c9d

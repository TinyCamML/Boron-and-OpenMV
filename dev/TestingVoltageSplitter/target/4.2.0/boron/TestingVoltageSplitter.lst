
c:/Users/efarquh/Documents/VSCode/TestingVoltageSplitter/target/4.2.0/boron/TestingVoltageSplitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003940  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7960  000b7960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7984  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e5b8  000b7988  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c4  2003e62c  2003e62c  0002e62c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b79fc  000b79fc  000279fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7a24  000b7a24  00027a24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010e17c  00000000  00000000  00027a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000117e3  00000000  00000000  00135ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038f36  00000000  00000000  00147387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c88  00000000  00000000  001802bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a1e0  00000000  00000000  00182f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000360c5  00000000  00000000  0018d125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003927b  00000000  00000000  001c31ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133035  00000000  00000000  001fc465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000808c  00000000  00000000  0032f49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f8a1 	bl	b7178 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f8c3 	bl	b71c8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5b8 	.word	0x2003e5b8
   b404c:	000b7988 	.word	0x000b7988
   b4050:	2003e62c 	.word	0x2003e62c
   b4054:	2003e62c 	.word	0x2003e62c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fdf1 	bl	b5c48 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7930 	.word	0x000b7930
   b4080:	000b7954 	.word	0x000b7954

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b84c 	b.w	b4120 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f855 	bl	b4138 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bd91 	b.w	b5bb8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bb25 	b.w	b46e4 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bb23 	b.w	b46e4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bb29 	b.w	b46f4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fa6e 	bl	b458c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b436d 	.word	0x000b436d
   b40b8:	000b74e0 	.word	0x000b74e0

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d8:	4b0a      	ldr	r3, [pc, #40]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40da:	b510      	push	{r4, lr}
   b40dc:	4604      	mov	r4, r0
   b40de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40e0:	f000 ff1c 	bl	b4f1c <_ZN5spark10LogManager8instanceEv>
   b40e4:	4621      	mov	r1, r4
   b40e6:	f001 f954 	bl	b5392 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40ea:	f001 feb9 	bl	b5e60 <_Z16_fetch_usbserialv>
   b40ee:	f001 feab 	bl	b5e48 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40f2:	4620      	mov	r0, r4
   b40f4:	4b04      	ldr	r3, [pc, #16]	; (b4108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f6:	f840 3b04 	str.w	r3, [r0], #4
   b40fa:	f000 ffe5 	bl	b50c8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fe:	4620      	mov	r0, r4
   b4100:	bd10      	pop	{r4, pc}
   b4102:	bf00      	nop
   b4104:	000b7518 	.word	0x000b7518
   b4108:	000b7500 	.word	0x000b7500

000b410c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b410c:	b510      	push	{r4, lr}
   b410e:	4604      	mov	r4, r0
    }
   b4110:	f7ff ffe2 	bl	b40d8 <_ZN5spark16SerialLogHandlerD1Ev>
   b4114:	4620      	mov	r0, r4
   b4116:	2124      	movs	r1, #36	; 0x24
   b4118:	f7ff ffc1 	bl	b409e <_ZdlPvj>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}

000b4120 <setup>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b4120:	4803      	ldr	r0, [pc, #12]	; (b4130 <setup+0x10>)
   b4122:	2300      	movs	r3, #0
   b4124:	6840      	ldr	r0, [r0, #4]
   b4126:	461a      	mov	r2, r3
   b4128:	4619      	mov	r1, r3
   b412a:	f000 ba9b 	b.w	b4664 <network_off>
   b412e:	bf00      	nop
   b4130:	2003e6e4 	.word	0x2003e6e4
   b4134:	00000000 	.word	0x00000000

000b4138 <loop>:
void setup() {
  Cellular.off(); 
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b4138:	b538      	push	{r3, r4, r5, lr}
  // The core of your code will likely live here.
  float voltage = analogRead(A1) * ((3.3/4096)*((2000000+1300000)/2000000));
   b413a:	2012      	movs	r0, #18
   b413c:	f002 fa70 	bl	b6620 <analogRead>
   b4140:	4605      	mov	r5, r0
  delay(1000); 
   b4142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4146:	f001 fd0b 	bl	b5b60 <delay>
  Serial.println(voltage); 
   b414a:	f001 fe89 	bl	b5e60 <_Z16_fetch_usbserialv>
   b414e:	4604      	mov	r4, r0
  float voltage = analogRead(A1) * ((3.3/4096)*((2000000+1300000)/2000000));
   b4150:	4628      	mov	r0, r5
   b4152:	f002 fc51 	bl	b69f8 <__aeabi_i2d>
   b4156:	a30a      	add	r3, pc, #40	; (adr r3, b4180 <loop+0x48>)
   b4158:	e9d3 2300 	ldrd	r2, r3, [r3]
   b415c:	f002 fcb6 	bl	b6acc <__aeabi_dmul>
   b4160:	f002 ffac 	bl	b70bc <__aeabi_d2f>
  Serial.println(voltage); 
   b4164:	2102      	movs	r1, #2
   b4166:	ee00 0a10 	vmov	s0, r0
   b416a:	4620      	mov	r0, r4
   b416c:	f000 fd39 	bl	b4be2 <_ZN5Print7printlnEfi>
  delay(1000); 
   b4170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1000); 
   b4174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4178:	f001 bcf2 	b.w	b5b60 <delay>
   b417c:	f3af 8000 	nop.w
   b4180:	66666666 	.word	0x66666666
   b4184:	3f4a6666 	.word	0x3f4a6666

000b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4188:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b418a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b418e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4190:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4192:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4196:	42ae      	cmp	r6, r5
   b4198:	d004      	beq.n	b41a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b419a:	4628      	mov	r0, r5
   b419c:	f000 fb34 	bl	b4808 <_ZN6StringD1Ev>
   b41a0:	3514      	adds	r5, #20
   b41a2:	e7f8      	b.n	b4196 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b41a4:	6820      	ldr	r0, [r4, #0]
   b41a6:	f000 faa5 	bl	b46f4 <free>
    AllocatorT::free(data_);
}
   b41aa:	4620      	mov	r0, r4
   b41ac:	bd70      	pop	{r4, r5, r6, pc}

000b41ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b41ae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b41b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41b2:	4604      	mov	r4, r0
   b41b4:	460d      	mov	r5, r1
   b41b6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b41b8:	d916      	bls.n	b41e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b41ba:	4290      	cmp	r0, r2
   b41bc:	d215      	bcs.n	b41ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b41be:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b41c2:	1a75      	subs	r5, r6, r1
   b41c4:	f1a1 0714 	sub.w	r7, r1, #20
   b41c8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b41ca:	42b7      	cmp	r7, r6
   b41cc:	d01c      	beq.n	b4208 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b41ce:	b12c      	cbz	r4, b41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b41d0:	4631      	mov	r1, r6
   b41d2:	4620      	mov	r0, r4
   b41d4:	f000 fb81 	bl	b48da <_ZN6StringC1EOS_>
   b41d8:	7c33      	ldrb	r3, [r6, #16]
   b41da:	7423      	strb	r3, [r4, #16]
   b41dc:	4630      	mov	r0, r6
   b41de:	f000 fb13 	bl	b4808 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b41e2:	3e14      	subs	r6, #20
   b41e4:	3c14      	subs	r4, #20
   b41e6:	e7f0      	b.n	b41ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b41e8:	d00e      	beq.n	b4208 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b41ea:	42b5      	cmp	r5, r6
   b41ec:	d00c      	beq.n	b4208 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b41ee:	b12c      	cbz	r4, b41fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b41f0:	4629      	mov	r1, r5
   b41f2:	4620      	mov	r0, r4
   b41f4:	f000 fb71 	bl	b48da <_ZN6StringC1EOS_>
   b41f8:	7c2b      	ldrb	r3, [r5, #16]
   b41fa:	7423      	strb	r3, [r4, #16]
   b41fc:	4628      	mov	r0, r5
   b41fe:	f000 fb03 	bl	b4808 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4202:	3514      	adds	r5, #20
   b4204:	3414      	adds	r4, #20
   b4206:	e7f0      	b.n	b41ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b420a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b420e:	2300      	movs	r3, #0
   b4210:	e9c0 3300 	strd	r3, r3, [r0]
   b4214:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4216:	684f      	ldr	r7, [r1, #4]
   b4218:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b421a:	4604      	mov	r4, r0
   b421c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b421e:	dd23      	ble.n	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4220:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4224:	fb08 f007 	mul.w	r0, r8, r7
   b4228:	f000 fa5c 	bl	b46e4 <malloc>
            if (!d) {
   b422c:	4605      	mov	r5, r0
   b422e:	b1d8      	cbz	r0, b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4230:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4234:	fb08 1202 	mla	r2, r8, r2, r1
   b4238:	f7ff ffb9 	bl	b41ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b423c:	6820      	ldr	r0, [r4, #0]
   b423e:	f000 fa59 	bl	b46f4 <free>
        data_ = d;
   b4242:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4244:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4246:	e9d6 7300 	ldrd	r7, r3, [r6]
   b424a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b424e:	45b8      	cmp	r8, r7
   b4250:	d008      	beq.n	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4252:	4639      	mov	r1, r7
   b4254:	4628      	mov	r0, r5
   b4256:	f000 fb5a 	bl	b490e <_ZN6StringC1ERKS_>
   b425a:	7c3b      	ldrb	r3, [r7, #16]
   b425c:	742b      	strb	r3, [r5, #16]
   b425e:	3714      	adds	r7, #20
   b4260:	3514      	adds	r5, #20
   b4262:	e7f4      	b.n	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4264:	6873      	ldr	r3, [r6, #4]
   b4266:	6063      	str	r3, [r4, #4]
}
   b4268:	4620      	mov	r0, r4
   b426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4270 <_GLOBAL__sub_I_SystemMode>:
   b4270:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4272:	4b24      	ldr	r3, [pc, #144]	; (b4304 <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
   b4274:	4a24      	ldr	r2, [pc, #144]	; (b4308 <_GLOBAL__sub_I_SystemMode+0x98>)
   b4276:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4278:	2400      	movs	r4, #0
   b427a:	b08c      	sub	sp, #48	; 0x30
   b427c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4280:	2002      	movs	r0, #2
   b4282:	f000 f99b 	bl	b45bc <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4286:	4621      	mov	r1, r4
   b4288:	2001      	movs	r0, #1
   b428a:	f000 f9a7 	bl	b45dc <system_thread_set_state>
        capacity_(0) {
   b428e:	e9cd 4400 	strd	r4, r4, [sp]
   b4292:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4294:	f001 fde4 	bl	b5e60 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4298:	4c1c      	ldr	r4, [pc, #112]	; (b430c <_GLOBAL__sub_I_SystemMode+0x9c>)
   b429a:	4605      	mov	r5, r0
   b429c:	4669      	mov	r1, sp
   b429e:	a803      	add	r0, sp, #12
   b42a0:	f7ff ffb3 	bl	b420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b42a4:	4626      	mov	r6, r4
        stream_(&stream) {
   b42a6:	a903      	add	r1, sp, #12
   b42a8:	a806      	add	r0, sp, #24
   b42aa:	f7ff ffae 	bl	b420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b42ae:	4b18      	ldr	r3, [pc, #96]	; (b4310 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b42b0:	f846 3b04 	str.w	r3, [r6], #4
   b42b4:	a906      	add	r1, sp, #24
   b42b6:	a809      	add	r0, sp, #36	; 0x24
   b42b8:	f7ff ffa7 	bl	b420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b42bc:	aa09      	add	r2, sp, #36	; 0x24
   b42be:	211e      	movs	r1, #30
   b42c0:	4630      	mov	r0, r6
   b42c2:	f001 f949 	bl	b5558 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b42c6:	a809      	add	r0, sp, #36	; 0x24
   b42c8:	f7ff ff5e 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b42cc:	a806      	add	r0, sp, #24
   b42ce:	f7ff ff5b 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b42d2:	4b10      	ldr	r3, [pc, #64]	; (b4314 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b42d4:	6023      	str	r3, [r4, #0]
   b42d6:	6225      	str	r5, [r4, #32]
   b42d8:	a803      	add	r0, sp, #12
   b42da:	f7ff ff55 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b42de:	4b0e      	ldr	r3, [pc, #56]	; (b4318 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b42e0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b42e2:	f001 fdbd 	bl	b5e60 <_Z16_fetch_usbserialv>
   b42e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42ea:	f001 fda9 	bl	b5e40 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b42ee:	f000 fe15 	bl	b4f1c <_ZN5spark10LogManager8instanceEv>
   b42f2:	4621      	mov	r1, r4
   b42f4:	f001 f806 	bl	b5304 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b42f8:	4668      	mov	r0, sp
   b42fa:	f7ff ff45 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b42fe:	b00c      	add	sp, #48	; 0x30
   b4300:	bd70      	pop	{r4, r5, r6, pc}
   b4302:	bf00      	nop
   b4304:	2003e62c 	.word	0x2003e62c
   b4308:	ffff0000 	.word	0xffff0000
   b430c:	2003e638 	.word	0x2003e638
   b4310:	000b7500 	.word	0x000b7500
   b4314:	000b7608 	.word	0x000b7608
   b4318:	000b7518 	.word	0x000b7518

000b431c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b431c:	b508      	push	{r3, lr}
   b431e:	4b02      	ldr	r3, [pc, #8]	; (b4328 <netdb_freeaddrinfo+0xc>)
   b4320:	681b      	ldr	r3, [r3, #0]
   b4322:	689b      	ldr	r3, [r3, #8]
   b4324:	9301      	str	r3, [sp, #4]
   b4326:	bd08      	pop	{r3, pc}
   b4328:	00030268 	.word	0x00030268

000b432c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b432c:	b508      	push	{r3, lr}
   b432e:	4b02      	ldr	r3, [pc, #8]	; (b4338 <netdb_getaddrinfo+0xc>)
   b4330:	681b      	ldr	r3, [r3, #0]
   b4332:	68db      	ldr	r3, [r3, #12]
   b4334:	9301      	str	r3, [sp, #4]
   b4336:	bd08      	pop	{r3, pc}
   b4338:	00030268 	.word	0x00030268

000b433c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b433c:	b508      	push	{r3, lr}
   b433e:	4b02      	ldr	r3, [pc, #8]	; (b4348 <HAL_Validate_Pin_Function+0xc>)
   b4340:	681b      	ldr	r3, [r3, #0]
   b4342:	685b      	ldr	r3, [r3, #4]
   b4344:	9301      	str	r3, [sp, #4]
   b4346:	bd08      	pop	{r3, pc}
   b4348:	0003022c 	.word	0x0003022c

000b434c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b434c:	b508      	push	{r3, lr}
   b434e:	4b02      	ldr	r3, [pc, #8]	; (b4358 <hal_adc_read+0xc>)
   b4350:	681b      	ldr	r3, [r3, #0]
   b4352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4354:	9301      	str	r3, [sp, #4]
   b4356:	bd08      	pop	{r3, pc}
   b4358:	0003022c 	.word	0x0003022c

000b435c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b435c:	b508      	push	{r3, lr}
   b435e:	4b02      	ldr	r3, [pc, #8]	; (b4368 <HAL_RNG_GetRandomNumber+0xc>)
   b4360:	681b      	ldr	r3, [r3, #0]
   b4362:	685b      	ldr	r3, [r3, #4]
   b4364:	9301      	str	r3, [sp, #4]
   b4366:	bd08      	pop	{r3, pc}
   b4368:	00030218 	.word	0x00030218

000b436c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b436c:	b508      	push	{r3, lr}
   b436e:	4b02      	ldr	r3, [pc, #8]	; (b4378 <HAL_Delay_Microseconds+0xc>)
   b4370:	681b      	ldr	r3, [r3, #0]
   b4372:	68db      	ldr	r3, [r3, #12]
   b4374:	9301      	str	r3, [sp, #4]
   b4376:	bd08      	pop	{r3, pc}
   b4378:	00030218 	.word	0x00030218

000b437c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b437c:	b508      	push	{r3, lr}
   b437e:	4b02      	ldr	r3, [pc, #8]	; (b4388 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4380:	681b      	ldr	r3, [r3, #0]
   b4382:	695b      	ldr	r3, [r3, #20]
   b4384:	9301      	str	r3, [sp, #4]
   b4386:	bd08      	pop	{r3, pc}
   b4388:	00030218 	.word	0x00030218

000b438c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <os_mutex_recursive_create+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	00030248 	.word	0x00030248

000b439c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <os_mutex_recursive_destroy+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	00030248 	.word	0x00030248

000b43ac <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <os_mutex_recursive_lock+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	00030248 	.word	0x00030248

000b43bc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <os_mutex_recursive_unlock+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	00030248 	.word	0x00030248

000b43cc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <inet_inet_ntop+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	695b      	ldr	r3, [r3, #20]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	00030264 	.word	0x00030264

000b43dc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <hal_usart_end+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	689b      	ldr	r3, [r3, #8]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	0003023c 	.word	0x0003023c

000b43ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <hal_usart_write+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	68db      	ldr	r3, [r3, #12]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	0003023c 	.word	0x0003023c

000b43fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <hal_usart_available+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	691b      	ldr	r3, [r3, #16]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	0003023c 	.word	0x0003023c

000b440c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <hal_usart_read+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	695b      	ldr	r3, [r3, #20]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	0003023c 	.word	0x0003023c

000b441c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <hal_usart_peek+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	699b      	ldr	r3, [r3, #24]
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	0003023c 	.word	0x0003023c

000b442c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <hal_usart_flush+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	69db      	ldr	r3, [r3, #28]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	0003023c 	.word	0x0003023c

000b443c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <hal_usart_is_enabled+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	6a1b      	ldr	r3, [r3, #32]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003023c 	.word	0x0003023c

000b444c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <hal_usart_available_data_for_write+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	0003023c 	.word	0x0003023c

000b445c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <hal_usart_begin_config+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	0003023c 	.word	0x0003023c

000b446c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <hal_usart_init_ex+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	0003023c 	.word	0x0003023c

000b447c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <hal_i2c_write+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	6a1b      	ldr	r3, [r3, #32]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030228 	.word	0x00030228

000b448c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <hal_i2c_available+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030228 	.word	0x00030228

000b449c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <hal_i2c_read+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030228 	.word	0x00030228

000b44ac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <hal_i2c_peek+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030228 	.word	0x00030228

000b44bc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <hal_i2c_flush+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030228 	.word	0x00030228

000b44cc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <hal_i2c_is_enabled+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030228 	.word	0x00030228

000b44dc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <hal_i2c_init+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030228 	.word	0x00030228

000b44ec <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <hal_spi_init+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	69db      	ldr	r3, [r3, #28]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030230 	.word	0x00030230

000b44fc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <hal_spi_is_enabled+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6a1b      	ldr	r3, [r3, #32]
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030230 	.word	0x00030230

000b450c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <HAL_USB_USART_Init+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	681b      	ldr	r3, [r3, #0]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	0003024c 	.word	0x0003024c

000b451c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <HAL_USB_USART_Begin+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	685b      	ldr	r3, [r3, #4]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	0003024c 	.word	0x0003024c

000b452c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <HAL_USB_USART_End+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	689b      	ldr	r3, [r3, #8]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	0003024c 	.word	0x0003024c

000b453c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <HAL_USB_USART_Available_Data+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	691b      	ldr	r3, [r3, #16]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	0003024c 	.word	0x0003024c

000b454c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	695b      	ldr	r3, [r3, #20]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	0003024c 	.word	0x0003024c

000b455c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <HAL_USB_USART_Receive_Data+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	699b      	ldr	r3, [r3, #24]
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003024c 	.word	0x0003024c

000b456c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <HAL_USB_USART_Send_Data+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	69db      	ldr	r3, [r3, #28]
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003024c 	.word	0x0003024c

000b457c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <HAL_USB_USART_Flush_Data+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	6a1b      	ldr	r3, [r3, #32]
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003024c 	.word	0x0003024c

000b458c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <panic_+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	00030260 	.word	0x00030260

000b459c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <log_level_name+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	00030260 	.word	0x00030260

000b45ac <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <log_set_callbacks+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	00030260 	.word	0x00030260

000b45bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <set_system_mode+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	685b      	ldr	r3, [r3, #4]
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	00030220 	.word	0x00030220

000b45cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <system_delay_ms+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	695b      	ldr	r3, [r3, #20]
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	00030220 	.word	0x00030220

000b45dc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b02      	ldr	r3, [pc, #8]	; (b45e8 <system_thread_set_state+0xc>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45e4:	9301      	str	r3, [sp, #4]
   b45e6:	bd08      	pop	{r3, pc}
   b45e8:	00030220 	.word	0x00030220

000b45ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b03      	ldr	r3, [pc, #12]	; (b45fc <system_ctrl_set_app_request_handler+0x10>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b45f6:	9301      	str	r3, [sp, #4]
   b45f8:	bd08      	pop	{r3, pc}
   b45fa:	0000      	.short	0x0000
   b45fc:	00030220 	.word	0x00030220

000b4600 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b03      	ldr	r3, [pc, #12]	; (b4610 <system_ctrl_set_result+0x10>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b460a:	9301      	str	r3, [sp, #4]
   b460c:	bd08      	pop	{r3, pc}
   b460e:	0000      	.short	0x0000
   b4610:	00030220 	.word	0x00030220

000b4614 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <network_connect+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	685b      	ldr	r3, [r3, #4]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030240 	.word	0x00030240

000b4624 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <network_connecting+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	689b      	ldr	r3, [r3, #8]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030240 	.word	0x00030240

000b4634 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <network_disconnect+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	68db      	ldr	r3, [r3, #12]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030240 	.word	0x00030240

000b4644 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <network_ready+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	691b      	ldr	r3, [r3, #16]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030240 	.word	0x00030240

000b4654 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <network_on+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	695b      	ldr	r3, [r3, #20]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030240 	.word	0x00030240

000b4664 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <network_off+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	699b      	ldr	r3, [r3, #24]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030240 	.word	0x00030240

000b4674 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <network_listen+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	69db      	ldr	r3, [r3, #28]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030240 	.word	0x00030240

000b4684 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <network_listening+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6a1b      	ldr	r3, [r3, #32]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030240 	.word	0x00030240

000b4694 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <network_set_listen_timeout+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030240 	.word	0x00030240

000b46a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <network_get_listen_timeout+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030240 	.word	0x00030240

000b46b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <network_is_on+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030240 	.word	0x00030240

000b46c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <network_is_off+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030240 	.word	0x00030240

000b46d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030244 	.word	0x00030244

000b46e4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <malloc+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	681b      	ldr	r3, [r3, #0]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	0003021c 	.word	0x0003021c

000b46f4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <free+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	685b      	ldr	r3, [r3, #4]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	0003021c 	.word	0x0003021c

000b4704 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <realloc+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	689b      	ldr	r3, [r3, #8]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	0003021c 	.word	0x0003021c

000b4714 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <vsnprintf+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	0003021c 	.word	0x0003021c

000b4724 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <__errno+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	0003021c 	.word	0x0003021c

000b4734 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <__assert_func+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003021c 	.word	0x0003021c

000b4744 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <newlib_impure_ptr_callback+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	0003021c 	.word	0x0003021c

000b4754 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4754:	2200      	movs	r2, #0
   b4756:	6840      	ldr	r0, [r0, #4]
   b4758:	4611      	mov	r1, r2
   b475a:	f7ff bf93 	b.w	b4684 <network_listening>

000b475e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b475e:	2200      	movs	r2, #0
   b4760:	6840      	ldr	r0, [r0, #4]
   b4762:	4611      	mov	r1, r2
   b4764:	f7ff bf9e 	b.w	b46a4 <network_get_listen_timeout>

000b4768 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4768:	6840      	ldr	r0, [r0, #4]
   b476a:	2200      	movs	r2, #0
   b476c:	f7ff bf92 	b.w	b4694 <network_set_listen_timeout>

000b4770 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4770:	6840      	ldr	r0, [r0, #4]
   b4772:	2200      	movs	r2, #0
   b4774:	f081 0101 	eor.w	r1, r1, #1
   b4778:	f7ff bf7c 	b.w	b4674 <network_listen>

000b477c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b477c:	2300      	movs	r3, #0
   b477e:	6840      	ldr	r0, [r0, #4]
   b4780:	461a      	mov	r2, r3
   b4782:	4619      	mov	r1, r3
   b4784:	f7ff bf6e 	b.w	b4664 <network_off>

000b4788 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4788:	2300      	movs	r3, #0
   b478a:	6840      	ldr	r0, [r0, #4]
   b478c:	461a      	mov	r2, r3
   b478e:	4619      	mov	r1, r3
   b4790:	f7ff bf60 	b.w	b4654 <network_on>

000b4794 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4794:	2200      	movs	r2, #0
   b4796:	6840      	ldr	r0, [r0, #4]
   b4798:	4611      	mov	r1, r2
   b479a:	f7ff bf53 	b.w	b4644 <network_ready>

000b479e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b479e:	2200      	movs	r2, #0
   b47a0:	6840      	ldr	r0, [r0, #4]
   b47a2:	4611      	mov	r1, r2
   b47a4:	f7ff bf3e 	b.w	b4624 <network_connecting>

000b47a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b47a8:	6840      	ldr	r0, [r0, #4]
   b47aa:	2200      	movs	r2, #0
   b47ac:	2102      	movs	r1, #2
   b47ae:	f7ff bf41 	b.w	b4634 <network_disconnect>

000b47b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b47b2:	2300      	movs	r3, #0
   b47b4:	6840      	ldr	r0, [r0, #4]
   b47b6:	461a      	mov	r2, r3
   b47b8:	f7ff bf2c 	b.w	b4614 <network_connect>

000b47bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b47bc:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b47be:	2203      	movs	r2, #3
   b47c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b47c2:	4a02      	ldr	r2, [pc, #8]	; (b47cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b47c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b47c6:	4770      	bx	lr
   b47c8:	2003e65c 	.word	0x2003e65c
   b47cc:	000b7530 	.word	0x000b7530

000b47d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b47d0:	b510      	push	{r4, lr}
   b47d2:	4604      	mov	r4, r0
   b47d4:	4608      	mov	r0, r1
{
    _spi = spi;
   b47d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b47d8:	f7ff fe88 	bl	b44ec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b47dc:	2300      	movs	r3, #0
   b47de:	6063      	str	r3, [r4, #4]
}
   b47e0:	4620      	mov	r0, r4
   b47e2:	bd10      	pop	{r4, pc}

000b47e4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b47e4:	4b05      	ldr	r3, [pc, #20]	; (b47fc <_GLOBAL__sub_I_System+0x18>)
   b47e6:	2202      	movs	r2, #2
   b47e8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47ea:	4b05      	ldr	r3, [pc, #20]	; (b4800 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b47ec:	4a05      	ldr	r2, [pc, #20]	; (b4804 <_GLOBAL__sub_I_System+0x20>)
   b47ee:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b47f0:	2000      	movs	r0, #0
   b47f2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47f6:	f7ff bee1 	b.w	b45bc <set_system_mode>
   b47fa:	bf00      	nop
   b47fc:	2003e670 	.word	0x2003e670
   b4800:	2003e664 	.word	0x2003e664
   b4804:	ffff0000 	.word	0xffff0000

000b4808 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b4808:	b510      	push	{r4, lr}
   b480a:	4604      	mov	r4, r0
{
    free(buffer);
   b480c:	6800      	ldr	r0, [r0, #0]
   b480e:	f7ff ff71 	bl	b46f4 <free>
}
   b4812:	4620      	mov	r0, r4
   b4814:	bd10      	pop	{r4, pc}

000b4816 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b4816:	b510      	push	{r4, lr}
   b4818:	4604      	mov	r4, r0
    if (buffer) {
   b481a:	6800      	ldr	r0, [r0, #0]
   b481c:	b108      	cbz	r0, b4822 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b481e:	f7ff ff69 	bl	b46f4 <free>
    }
    buffer = nullptr;
   b4822:	2300      	movs	r3, #0
    capacity = len = 0;
   b4824:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b4828:	6023      	str	r3, [r4, #0]
}
   b482a:	bd10      	pop	{r4, pc}

000b482c <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b482c:	b538      	push	{r3, r4, r5, lr}
   b482e:	4604      	mov	r4, r0
   b4830:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4832:	6800      	ldr	r0, [r0, #0]
   b4834:	3101      	adds	r1, #1
   b4836:	f7ff ff65 	bl	b4704 <realloc>
    if (newbuffer) {
   b483a:	b110      	cbz	r0, b4842 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b483c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4840:	2001      	movs	r0, #1
    }
    return 0;
}
   b4842:	bd38      	pop	{r3, r4, r5, pc}

000b4844 <_ZN6String7reserveEj>:
{
   b4844:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b4846:	6803      	ldr	r3, [r0, #0]
{
   b4848:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b484a:	b123      	cbz	r3, b4856 <_ZN6String7reserveEj+0x12>
   b484c:	6843      	ldr	r3, [r0, #4]
   b484e:	428b      	cmp	r3, r1
   b4850:	d301      	bcc.n	b4856 <_ZN6String7reserveEj+0x12>
   b4852:	2001      	movs	r0, #1
}
   b4854:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b4856:	4620      	mov	r0, r4
   b4858:	f7ff ffe8 	bl	b482c <_ZN6String12changeBufferEj>
   b485c:	2800      	cmp	r0, #0
   b485e:	d0f9      	beq.n	b4854 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4860:	68a3      	ldr	r3, [r4, #8]
   b4862:	2b00      	cmp	r3, #0
   b4864:	d1f5      	bne.n	b4852 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b4866:	6822      	ldr	r2, [r4, #0]
   b4868:	7013      	strb	r3, [r2, #0]
   b486a:	e7f2      	b.n	b4852 <_ZN6String7reserveEj+0xe>

000b486c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b486c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b486e:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4870:	4611      	mov	r1, r2
   b4872:	9201      	str	r2, [sp, #4]
{
   b4874:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b4876:	f7ff ffe5 	bl	b4844 <_ZN6String7reserveEj>
   b487a:	9a01      	ldr	r2, [sp, #4]
   b487c:	b928      	cbnz	r0, b488a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b487e:	4620      	mov	r0, r4
   b4880:	f7ff ffc9 	bl	b4816 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b4884:	4620      	mov	r0, r4
   b4886:	b003      	add	sp, #12
   b4888:	bd30      	pop	{r4, r5, pc}
    len = length;
   b488a:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b488c:	4629      	mov	r1, r5
   b488e:	6820      	ldr	r0, [r4, #0]
   b4890:	f002 fc72 	bl	b7178 <memcpy>
    buffer[len] = 0;
   b4894:	6822      	ldr	r2, [r4, #0]
   b4896:	68a3      	ldr	r3, [r4, #8]
   b4898:	2100      	movs	r1, #0
   b489a:	54d1      	strb	r1, [r2, r3]
    return *this;
   b489c:	e7f2      	b.n	b4884 <_ZN6String4copyEPKcj+0x18>

000b489e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b489e:	b538      	push	{r3, r4, r5, lr}
   b48a0:	4605      	mov	r5, r0
    if (buffer) {
   b48a2:	6800      	ldr	r0, [r0, #0]
{
   b48a4:	460c      	mov	r4, r1
    if (buffer) {
   b48a6:	b170      	cbz	r0, b48c6 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b48a8:	686a      	ldr	r2, [r5, #4]
   b48aa:	688b      	ldr	r3, [r1, #8]
   b48ac:	429a      	cmp	r2, r3
   b48ae:	d308      	bcc.n	b48c2 <_ZN6String4moveERS_+0x24>
   b48b0:	6809      	ldr	r1, [r1, #0]
   b48b2:	b131      	cbz	r1, b48c2 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b48b4:	f002 fcdf 	bl	b7276 <strcpy>
            len = rhs.len;
   b48b8:	68a3      	ldr	r3, [r4, #8]
   b48ba:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b48bc:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b48be:	60a3      	str	r3, [r4, #8]
}
   b48c0:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b48c2:	f7ff ff17 	bl	b46f4 <free>
    buffer = rhs.buffer;
   b48c6:	6823      	ldr	r3, [r4, #0]
   b48c8:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b48ca:	6863      	ldr	r3, [r4, #4]
   b48cc:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b48ce:	68a3      	ldr	r3, [r4, #8]
   b48d0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b48d2:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b48d4:	e9c4 3300 	strd	r3, r3, [r4]
   b48d8:	e7f1      	b.n	b48be <_ZN6String4moveERS_+0x20>

000b48da <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b48da:	b510      	push	{r4, lr}
    buffer = nullptr;
   b48dc:	2300      	movs	r3, #0
    capacity = 0;
   b48de:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b48e2:	4604      	mov	r4, r0
    len = 0;
   b48e4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b48e6:	7303      	strb	r3, [r0, #12]
    move(rval);
   b48e8:	f7ff ffd9 	bl	b489e <_ZN6String4moveERS_>
}
   b48ec:	4620      	mov	r0, r4
   b48ee:	bd10      	pop	{r4, pc}

000b48f0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b48f0:	4288      	cmp	r0, r1
{
   b48f2:	b510      	push	{r4, lr}
   b48f4:	4604      	mov	r4, r0
    if (this == &rhs) {
   b48f6:	d005      	beq.n	b4904 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b48f8:	680b      	ldr	r3, [r1, #0]
   b48fa:	b12b      	cbz	r3, b4908 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b48fc:	688a      	ldr	r2, [r1, #8]
   b48fe:	4619      	mov	r1, r3
   b4900:	f7ff ffb4 	bl	b486c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b4904:	4620      	mov	r0, r4
   b4906:	bd10      	pop	{r4, pc}
        invalidate();
   b4908:	f7ff ff85 	bl	b4816 <_ZN6String10invalidateEv>
   b490c:	e7fa      	b.n	b4904 <_ZN6StringaSERKS_+0x14>

000b490e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b490e:	b510      	push	{r4, lr}
    buffer = nullptr;
   b4910:	2300      	movs	r3, #0
String::String(const String &value)
   b4912:	4604      	mov	r4, r0
    capacity = 0;
   b4914:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b4918:	6083      	str	r3, [r0, #8]
    flags = 0;
   b491a:	7303      	strb	r3, [r0, #12]
    *this = value;
   b491c:	f7ff ffe8 	bl	b48f0 <_ZN6StringaSERKS_>
}
   b4920:	4620      	mov	r0, r4
   b4922:	bd10      	pop	{r4, pc}

000b4924 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4924:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4926:	6843      	ldr	r3, [r0, #4]
   b4928:	3b01      	subs	r3, #1
    {
   b492a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b492c:	6043      	str	r3, [r0, #4]
   b492e:	b963      	cbnz	r3, b494a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4930:	6803      	ldr	r3, [r0, #0]
   b4932:	689b      	ldr	r3, [r3, #8]
   b4934:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4936:	68a3      	ldr	r3, [r4, #8]
   b4938:	3b01      	subs	r3, #1
   b493a:	60a3      	str	r3, [r4, #8]
   b493c:	b92b      	cbnz	r3, b494a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b493e:	6823      	ldr	r3, [r4, #0]
   b4940:	4620      	mov	r0, r4
   b4942:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4948:	4718      	bx	r3
    }
   b494a:	bd10      	pop	{r4, pc}

000b494c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b494c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b494e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4952:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4954:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4958:	42ae      	cmp	r6, r5
   b495a:	d004      	beq.n	b4966 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b495c:	4628      	mov	r0, r5
   b495e:	f7ff ff53 	bl	b4808 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4962:	3510      	adds	r5, #16
   b4964:	e7f8      	b.n	b4958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4966:	6820      	ldr	r0, [r4, #0]
   b4968:	f7ff fec4 	bl	b46f4 <free>
    AllocatorT::free(data_);
}
   b496c:	4620      	mov	r0, r4
   b496e:	bd70      	pop	{r4, r5, r6, pc}

000b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4970:	b510      	push	{r4, lr}
   b4972:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b4974:	6800      	ldr	r0, [r0, #0]
   b4976:	b108      	cbz	r0, b497c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4978:	f7ff ffd4 	bl	b4924 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b497c:	4620      	mov	r0, r4
   b497e:	bd10      	pop	{r4, pc}

000b4980 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4980:	4802      	ldr	r0, [pc, #8]	; (b498c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4982:	2300      	movs	r3, #0
   b4984:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4986:	f7ff bd01 	b.w	b438c <os_mutex_recursive_create>
   b498a:	bf00      	nop
   b498c:	2003e674 	.word	0x2003e674

000b4990 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4992:	4606      	mov	r6, r0
   b4994:	460d      	mov	r5, r1
  size_t n = 0;
   b4996:	188f      	adds	r7, r1, r2
   b4998:	2400      	movs	r4, #0
  while (size--) {
   b499a:	42bd      	cmp	r5, r7
   b499c:	d00c      	beq.n	b49b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b499e:	6833      	ldr	r3, [r6, #0]
   b49a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b49a4:	689b      	ldr	r3, [r3, #8]
   b49a6:	4630      	mov	r0, r6
   b49a8:	4798      	blx	r3
     if (chunk>=0)
   b49aa:	1e03      	subs	r3, r0, #0
   b49ac:	db01      	blt.n	b49b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b49ae:	441c      	add	r4, r3
  while (size--) {
   b49b0:	e7f3      	b.n	b499a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b49b2:	2c00      	cmp	r4, #0
   b49b4:	bf08      	it	eq
   b49b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b49b8:	4620      	mov	r0, r4
   b49ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b49bc:	b513      	push	{r0, r1, r4, lr}
   b49be:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b49c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b49c2:	b159      	cbz	r1, b49dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b49c4:	9101      	str	r1, [sp, #4]
   b49c6:	f002 fc5e 	bl	b7286 <strlen>
   b49ca:	6823      	ldr	r3, [r4, #0]
   b49cc:	9901      	ldr	r1, [sp, #4]
   b49ce:	68db      	ldr	r3, [r3, #12]
   b49d0:	4602      	mov	r2, r0
   b49d2:	4620      	mov	r0, r4
    }
   b49d4:	b002      	add	sp, #8
   b49d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b49da:	4718      	bx	r3
    }
   b49dc:	b002      	add	sp, #8
   b49de:	bd10      	pop	{r4, pc}

000b49e0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b49e0:	6803      	ldr	r3, [r0, #0]
   b49e2:	689b      	ldr	r3, [r3, #8]
   b49e4:	4718      	bx	r3

000b49e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b49e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b49e8:	210d      	movs	r1, #13
{
   b49ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b49ec:	f7ff fff8 	bl	b49e0 <_ZN5Print5printEc>
  n += print('\n');
   b49f0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b49f2:	4604      	mov	r4, r0
  n += print('\n');
   b49f4:	4628      	mov	r0, r5
   b49f6:	f7ff fff3 	bl	b49e0 <_ZN5Print5printEc>
  return n;
}
   b49fa:	4420      	add	r0, r4
   b49fc:	bd38      	pop	{r3, r4, r5, pc}

000b49fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b49fe:	b530      	push	{r4, r5, lr}
   b4a00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4a02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4a04:	2a01      	cmp	r2, #1
  *str = '\0';
   b4a06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4a0a:	bf98      	it	ls
   b4a0c:	220a      	movls	r2, #10
   b4a0e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4a10:	460d      	mov	r5, r1
   b4a12:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4a16:	fb01 5312 	mls	r3, r1, r2, r5
   b4a1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a1e:	2b09      	cmp	r3, #9
   b4a20:	bf94      	ite	ls
   b4a22:	3330      	addls	r3, #48	; 0x30
   b4a24:	3337      	addhi	r3, #55	; 0x37
   b4a26:	b2db      	uxtb	r3, r3
  } while(n);
   b4a28:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a2e:	d9ef      	bls.n	b4a10 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a30:	4621      	mov	r1, r4
   b4a32:	f7ff ffc3 	bl	b49bc <_ZN5Print5writeEPKc>
}
   b4a36:	b00b      	add	sp, #44	; 0x2c
   b4a38:	bd30      	pop	{r4, r5, pc}
	...

000b4a3c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b4a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a40:	ec55 4b10 	vmov	r4, r5, d0
   b4a44:	4606      	mov	r6, r0
   b4a46:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b4a48:	ee10 2a10 	vmov	r2, s0
   b4a4c:	ee10 0a10 	vmov	r0, s0
   b4a50:	462b      	mov	r3, r5
   b4a52:	4629      	mov	r1, r5
   b4a54:	f002 fad4 	bl	b7000 <__aeabi_dcmpun>
   b4a58:	b140      	cbz	r0, b4a6c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b4a5a:	4953      	ldr	r1, [pc, #332]	; (b4ba8 <_ZN5Print10printFloatEdh+0x16c>)
   b4a5c:	4630      	mov	r0, r6
   b4a5e:	f7ff ffad 	bl	b49bc <_ZN5Print5writeEPKc>
   b4a62:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b4a64:	4650      	mov	r0, sl
   b4a66:	b003      	add	sp, #12
   b4a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b4a6c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b4a70:	4b4e      	ldr	r3, [pc, #312]	; (b4bac <_ZN5Print10printFloatEdh+0x170>)
   b4a72:	f04f 32ff 	mov.w	r2, #4294967295
   b4a76:	4620      	mov	r0, r4
   b4a78:	4649      	mov	r1, r9
   b4a7a:	f002 fac1 	bl	b7000 <__aeabi_dcmpun>
   b4a7e:	b948      	cbnz	r0, b4a94 <_ZN5Print10printFloatEdh+0x58>
   b4a80:	4b4a      	ldr	r3, [pc, #296]	; (b4bac <_ZN5Print10printFloatEdh+0x170>)
   b4a82:	f04f 32ff 	mov.w	r2, #4294967295
   b4a86:	4620      	mov	r0, r4
   b4a88:	4649      	mov	r1, r9
   b4a8a:	f002 fa9b 	bl	b6fc4 <__aeabi_dcmple>
   b4a8e:	b908      	cbnz	r0, b4a94 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b4a90:	4947      	ldr	r1, [pc, #284]	; (b4bb0 <_ZN5Print10printFloatEdh+0x174>)
   b4a92:	e7e3      	b.n	b4a5c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b4a94:	4b47      	ldr	r3, [pc, #284]	; (b4bb4 <_ZN5Print10printFloatEdh+0x178>)
   b4a96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	4629      	mov	r1, r5
   b4a9e:	f002 faa5 	bl	b6fec <__aeabi_dcmpgt>
   b4aa2:	b108      	cbz	r0, b4aa8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b4aa4:	4944      	ldr	r1, [pc, #272]	; (b4bb8 <_ZN5Print10printFloatEdh+0x17c>)
   b4aa6:	e7d9      	b.n	b4a5c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b4aa8:	4b44      	ldr	r3, [pc, #272]	; (b4bbc <_ZN5Print10printFloatEdh+0x180>)
   b4aaa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b4aae:	4620      	mov	r0, r4
   b4ab0:	4629      	mov	r1, r5
   b4ab2:	f002 fa7d 	bl	b6fb0 <__aeabi_dcmplt>
   b4ab6:	2800      	cmp	r0, #0
   b4ab8:	d1f4      	bne.n	b4aa4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b4aba:	2200      	movs	r2, #0
   b4abc:	2300      	movs	r3, #0
   b4abe:	4620      	mov	r0, r4
   b4ac0:	4629      	mov	r1, r5
   b4ac2:	f002 fa75 	bl	b6fb0 <__aeabi_dcmplt>
   b4ac6:	b1d0      	cbz	r0, b4afe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b4ac8:	212d      	movs	r1, #45	; 0x2d
   b4aca:	4630      	mov	r0, r6
   b4acc:	f7ff ff88 	bl	b49e0 <_ZN5Print5printEc>
     number = -number;
   b4ad0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b4ad4:	4682      	mov	sl, r0
     number = -number;
   b4ad6:	461d      	mov	r5, r3
  double rounding = 0.5;
   b4ad8:	4939      	ldr	r1, [pc, #228]	; (b4bc0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b4ada:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4bc8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b4ade:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b4ae2:	2000      	movs	r0, #0
    rounding /= 10.0;
   b4ae4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b4ae8:	fa5f f38b 	uxtb.w	r3, fp
   b4aec:	429f      	cmp	r7, r3
   b4aee:	d908      	bls.n	b4b02 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b4af0:	4642      	mov	r2, r8
   b4af2:	464b      	mov	r3, r9
   b4af4:	f002 f914 	bl	b6d20 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b4af8:	f10b 0b01 	add.w	fp, fp, #1
   b4afc:	e7f4      	b.n	b4ae8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b4afe:	4682      	mov	sl, r0
   b4b00:	e7ea      	b.n	b4ad8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b4b02:	4622      	mov	r2, r4
   b4b04:	462b      	mov	r3, r5
   b4b06:	f001 fe2b 	bl	b6760 <__adddf3>
   b4b0a:	460d      	mov	r5, r1
   b4b0c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b4b0e:	f002 fab5 	bl	b707c <__aeabi_d2uiz>
   b4b12:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b4b14:	f001 ff60 	bl	b69d8 <__aeabi_ui2d>
   b4b18:	4602      	mov	r2, r0
   b4b1a:	460b      	mov	r3, r1
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	4629      	mov	r1, r5
   b4b20:	f001 fe1c 	bl	b675c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b24:	220a      	movs	r2, #10
   b4b26:	4604      	mov	r4, r0
   b4b28:	460d      	mov	r5, r1
   b4b2a:	4630      	mov	r0, r6
   b4b2c:	4641      	mov	r1, r8
   b4b2e:	f7ff ff66 	bl	b49fe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b4b32:	4482      	add	sl, r0
  if (digits > 0) {
   b4b34:	2f00      	cmp	r7, #0
   b4b36:	d095      	beq.n	b4a64 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b4b38:	4922      	ldr	r1, [pc, #136]	; (b4bc4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b4b3a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4bc8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b4b3e:	4630      	mov	r0, r6
   b4b40:	f7ff ff3c 	bl	b49bc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b4b44:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b4b48:	4482      	add	sl, r0
  while (digits-- > 0)
   b4b4a:	2f00      	cmp	r7, #0
   b4b4c:	d08a      	beq.n	b4a64 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b4b4e:	4642      	mov	r2, r8
   b4b50:	464b      	mov	r3, r9
   b4b52:	4620      	mov	r0, r4
   b4b54:	4629      	mov	r1, r5
   b4b56:	f001 ffb9 	bl	b6acc <__aeabi_dmul>
   b4b5a:	4604      	mov	r4, r0
   b4b5c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b4b5e:	f002 fa65 	bl	b702c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b4b62:	f1b0 0b00 	subs.w	fp, r0, #0
   b4b66:	da1c      	bge.n	b4ba2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b4b68:	212d      	movs	r1, #45	; 0x2d
   b4b6a:	4630      	mov	r0, r6
   b4b6c:	f7ff ff38 	bl	b49e0 <_ZN5Print5printEc>
            val = -n;
   b4b70:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b4b74:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b4b76:	220a      	movs	r2, #10
   b4b78:	4630      	mov	r0, r6
   b4b7a:	9301      	str	r3, [sp, #4]
   b4b7c:	f7ff ff3f 	bl	b49fe <_ZN5Print11printNumberEmh>
   b4b80:	9b01      	ldr	r3, [sp, #4]
   b4b82:	4418      	add	r0, r3
    n += print(toPrint);
   b4b84:	4482      	add	sl, r0
    remainder -= toPrint;
   b4b86:	4658      	mov	r0, fp
   b4b88:	f001 ff36 	bl	b69f8 <__aeabi_i2d>
   b4b8c:	4602      	mov	r2, r0
   b4b8e:	460b      	mov	r3, r1
   b4b90:	4620      	mov	r0, r4
   b4b92:	4629      	mov	r1, r5
   b4b94:	f001 fde2 	bl	b675c <__aeabi_dsub>
   b4b98:	3f01      	subs	r7, #1
   b4b9a:	4604      	mov	r4, r0
   b4b9c:	460d      	mov	r5, r1
   b4b9e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b4ba0:	e7d3      	b.n	b4b4a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b4ba2:	4659      	mov	r1, fp
        size_t t = 0;
   b4ba4:	2300      	movs	r3, #0
   b4ba6:	e7e6      	b.n	b4b76 <_ZN5Print10printFloatEdh+0x13a>
   b4ba8:	000b7564 	.word	0x000b7564
   b4bac:	7fefffff 	.word	0x7fefffff
   b4bb0:	000b7568 	.word	0x000b7568
   b4bb4:	41efffff 	.word	0x41efffff
   b4bb8:	000b756c 	.word	0x000b756c
   b4bbc:	c1efffff 	.word	0xc1efffff
   b4bc0:	3fe00000 	.word	0x3fe00000
   b4bc4:	000b7570 	.word	0x000b7570
   b4bc8:	40240000 	.word	0x40240000

000b4bcc <_ZN5Print7printlnEdi>:
{
   b4bcc:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b4bce:	b2c9      	uxtb	r1, r1
{
   b4bd0:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b4bd2:	f7ff ff33 	bl	b4a3c <_ZN5Print10printFloatEdh>
   b4bd6:	4604      	mov	r4, r0
  n += println();
   b4bd8:	4628      	mov	r0, r5
   b4bda:	f7ff ff04 	bl	b49e6 <_ZN5Print7printlnEv>
}
   b4bde:	4420      	add	r0, r4
   b4be0:	bd38      	pop	{r3, r4, r5, pc}

000b4be2 <_ZN5Print7printlnEfi>:
{
   b4be2:	b538      	push	{r3, r4, r5, lr}
   b4be4:	4604      	mov	r4, r0
   b4be6:	ee10 0a10 	vmov	r0, s0
   b4bea:	460d      	mov	r5, r1
    return println((double)num, digits);
   b4bec:	f001 ff16 	bl	b6a1c <__aeabi_f2d>
   b4bf0:	ec41 0b10 	vmov	d0, r0, r1
   b4bf4:	4629      	mov	r1, r5
   b4bf6:	4620      	mov	r0, r4
}
   b4bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b4bfc:	f7ff bfe6 	b.w	b4bcc <_ZN5Print7printlnEdi>

000b4c00 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c04:	b086      	sub	sp, #24
   b4c06:	af00      	add	r7, sp, #0
   b4c08:	4605      	mov	r5, r0
   b4c0a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c0c:	1d38      	adds	r0, r7, #4
   b4c0e:	2114      	movs	r1, #20
{
   b4c10:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4c12:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c14:	f7ff fd7e 	bl	b4714 <vsnprintf>

    if (n<bufsize)
   b4c18:	2813      	cmp	r0, #19
   b4c1a:	d80e      	bhi.n	b4c3a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4c1c:	1d39      	adds	r1, r7, #4
   b4c1e:	4628      	mov	r0, r5
   b4c20:	f7ff fecc 	bl	b49bc <_ZN5Print5writeEPKc>
   b4c24:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4c26:	b11e      	cbz	r6, b4c30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4c28:	4628      	mov	r0, r5
   b4c2a:	f7ff fedc 	bl	b49e6 <_ZN5Print7printlnEv>
   b4c2e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4c30:	4620      	mov	r0, r4
   b4c32:	3718      	adds	r7, #24
   b4c34:	46bd      	mov	sp, r7
   b4c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4c3a:	f100 0308 	add.w	r3, r0, #8
   b4c3e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4c42:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4c44:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4c48:	4622      	mov	r2, r4
   b4c4a:	1c41      	adds	r1, r0, #1
   b4c4c:	683b      	ldr	r3, [r7, #0]
   b4c4e:	4668      	mov	r0, sp
   b4c50:	f7ff fd60 	bl	b4714 <vsnprintf>
  return write(str);
   b4c54:	4669      	mov	r1, sp
   b4c56:	4628      	mov	r0, r5
   b4c58:	f7ff feb0 	bl	b49bc <_ZN5Print5writeEPKc>
   b4c5c:	4604      	mov	r4, r0
   b4c5e:	46c5      	mov	sp, r8
   b4c60:	e7e1      	b.n	b4c26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4c62 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b4c62:	6880      	ldr	r0, [r0, #8]
   b4c64:	6803      	ldr	r3, [r0, #0]
   b4c66:	68db      	ldr	r3, [r3, #12]
   b4c68:	4718      	bx	r3

000b4c6a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b4c6a:	4770      	bx	lr

000b4c6c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b4c6c:	4608      	mov	r0, r1
   b4c6e:	b111      	cbz	r1, b4c76 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b4c70:	680b      	ldr	r3, [r1, #0]
   b4c72:	685b      	ldr	r3, [r3, #4]
   b4c74:	4718      	bx	r3
}
   b4c76:	4770      	bx	lr

000b4c78 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b4c78:	4770      	bx	lr

000b4c7a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4c7a:	4770      	bx	lr

000b4c7c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b4c7c:	4770      	bx	lr

000b4c7e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b4c7e:	4770      	bx	lr

000b4c80 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b4c80:	b538      	push	{r3, r4, r5, lr}
   b4c82:	4604      	mov	r4, r0
   b4c84:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b4c86:	6800      	ldr	r0, [r0, #0]
   b4c88:	212e      	movs	r1, #46	; 0x2e
   b4c8a:	f002 fae0 	bl	b724e <strchrnul>
    size = s - category;
   b4c8e:	6823      	ldr	r3, [r4, #0]
   b4c90:	1ac3      	subs	r3, r0, r3
   b4c92:	602b      	str	r3, [r5, #0]
    if (size) {
   b4c94:	b123      	cbz	r3, b4ca0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b4c96:	7803      	ldrb	r3, [r0, #0]
   b4c98:	b103      	cbz	r3, b4c9c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b4c9a:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b4c9c:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c9e:	6020      	str	r0, [r4, #0]
}
   b4ca0:	4618      	mov	r0, r3
   b4ca2:	bd38      	pop	{r3, r4, r5, pc}

000b4ca4 <_ZN5spark16JSONStreamWriterD0Ev>:
   b4ca4:	b510      	push	{r4, lr}
   b4ca6:	210c      	movs	r1, #12
   b4ca8:	4604      	mov	r4, r0
   b4caa:	f7ff f9f8 	bl	b409e <_ZdlPvj>
   b4cae:	4620      	mov	r0, r4
   b4cb0:	bd10      	pop	{r4, pc}

000b4cb2 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b4cb2:	b510      	push	{r4, lr}
   b4cb4:	2104      	movs	r1, #4
   b4cb6:	4604      	mov	r4, r0
   b4cb8:	f7ff f9f1 	bl	b409e <_ZdlPvj>
   b4cbc:	4620      	mov	r0, r4
   b4cbe:	bd10      	pop	{r4, pc}

000b4cc0 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4cc0:	b510      	push	{r4, lr}
   b4cc2:	2104      	movs	r1, #4
   b4cc4:	4604      	mov	r4, r0
   b4cc6:	f7ff f9ea 	bl	b409e <_ZdlPvj>
   b4cca:	4620      	mov	r0, r4
   b4ccc:	bd10      	pop	{r4, pc}

000b4cce <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4cce:	f7ff bb6d 	b.w	b43ac <os_mutex_recursive_lock>

000b4cd2 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b4cd2:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b4cd4:	f002 fac5 	bl	b7262 <strcmp>
}
   b4cd8:	fab0 f080 	clz	r0, r0
   b4cdc:	0940      	lsrs	r0, r0, #5
   b4cde:	bd08      	pop	{r3, pc}

000b4ce0 <__tcf_1>:
   b4ce0:	4770      	bx	lr

000b4ce2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b4ce2:	b510      	push	{r4, lr}
   b4ce4:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b4ce6:	f001 f8bb 	bl	b5e60 <_Z16_fetch_usbserialv>
   b4cea:	4284      	cmp	r4, r0
   b4cec:	d010      	beq.n	b4d10 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b4cee:	f001 fcc9 	bl	b6684 <_Z22__fetch_global_Serial1v>
   b4cf2:	4284      	cmp	r4, r0
   b4cf4:	d105      	bne.n	b4d02 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b4cf6:	f001 fcc5 	bl	b6684 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b4cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b4cfe:	f001 b97a 	b.w	b5ff6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b4d02:	b12c      	cbz	r4, b4d10 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b4d04:	6823      	ldr	r3, [r4, #0]
   b4d06:	4620      	mov	r0, r4
   b4d08:	685b      	ldr	r3, [r3, #4]
}
   b4d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4d0e:	4718      	bx	r3
   b4d10:	bd10      	pop	{r4, pc}

000b4d12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4d12:	680b      	ldr	r3, [r1, #0]
   b4d14:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4d16:	684b      	ldr	r3, [r1, #4]
   b4d18:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4d1a:	b113      	cbz	r3, b4d22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b4d1c:	685a      	ldr	r2, [r3, #4]
   b4d1e:	3201      	adds	r2, #1
   b4d20:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4d22:	4770      	bx	lr

000b4d24 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4d24:	b513      	push	{r0, r1, r4, lr}
   b4d26:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4d28:	4608      	mov	r0, r1
   b4d2a:	9101      	str	r1, [sp, #4]
   b4d2c:	f002 faab 	bl	b7286 <strlen>
   b4d30:	9901      	ldr	r1, [sp, #4]
   b4d32:	4602      	mov	r2, r0
   b4d34:	4620      	mov	r0, r4
}
   b4d36:	b002      	add	sp, #8
   b4d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4d3c:	f001 bc22 	b.w	b6584 <_ZN5spark10JSONWriter5valueEPKcj>

000b4d40 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b4d40:	b513      	push	{r0, r1, r4, lr}
   b4d42:	4604      	mov	r4, r0
    write(str, strlen(str));
   b4d44:	4608      	mov	r0, r1
   b4d46:	9101      	str	r1, [sp, #4]
   b4d48:	f002 fa9d 	bl	b7286 <strlen>
   b4d4c:	6823      	ldr	r3, [r4, #0]
   b4d4e:	9901      	ldr	r1, [sp, #4]
   b4d50:	68db      	ldr	r3, [r3, #12]
   b4d52:	4602      	mov	r2, r0
   b4d54:	4620      	mov	r0, r4
}
   b4d56:	b002      	add	sp, #8
   b4d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b4d5c:	4718      	bx	r3

000b4d5e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b4d5e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4d60:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b4d62:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4d66:	68db      	ldr	r3, [r3, #12]
   b4d68:	2201      	movs	r2, #1
   b4d6a:	f10d 0107 	add.w	r1, sp, #7
   b4d6e:	4798      	blx	r3
}
   b4d70:	b003      	add	sp, #12
   b4d72:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4d76:	b40e      	push	{r1, r2, r3}
   b4d78:	b503      	push	{r0, r1, lr}
   b4d7a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b4d7c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4d7e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b4d82:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b4d84:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b4d86:	f7ff ff3b 	bl	b4c00 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b4d8a:	b002      	add	sp, #8
   b4d8c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4d90:	b003      	add	sp, #12
   b4d92:	4770      	bx	lr

000b4d94 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b4d94:	680a      	ldr	r2, [r1, #0]
   b4d96:	6002      	str	r2, [r0, #0]
   b4d98:	684a      	ldr	r2, [r1, #4]
   b4d9a:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b4da2:	b510      	push	{r4, lr}
   b4da4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4da6:	688c      	ldr	r4, [r1, #8]
   b4da8:	6084      	str	r4, [r0, #8]
   b4daa:	68cc      	ldr	r4, [r1, #12]
   b4dac:	60c4      	str	r4, [r0, #12]
   b4dae:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4db0:	608a      	str	r2, [r1, #8]
   b4db2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4db4:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4db6:	610a      	str	r2, [r1, #16]
   b4db8:	bd10      	pop	{r4, pc}
	...

000b4dbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b4dc0:	e9d0 8400 	ldrd	r8, r4, [r0]
   b4dc4:	f04f 0a14 	mov.w	sl, #20
   b4dc8:	9300      	str	r3, [sp, #0]
   b4dca:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4dce:	4b18      	ldr	r3, [pc, #96]	; (b4e30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4dd0:	10a4      	asrs	r4, r4, #2
   b4dd2:	4617      	mov	r7, r2
   b4dd4:	435c      	muls	r4, r3
   b4dd6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b4dd8:	2c00      	cmp	r4, #0
   b4dda:	dd21      	ble.n	b4e20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b4ddc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4dde:	fb0a f006 	mul.w	r0, sl, r6
   b4de2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b4de6:	463a      	mov	r2, r7
   b4de8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b4dec:	5828      	ldr	r0, [r5, r0]
   b4dee:	9101      	str	r1, [sp, #4]
   b4df0:	455f      	cmp	r7, fp
   b4df2:	bf28      	it	cs
   b4df4:	465a      	movcs	r2, fp
   b4df6:	f002 fa4e 	bl	b7296 <strncmp>
                if (cmp == 0) {
   b4dfa:	2800      	cmp	r0, #0
   b4dfc:	9901      	ldr	r1, [sp, #4]
   b4dfe:	f04f 0301 	mov.w	r3, #1
   b4e02:	d10b      	bne.n	b4e1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b4e04:	455f      	cmp	r7, fp
   b4e06:	d103      	bne.n	b4e10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b4e08:	9a00      	ldr	r2, [sp, #0]
   b4e0a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4e0c:	4634      	mov	r4, r6
   b4e0e:	e7e3      	b.n	b4dd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b4e10:	d9fc      	bls.n	b4e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b4e12:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b4e14:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b4e18:	3e01      	subs	r6, #1
   b4e1a:	e7f7      	b.n	b4e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b4e1c:	dbf9      	blt.n	b4e12 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b4e1e:	e7f5      	b.n	b4e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b4e20:	eba5 0508 	sub.w	r5, r5, r8
}
   b4e24:	4802      	ldr	r0, [pc, #8]	; (b4e30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4e26:	10ad      	asrs	r5, r5, #2
   b4e28:	4368      	muls	r0, r5
   b4e2a:	b003      	add	sp, #12
   b4e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e30:	cccccccd 	.word	0xcccccccd

000b4e34 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4e34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b4e36:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b4e38:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4e3a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b4e3c:	b303      	cbz	r3, b4e80 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b4e3e:	b1f9      	cbz	r1, b4e80 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b4e40:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b4e42:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b4e46:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b4e48:	a903      	add	r1, sp, #12
   b4e4a:	a801      	add	r0, sp, #4
   b4e4c:	f7ff ff18 	bl	b4c80 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b4e50:	4601      	mov	r1, r0
   b4e52:	b1a8      	cbz	r0, b4e80 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b4e54:	f10d 030b 	add.w	r3, sp, #11
   b4e58:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b4e5a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b4e5e:	4620      	mov	r0, r4
   b4e60:	f7ff ffac 	bl	b4dbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b4e64:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b4e68:	b153      	cbz	r3, b4e80 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b4e6a:	6823      	ldr	r3, [r4, #0]
   b4e6c:	2414      	movs	r4, #20
   b4e6e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b4e72:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b4e74:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b4e78:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b4e7a:	bfa8      	it	ge
   b4e7c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b4e7e:	e7e3      	b.n	b4e48 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b4e80:	4628      	mov	r0, r5
   b4e82:	b004      	add	sp, #16
   b4e84:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4e88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b4e88:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b4e8a:	4c09      	ldr	r4, [pc, #36]	; (b4eb0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b4e8c:	7823      	ldrb	r3, [r4, #0]
   b4e8e:	f3bf 8f5b 	dmb	ish
   b4e92:	07db      	lsls	r3, r3, #31
   b4e94:	d409      	bmi.n	b4eaa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4e96:	4620      	mov	r0, r4
   b4e98:	f7ff f910 	bl	b40bc <__cxa_guard_acquire>
   b4e9c:	b128      	cbz	r0, b4eaa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	f7ff f911 	bl	b40c6 <__cxa_guard_release>
   b4ea4:	4803      	ldr	r0, [pc, #12]	; (b4eb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b4ea6:	f002 f959 	bl	b715c <atexit>
}
   b4eaa:	4803      	ldr	r0, [pc, #12]	; (b4eb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b4eac:	bd10      	pop	{r4, pc}
   b4eae:	bf00      	nop
   b4eb0:	2003e67c 	.word	0x2003e67c
   b4eb4:	000b4c79 	.word	0x000b4c79
   b4eb8:	2003e5b8 	.word	0x2003e5b8

000b4ebc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b4ebc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b4ebe:	4c09      	ldr	r4, [pc, #36]	; (b4ee4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b4ec0:	7823      	ldrb	r3, [r4, #0]
   b4ec2:	f3bf 8f5b 	dmb	ish
   b4ec6:	07db      	lsls	r3, r3, #31
   b4ec8:	d409      	bmi.n	b4ede <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4eca:	4620      	mov	r0, r4
   b4ecc:	f7ff f8f6 	bl	b40bc <__cxa_guard_acquire>
   b4ed0:	b128      	cbz	r0, b4ede <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4ed2:	4620      	mov	r0, r4
   b4ed4:	f7ff f8f7 	bl	b40c6 <__cxa_guard_release>
   b4ed8:	4803      	ldr	r0, [pc, #12]	; (b4ee8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b4eda:	f002 f93f 	bl	b715c <atexit>
    return &factory;
}
   b4ede:	4803      	ldr	r0, [pc, #12]	; (b4eec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b4ee0:	bd10      	pop	{r4, pc}
   b4ee2:	bf00      	nop
   b4ee4:	2003e680 	.word	0x2003e680
   b4ee8:	000b4ce1 	.word	0x000b4ce1
   b4eec:	2003e5bc 	.word	0x2003e5bc

000b4ef0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b4ef0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4ef2:	2500      	movs	r5, #0
   b4ef4:	4604      	mov	r4, r0
   b4ef6:	e9c0 5500 	strd	r5, r5, [r0]
   b4efa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4efe:	6085      	str	r5, [r0, #8]
   b4f00:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b4f02:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b4f06:	f7ff fa41 	bl	b438c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b4f0a:	f7ff ffbd 	bl	b4e88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b4f0e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b4f10:	f7ff ffd4 	bl	b4ebc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b4f14:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b4f16:	6220      	str	r0, [r4, #32]
}
   b4f18:	4620      	mov	r0, r4
   b4f1a:	bd38      	pop	{r3, r4, r5, pc}

000b4f1c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b4f1c:	b510      	push	{r4, lr}
    static LogManager mgr;
   b4f1e:	4c0a      	ldr	r4, [pc, #40]	; (b4f48 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b4f20:	7823      	ldrb	r3, [r4, #0]
   b4f22:	f3bf 8f5b 	dmb	ish
   b4f26:	07db      	lsls	r3, r3, #31
   b4f28:	d40c      	bmi.n	b4f44 <_ZN5spark10LogManager8instanceEv+0x28>
   b4f2a:	4620      	mov	r0, r4
   b4f2c:	f7ff f8c6 	bl	b40bc <__cxa_guard_acquire>
   b4f30:	b140      	cbz	r0, b4f44 <_ZN5spark10LogManager8instanceEv+0x28>
   b4f32:	4806      	ldr	r0, [pc, #24]	; (b4f4c <_ZN5spark10LogManager8instanceEv+0x30>)
   b4f34:	f7ff ffdc 	bl	b4ef0 <_ZN5spark10LogManagerC1Ev>
   b4f38:	4620      	mov	r0, r4
   b4f3a:	f7ff f8c4 	bl	b40c6 <__cxa_guard_release>
   b4f3e:	4804      	ldr	r0, [pc, #16]	; (b4f50 <_ZN5spark10LogManager8instanceEv+0x34>)
   b4f40:	f002 f90c 	bl	b715c <atexit>
    return &mgr;
}
   b4f44:	4801      	ldr	r0, [pc, #4]	; (b4f4c <_ZN5spark10LogManager8instanceEv+0x30>)
   b4f46:	bd10      	pop	{r4, pc}
   b4f48:	2003e678 	.word	0x2003e678
   b4f4c:	2003e688 	.word	0x2003e688
   b4f50:	000b5471 	.word	0x000b5471

000b4f54 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b4f54:	4a02      	ldr	r2, [pc, #8]	; (b4f60 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b4f56:	4903      	ldr	r1, [pc, #12]	; (b4f64 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b4f58:	4803      	ldr	r0, [pc, #12]	; (b4f68 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b4f5a:	2300      	movs	r3, #0
   b4f5c:	f7ff bb26 	b.w	b45ac <log_set_callbacks>
   b4f60:	000b5255 	.word	0x000b5255
   b4f64:	000b51e1 	.word	0x000b51e1
   b4f68:	000b5161 	.word	0x000b5161

000b4f6c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b4f6c:	2300      	movs	r3, #0
   b4f6e:	461a      	mov	r2, r3
   b4f70:	4619      	mov	r1, r3
   b4f72:	4618      	mov	r0, r3
   b4f74:	f7ff bb1a 	b.w	b45ac <log_set_callbacks>

000b4f78 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b4f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b4f7a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b4f7c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4f7e:	4668      	mov	r0, sp
   b4f80:	f7ff fec7 	bl	b4d12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b4f84:	466a      	mov	r2, sp
   b4f86:	4629      	mov	r1, r5
   b4f88:	4620      	mov	r0, r4
   b4f8a:	f001 fa1b 	bl	b63c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4f8e:	a801      	add	r0, sp, #4
   b4f90:	f7ff fcee 	bl	b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4f94:	4620      	mov	r0, r4
   b4f96:	b003      	add	sp, #12
   b4f98:	bd30      	pop	{r4, r5, pc}

000b4f9a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b4f9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b4f9c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b4f9e:	4604      	mov	r4, r0
   b4fa0:	4668      	mov	r0, sp
   b4fa2:	f7ff feb6 	bl	b4d12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b4fa6:	466a      	mov	r2, sp
   b4fa8:	4629      	mov	r1, r5
   b4faa:	4620      	mov	r0, r4
   b4fac:	f001 f9e6 	bl	b637c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4fb0:	a801      	add	r0, sp, #4
   b4fb2:	f7ff fcdd 	bl	b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	b003      	add	sp, #12
   b4fba:	bd30      	pop	{r4, r5, pc}

000b4fbc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b4fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b4fbe:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b4fc0:	4604      	mov	r4, r0
   b4fc2:	4668      	mov	r0, sp
   b4fc4:	f7ff fea5 	bl	b4d12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b4fc8:	466a      	mov	r2, sp
   b4fca:	4629      	mov	r1, r5
   b4fcc:	4620      	mov	r0, r4
   b4fce:	f001 f97e 	bl	b62ce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4fd2:	a801      	add	r0, sp, #4
   b4fd4:	f7ff fccc 	bl	b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4fd8:	4620      	mov	r0, r4
   b4fda:	b003      	add	sp, #12
   b4fdc:	bd30      	pop	{r4, r5, pc}
	...

000b4fe0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b4fe0:	b570      	push	{r4, r5, r6, lr}
   b4fe2:	b08a      	sub	sp, #40	; 0x28
   b4fe4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b4fe6:	4601      	mov	r1, r0
   b4fe8:	a804      	add	r0, sp, #16
   b4fea:	f7ff ffc5 	bl	b4f78 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b4fee:	4e14      	ldr	r6, [pc, #80]	; (b5040 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b4ff0:	a804      	add	r0, sp, #16
   b4ff2:	f001 f9ff 	bl	b63f4 <_ZN5spark18JSONObjectIterator4nextEv>
   b4ff6:	b1e8      	cbz	r0, b5034 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b4ff8:	a904      	add	r1, sp, #16
   b4ffa:	4668      	mov	r0, sp
   b4ffc:	f7ff ffcd 	bl	b4f9a <_ZNK5spark18JSONObjectIterator4nameEv>
   b5000:	9802      	ldr	r0, [sp, #8]
   b5002:	4631      	mov	r1, r6
   b5004:	f7ff fe65 	bl	b4cd2 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5008:	4604      	mov	r4, r0
   b500a:	b110      	cbz	r0, b5012 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b500c:	1e2c      	subs	r4, r5, #0
   b500e:	bf18      	it	ne
   b5010:	2401      	movne	r4, #1
   b5012:	a801      	add	r0, sp, #4
   b5014:	f7ff fcac 	bl	b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5018:	2c00      	cmp	r4, #0
   b501a:	d0e9      	beq.n	b4ff0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b501c:	a904      	add	r1, sp, #16
   b501e:	4668      	mov	r0, sp
   b5020:	f7ff ffcc 	bl	b4fbc <_ZNK5spark18JSONObjectIterator5valueEv>
   b5024:	4668      	mov	r0, sp
   b5026:	f001 f988 	bl	b633a <_ZNK5spark9JSONValue5toIntEv>
   b502a:	6028      	str	r0, [r5, #0]
   b502c:	a801      	add	r0, sp, #4
   b502e:	f7ff fc9f 	bl	b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5032:	e7dd      	b.n	b4ff0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5034:	a805      	add	r0, sp, #20
   b5036:	f7ff fc9b 	bl	b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b503a:	b00a      	add	sp, #40	; 0x28
   b503c:	bd70      	pop	{r4, r5, r6, pc}
   b503e:	bf00      	nop
   b5040:	000b7572 	.word	0x000b7572

000b5044 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5044:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5046:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5048:	4620      	mov	r0, r4
   b504a:	4913      	ldr	r1, [pc, #76]	; (b5098 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b504c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b504e:	f002 f908 	bl	b7262 <strcmp>
   b5052:	b950      	cbnz	r0, b506a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5054:	f000 ff04 	bl	b5e60 <_Z16_fetch_usbserialv>
   b5058:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b505c:	f000 fef0 	bl	b5e40 <_ZN9USBSerial5beginEl>
}
   b5060:	b003      	add	sp, #12
   b5062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5066:	f000 befb 	b.w	b5e60 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b506a:	490c      	ldr	r1, [pc, #48]	; (b509c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b506c:	4620      	mov	r0, r4
   b506e:	f002 f8f8 	bl	b7262 <strcmp>
   b5072:	b978      	cbnz	r0, b5094 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5074:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5078:	a901      	add	r1, sp, #4
   b507a:	4628      	mov	r0, r5
        int baud = 9600;
   b507c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b507e:	f7ff ffaf 	bl	b4fe0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5082:	f001 faff 	bl	b6684 <_Z22__fetch_global_Serial1v>
   b5086:	9901      	ldr	r1, [sp, #4]
   b5088:	f000 ffb2 	bl	b5ff0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b508c:	f001 fafa 	bl	b6684 <_Z22__fetch_global_Serial1v>
}
   b5090:	b003      	add	sp, #12
   b5092:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5094:	2000      	movs	r0, #0
   b5096:	e7fb      	b.n	b5090 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5098:	000b7577 	.word	0x000b7577
   b509c:	000b757e 	.word	0x000b757e

000b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b50a0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b50a2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b50a6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b50a8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b50aa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b50ae:	42ae      	cmp	r6, r5
   b50b0:	d005      	beq.n	b50be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b50b2:	f105 0008 	add.w	r0, r5, #8
   b50b6:	f7ff fff3 	bl	b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b50ba:	3514      	adds	r5, #20
   b50bc:	e7f7      	b.n	b50ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b50be:	6820      	ldr	r0, [r4, #0]
   b50c0:	f7ff fb18 	bl	b46f4 <free>
}
   b50c4:	4620      	mov	r0, r4
   b50c6:	bd70      	pop	{r4, r5, r6, pc}

000b50c8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b50c8:	b510      	push	{r4, lr}
   b50ca:	4604      	mov	r4, r0
   b50cc:	300c      	adds	r0, #12
   b50ce:	f7ff ffe7 	bl	b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b50d2:	4620      	mov	r0, r4
   b50d4:	f7ff fc3a 	bl	b494c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b50d8:	4620      	mov	r0, r4
   b50da:	bd10      	pop	{r4, pc}

000b50dc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b50dc:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b50de:	4b04      	ldr	r3, [pc, #16]	; (b50f0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b50e0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b50e2:	f840 3b04 	str.w	r3, [r0], #4
   b50e6:	f7ff ffef 	bl	b50c8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b50ea:	4620      	mov	r0, r4
   b50ec:	bd10      	pop	{r4, pc}
   b50ee:	bf00      	nop
   b50f0:	000b7500 	.word	0x000b7500

000b50f4 <_ZN5spark16StreamLogHandlerD0Ev>:
   b50f4:	b510      	push	{r4, lr}
   b50f6:	4604      	mov	r4, r0
   b50f8:	f7ff fff0 	bl	b50dc <_ZN5spark16StreamLogHandlerD1Ev>
   b50fc:	4620      	mov	r0, r4
   b50fe:	2124      	movs	r1, #36	; 0x24
   b5100:	f7fe ffcd 	bl	b409e <_ZdlPvj>
   b5104:	4620      	mov	r0, r4
   b5106:	bd10      	pop	{r4, pc}

000b5108 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5108:	b510      	push	{r4, lr}
   b510a:	4b03      	ldr	r3, [pc, #12]	; (b5118 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b510c:	6003      	str	r3, [r0, #0]
   b510e:	4604      	mov	r4, r0
   b5110:	f7ff ffe4 	bl	b50dc <_ZN5spark16StreamLogHandlerD1Ev>
   b5114:	4620      	mov	r0, r4
   b5116:	bd10      	pop	{r4, pc}
   b5118:	000b7620 	.word	0x000b7620

000b511c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b511c:	b510      	push	{r4, lr}
   b511e:	4604      	mov	r4, r0
   b5120:	f7ff fff2 	bl	b5108 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5124:	4620      	mov	r0, r4
   b5126:	2124      	movs	r1, #36	; 0x24
   b5128:	f7fe ffb9 	bl	b409e <_ZdlPvj>
   b512c:	4620      	mov	r0, r4
   b512e:	bd10      	pop	{r4, pc}

000b5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5130:	2200      	movs	r2, #0
   b5132:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5136:	b510      	push	{r4, lr}
        capacity_(0) {
   b5138:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b513a:	680c      	ldr	r4, [r1, #0]
   b513c:	6004      	str	r4, [r0, #0]
   b513e:	684c      	ldr	r4, [r1, #4]
   b5140:	6044      	str	r4, [r0, #4]
   b5142:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5144:	600a      	str	r2, [r1, #0]
   b5146:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5148:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b514a:	608a      	str	r2, [r1, #8]
}
   b514c:	bd10      	pop	{r4, pc}

000b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b514e:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5150:	6803      	ldr	r3, [r0, #0]
   b5152:	4604      	mov	r4, r0
   b5154:	6818      	ldr	r0, [r3, #0]
   b5156:	f7ff f931 	bl	b43bc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b515a:	4620      	mov	r0, r4
   b515c:	bd10      	pop	{r4, pc}
	...

000b5160 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5164:	b087      	sub	sp, #28
   b5166:	4680      	mov	r8, r0
   b5168:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b516a:	4b1c      	ldr	r3, [pc, #112]	; (b51dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b516c:	685b      	ldr	r3, [r3, #4]
   b516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5172:	4689      	mov	r9, r1
   b5174:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b5176:	b96b      	cbnz	r3, b5194 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5178:	f7ff fed0 	bl	b4f1c <_ZN5spark10LogManager8instanceEv>
   b517c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b517e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5182:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5184:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5186:	f7ff fda2 	bl	b4cce <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b518a:	7b23      	ldrb	r3, [r4, #12]
   b518c:	b12b      	cbz	r3, b519a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b518e:	a805      	add	r0, sp, #20
   b5190:	f7ff ffdd 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5194:	b007      	add	sp, #28
   b5196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b519a:	2301      	movs	r3, #1
   b519c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b519e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b51a2:	fa5f f989 	uxtb.w	r9, r9
   b51a6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b51aa:	45aa      	cmp	sl, r5
   b51ac:	d012      	beq.n	b51d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b51ae:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b51b2:	4631      	mov	r1, r6
   b51b4:	1d38      	adds	r0, r7, #4
   b51b6:	f7ff fe3d 	bl	b4e34 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b51ba:	4581      	cmp	r9, r0
   b51bc:	d3f5      	bcc.n	b51aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b51be:	683b      	ldr	r3, [r7, #0]
   b51c0:	9a03      	ldr	r2, [sp, #12]
   b51c2:	9200      	str	r2, [sp, #0]
   b51c4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b51c8:	464a      	mov	r2, r9
   b51ca:	4633      	mov	r3, r6
   b51cc:	4641      	mov	r1, r8
   b51ce:	4638      	mov	r0, r7
   b51d0:	47d8      	blx	fp
   b51d2:	e7ea      	b.n	b51aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b51d4:	2300      	movs	r3, #0
   b51d6:	7323      	strb	r3, [r4, #12]
   b51d8:	e7d9      	b.n	b518e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b51da:	bf00      	nop
   b51dc:	e000ed00 	.word	0xe000ed00

000b51e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b51e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51e4:	469b      	mov	fp, r3
   b51e6:	4b1a      	ldr	r3, [pc, #104]	; (b5250 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b51e8:	685b      	ldr	r3, [r3, #4]
   b51ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b51ee:	4680      	mov	r8, r0
   b51f0:	4689      	mov	r9, r1
   b51f2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b51f4:	b96b      	cbnz	r3, b5212 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b51f6:	f7ff fe91 	bl	b4f1c <_ZN5spark10LogManager8instanceEv>
   b51fa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b51fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5200:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5202:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5204:	f7ff fd63 	bl	b4cce <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5208:	7b23      	ldrb	r3, [r4, #12]
   b520a:	b12b      	cbz	r3, b5218 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b520c:	a801      	add	r0, sp, #4
   b520e:	f7ff ff9e 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5212:	b003      	add	sp, #12
   b5214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5218:	2301      	movs	r3, #1
   b521a:	7323      	strb	r3, [r4, #12]
   b521c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5220:	b2f6      	uxtb	r6, r6
   b5222:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5226:	4555      	cmp	r5, sl
   b5228:	d00e      	beq.n	b5248 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b522a:	f855 7b04 	ldr.w	r7, [r5], #4
   b522e:	4659      	mov	r1, fp
   b5230:	1d38      	adds	r0, r7, #4
   b5232:	f7ff fdff 	bl	b4e34 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5236:	4286      	cmp	r6, r0
   b5238:	d3f5      	bcc.n	b5226 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b523a:	683b      	ldr	r3, [r7, #0]
   b523c:	464a      	mov	r2, r9
   b523e:	68db      	ldr	r3, [r3, #12]
   b5240:	4641      	mov	r1, r8
   b5242:	4638      	mov	r0, r7
   b5244:	4798      	blx	r3
   b5246:	e7ee      	b.n	b5226 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5248:	2300      	movs	r3, #0
   b524a:	7323      	strb	r3, [r4, #12]
   b524c:	e7de      	b.n	b520c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b524e:	bf00      	nop
   b5250:	e000ed00 	.word	0xe000ed00

000b5254 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5258:	4b16      	ldr	r3, [pc, #88]	; (b52b4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b525a:	685b      	ldr	r3, [r3, #4]
   b525c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5260:	4605      	mov	r5, r0
   b5262:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5264:	bb1b      	cbnz	r3, b52ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5266:	f7ff fe59 	bl	b4f1c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b526a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b526e:	4604      	mov	r4, r0
   b5270:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5272:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5274:	f7ff fd2b 	bl	b4cce <_ZN14RecursiveMutex4lockEv.isra.0>
   b5278:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b527c:	2446      	movs	r4, #70	; 0x46
   b527e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5282:	45b0      	cmp	r8, r6
   b5284:	d109      	bne.n	b529a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5286:	a801      	add	r0, sp, #4
   b5288:	f7ff ff61 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b528c:	42a5      	cmp	r5, r4
   b528e:	bfb4      	ite	lt
   b5290:	2000      	movlt	r0, #0
   b5292:	2001      	movge	r0, #1
}
   b5294:	b002      	add	sp, #8
   b5296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b529a:	f856 0b04 	ldr.w	r0, [r6], #4
   b529e:	4639      	mov	r1, r7
   b52a0:	3004      	adds	r0, #4
   b52a2:	f7ff fdc7 	bl	b4e34 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b52a6:	4284      	cmp	r4, r0
   b52a8:	bfa8      	it	ge
   b52aa:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b52ac:	e7e9      	b.n	b5282 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b52ae:	2000      	movs	r0, #0
   b52b0:	e7f0      	b.n	b5294 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b52b2:	bf00      	nop
   b52b4:	e000ed00 	.word	0xe000ed00

000b52b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b52b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b52ba:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b52be:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b52c0:	4604      	mov	r4, r0
   b52c2:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b52c4:	db0d      	blt.n	b52e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b52c6:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b52c8:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b52ca:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b52cc:	dd04      	ble.n	b52d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b52ce:	00b9      	lsls	r1, r7, #2
   b52d0:	f7ff fa18 	bl	b4704 <realloc>
            if (!d) {
   b52d4:	b918      	cbnz	r0, b52de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b52d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b52d8:	f7ff fa0c 	bl	b46f4 <free>
        T* d = nullptr;
   b52dc:	2000      	movs	r0, #0
        data_ = d;
   b52de:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b52e0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b52e2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b52e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b52e6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b52ea:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b52ec:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b52f0:	1d08      	adds	r0, r1, #4
   b52f2:	f001 ff4f 	bl	b7194 <memmove>
    new(p) T(std::move(value));
   b52f6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b52fa:	6863      	ldr	r3, [r4, #4]
   b52fc:	3301      	adds	r3, #1
   b52fe:	6063      	str	r3, [r4, #4]
    return true;
   b5300:	2001      	movs	r0, #1
   b5302:	e7e8      	b.n	b52d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5304 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5304:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5306:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b530a:	4604      	mov	r4, r0
   b530c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b530e:	9301      	str	r3, [sp, #4]
   b5310:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5312:	f7ff fcdc 	bl	b4cce <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5316:	e9d4 3200 	ldrd	r3, r2, [r4]
   b531a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b531e:	4293      	cmp	r3, r2
   b5320:	4619      	mov	r1, r3
   b5322:	d00b      	beq.n	b533c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5324:	6809      	ldr	r1, [r1, #0]
   b5326:	42a9      	cmp	r1, r5
   b5328:	f103 0304 	add.w	r3, r3, #4
   b532c:	d1f7      	bne.n	b531e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b532e:	a801      	add	r0, sp, #4
   b5330:	f7ff ff0d 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5334:	2500      	movs	r5, #0
}
   b5336:	4628      	mov	r0, r5
   b5338:	b003      	add	sp, #12
   b533a:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b533c:	4629      	mov	r1, r5
   b533e:	4620      	mov	r0, r4
   b5340:	f7ff ffba 	bl	b52b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5344:	4605      	mov	r5, r0
   b5346:	2800      	cmp	r0, #0
   b5348:	d0f1      	beq.n	b532e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b534a:	6863      	ldr	r3, [r4, #4]
   b534c:	2b01      	cmp	r3, #1
   b534e:	d101      	bne.n	b5354 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5350:	f7ff fe00 	bl	b4f54 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5354:	a801      	add	r0, sp, #4
   b5356:	f7ff fefa 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b535a:	e7ec      	b.n	b5336 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b535c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b535c:	b570      	push	{r4, r5, r6, lr}
   b535e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5360:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5364:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5366:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b536a:	4282      	cmp	r2, r0
   b536c:	d00f      	beq.n	b538e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b536e:	4601      	mov	r1, r0
            if (*p == value) {
   b5370:	681d      	ldr	r5, [r3, #0]
   b5372:	f851 6b04 	ldr.w	r6, [r1], #4
   b5376:	42ae      	cmp	r6, r5
   b5378:	d107      	bne.n	b538a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b537a:	1a52      	subs	r2, r2, r1
   b537c:	f001 ff0a 	bl	b7194 <memmove>
    --size_;
   b5380:	6863      	ldr	r3, [r4, #4]
   b5382:	3b01      	subs	r3, #1
   b5384:	6063      	str	r3, [r4, #4]
    return true;
   b5386:	2001      	movs	r0, #1
}
   b5388:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b538a:	4608      	mov	r0, r1
   b538c:	e7ed      	b.n	b536a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b538e:	2000      	movs	r0, #0
   b5390:	e7fa      	b.n	b5388 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5392 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5392:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5394:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5398:	4604      	mov	r4, r0
   b539a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b539c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b539e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b53a0:	f7ff fc95 	bl	b4cce <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b53a4:	a901      	add	r1, sp, #4
   b53a6:	4620      	mov	r0, r4
   b53a8:	f7ff ffd8 	bl	b535c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b53ac:	b118      	cbz	r0, b53b6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b53ae:	6863      	ldr	r3, [r4, #4]
   b53b0:	b90b      	cbnz	r3, b53b6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b53b2:	f7ff fddb 	bl	b4f6c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b53b6:	a803      	add	r0, sp, #12
   b53b8:	f7ff fec9 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b53bc:	b004      	add	sp, #16
   b53be:	bd10      	pop	{r4, pc}

000b53c0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b53c0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b53c2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b53c6:	2318      	movs	r3, #24
   b53c8:	4604      	mov	r4, r0
   b53ca:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b53ce:	42ae      	cmp	r6, r5
   b53d0:	d015      	beq.n	b53fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b53d2:	f105 0110 	add.w	r1, r5, #16
   b53d6:	4620      	mov	r0, r4
   b53d8:	f7ff ffc0 	bl	b535c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b53dc:	6863      	ldr	r3, [r4, #4]
   b53de:	b90b      	cbnz	r3, b53e4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b53e0:	f7ff fdc4 	bl	b4f6c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b53e4:	69e0      	ldr	r0, [r4, #28]
   b53e6:	6929      	ldr	r1, [r5, #16]
   b53e8:	6803      	ldr	r3, [r0, #0]
   b53ea:	68db      	ldr	r3, [r3, #12]
   b53ec:	4798      	blx	r3
        if (h.stream) {
   b53ee:	6969      	ldr	r1, [r5, #20]
   b53f0:	b119      	cbz	r1, b53fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b53f2:	6a20      	ldr	r0, [r4, #32]
   b53f4:	6803      	ldr	r3, [r0, #0]
   b53f6:	68db      	ldr	r3, [r3, #12]
   b53f8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b53fa:	3518      	adds	r5, #24
   b53fc:	e7e7      	b.n	b53ce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b53fe:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5402:	2618      	movs	r6, #24
   b5404:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5408:	42ae      	cmp	r6, r5
   b540a:	d004      	beq.n	b5416 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b540c:	4628      	mov	r0, r5
   b540e:	f7ff f9fb 	bl	b4808 <_ZN6StringD1Ev>
   b5412:	3518      	adds	r5, #24
   b5414:	e7f8      	b.n	b5408 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5416:	2300      	movs	r3, #0
   b5418:	6163      	str	r3, [r4, #20]
}
   b541a:	bd70      	pop	{r4, r5, r6, pc}

000b541c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b541c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b541e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5420:	f7ff fda4 	bl	b4f6c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5424:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5428:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b542a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b542c:	f7ff fc4f 	bl	b4cce <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5430:	4620      	mov	r0, r4
   b5432:	f7ff ffc5 	bl	b53c0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5436:	a801      	add	r0, sp, #4
   b5438:	f7ff fe89 	bl	b514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b543c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b543e:	b108      	cbz	r0, b5444 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5440:	f7fe ffac 	bl	b439c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5444:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5448:	2618      	movs	r6, #24
   b544a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b544e:	42ae      	cmp	r6, r5
   b5450:	d004      	beq.n	b545c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5452:	4628      	mov	r0, r5
   b5454:	f7ff f9d8 	bl	b4808 <_ZN6StringD1Ev>
   b5458:	3518      	adds	r5, #24
   b545a:	e7f8      	b.n	b544e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b545c:	6920      	ldr	r0, [r4, #16]
   b545e:	f7ff f949 	bl	b46f4 <free>
   b5462:	6820      	ldr	r0, [r4, #0]
   b5464:	f7ff f946 	bl	b46f4 <free>
}
   b5468:	4620      	mov	r0, r4
   b546a:	b002      	add	sp, #8
   b546c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5470 <__tcf_2>:
    static LogManager mgr;
   b5470:	4801      	ldr	r0, [pc, #4]	; (b5478 <__tcf_2+0x8>)
   b5472:	f7ff bfd3 	b.w	b541c <_ZN5spark10LogManagerD1Ev>
   b5476:	bf00      	nop
   b5478:	2003e688 	.word	0x2003e688

000b547c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b547c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b547e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5480:	4604      	mov	r4, r0
   b5482:	460d      	mov	r5, r1
   b5484:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5486:	d915      	bls.n	b54b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5488:	4290      	cmp	r0, r2
   b548a:	d214      	bcs.n	b54b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b548c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5490:	1a75      	subs	r5, r6, r1
   b5492:	f1a1 0714 	sub.w	r7, r1, #20
   b5496:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5498:	42b7      	cmp	r7, r6
   b549a:	d01a      	beq.n	b54d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b549c:	b11c      	cbz	r4, b54a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b549e:	4631      	mov	r1, r6
   b54a0:	4620      	mov	r0, r4
   b54a2:	f7ff fc77 	bl	b4d94 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b54a6:	f106 0008 	add.w	r0, r6, #8
   b54aa:	f7ff fdf9 	bl	b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b54ae:	3e14      	subs	r6, #20
   b54b0:	3c14      	subs	r4, #20
   b54b2:	e7f1      	b.n	b5498 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b54b4:	d00d      	beq.n	b54d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b54b6:	42b5      	cmp	r5, r6
   b54b8:	d00b      	beq.n	b54d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b54ba:	b11c      	cbz	r4, b54c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b54bc:	4629      	mov	r1, r5
   b54be:	4620      	mov	r0, r4
   b54c0:	f7ff fc68 	bl	b4d94 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b54c4:	f105 0008 	add.w	r0, r5, #8
   b54c8:	f7ff fdea 	bl	b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b54cc:	3514      	adds	r5, #20
   b54ce:	3414      	adds	r4, #20
   b54d0:	e7f1      	b.n	b54b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b54d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b54d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b54d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54d8:	4604      	mov	r4, r0
   b54da:	460d      	mov	r5, r1
   b54dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b54de:	d914      	bls.n	b550a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b54e0:	4290      	cmp	r0, r2
   b54e2:	d213      	bcs.n	b550c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b54e4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b54e8:	1a75      	subs	r5, r6, r1
   b54ea:	f1a1 0710 	sub.w	r7, r1, #16
   b54ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b54f0:	42b7      	cmp	r7, r6
   b54f2:	d018      	beq.n	b5526 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b54f4:	b11c      	cbz	r4, b54fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b54f6:	4631      	mov	r1, r6
   b54f8:	4620      	mov	r0, r4
   b54fa:	f7ff f9ee 	bl	b48da <_ZN6StringC1EOS_>
                end->~T();
   b54fe:	4630      	mov	r0, r6
   b5500:	f7ff f982 	bl	b4808 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5504:	3e10      	subs	r6, #16
   b5506:	3c10      	subs	r4, #16
   b5508:	e7f2      	b.n	b54f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b550a:	d00c      	beq.n	b5526 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b550c:	42b5      	cmp	r5, r6
   b550e:	d00a      	beq.n	b5526 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5510:	b11c      	cbz	r4, b551a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5512:	4629      	mov	r1, r5
   b5514:	4620      	mov	r0, r4
   b5516:	f7ff f9e0 	bl	b48da <_ZN6StringC1EOS_>
                p->~T();
   b551a:	4628      	mov	r0, r5
   b551c:	f7ff f974 	bl	b4808 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5520:	3510      	adds	r5, #16
   b5522:	3410      	adds	r4, #16
   b5524:	e7f2      	b.n	b550c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5528 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5528:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b552a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b552c:	4605      	mov	r5, r0
        if (n > 0) {
   b552e:	dd11      	ble.n	b5554 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5530:	0130      	lsls	r0, r6, #4
   b5532:	f7ff f8d7 	bl	b46e4 <malloc>
            if (!d) {
   b5536:	4604      	mov	r4, r0
   b5538:	b158      	cbz	r0, b5552 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b553a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b553e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5542:	f7ff ffc7 	bl	b54d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5546:	6828      	ldr	r0, [r5, #0]
   b5548:	f7ff f8d4 	bl	b46f4 <free>
        data_ = d;
   b554c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b554e:	60ae      	str	r6, [r5, #8]
        return true;
   b5550:	2001      	movs	r0, #1
    }
   b5552:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5554:	2400      	movs	r4, #0
   b5556:	e7f6      	b.n	b5546 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5558 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b555c:	4690      	mov	r8, r2
   b555e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5560:	2300      	movs	r3, #0
   b5562:	9103      	str	r1, [sp, #12]
    return size_;
   b5564:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5568:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b556a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b556c:	4299      	cmp	r1, r3
        capacity_(0) {
   b556e:	e9c0 3300 	strd	r3, r3, [r0]
   b5572:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5576:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b557a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b557e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5580:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5582:	dc23      	bgt.n	b55cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5584:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5588:	2314      	movs	r3, #20
   b558a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b558e:	42af      	cmp	r7, r5
   b5590:	d03b      	beq.n	b560a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5592:	4629      	mov	r1, r5
   b5594:	a80b      	add	r0, sp, #44	; 0x2c
   b5596:	f7ff f9a0 	bl	b48da <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b559a:	a90b      	add	r1, sp, #44	; 0x2c
   b559c:	a80f      	add	r0, sp, #60	; 0x3c
   b559e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b55a0:	f7ff f99b 	bl	b48da <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b55a4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b55a8:	4299      	cmp	r1, r3
   b55aa:	da1b      	bge.n	b55e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b55ac:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b55ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b55b0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b55b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b55b8:	4631      	mov	r1, r6
   b55ba:	f106 0010 	add.w	r0, r6, #16
   b55be:	f7ff ff89 	bl	b54d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b55c2:	b9ee      	cbnz	r6, b5600 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b55c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b55c6:	3301      	adds	r3, #1
   b55c8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b55ca:	e011      	b.n	b55f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b55cc:	a808      	add	r0, sp, #32
   b55ce:	f7ff ffab 	bl	b5528 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b55d2:	2800      	cmp	r0, #0
   b55d4:	d1d6      	bne.n	b5584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b55d6:	a808      	add	r0, sp, #32
   b55d8:	f7ff f9b8 	bl	b494c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b55dc:	4620      	mov	r0, r4
   b55de:	b015      	add	sp, #84	; 0x54
   b55e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b55e4:	3101      	adds	r1, #1
   b55e6:	a808      	add	r0, sp, #32
   b55e8:	f7ff ff9e 	bl	b5528 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b55ec:	2800      	cmp	r0, #0
   b55ee:	d1dd      	bne.n	b55ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b55f0:	a80f      	add	r0, sp, #60	; 0x3c
   b55f2:	f7ff f909 	bl	b4808 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b55f6:	a80b      	add	r0, sp, #44	; 0x2c
   b55f8:	f7ff f906 	bl	b4808 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b55fc:	3514      	adds	r5, #20
   b55fe:	e7c6      	b.n	b558e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5600:	a90f      	add	r1, sp, #60	; 0x3c
   b5602:	4630      	mov	r0, r6
   b5604:	f7ff f969 	bl	b48da <_ZN6StringC1EOS_>
   b5608:	e7dc      	b.n	b55c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b560a:	2600      	movs	r6, #0
   b560c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5610:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5612:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5616:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b561a:	429e      	cmp	r6, r3
   b561c:	da7c      	bge.n	b5718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b561e:	0133      	lsls	r3, r6, #4
   b5620:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5622:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5624:	b90b      	cbnz	r3, b562a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5626:	3601      	adds	r6, #1
   b5628:	e7f5      	b.n	b5616 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b562a:	2300      	movs	r3, #0
   b562c:	9307      	str	r3, [sp, #28]
   b562e:	fb09 f306 	mul.w	r3, r9, r6
   b5632:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5634:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5636:	a907      	add	r1, sp, #28
   b5638:	a806      	add	r0, sp, #24
   b563a:	f7ff fb21 	bl	b4c80 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b563e:	4682      	mov	sl, r0
   b5640:	2800      	cmp	r0, #0
   b5642:	d0f0      	beq.n	b5626 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5644:	f04f 0300 	mov.w	r3, #0
   b5648:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b564c:	4601      	mov	r1, r0
   b564e:	9a07      	ldr	r2, [sp, #28]
   b5650:	f10d 0317 	add.w	r3, sp, #23
   b5654:	4628      	mov	r0, r5
   b5656:	f7ff fbb1 	bl	b4dbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b565a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b565e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5660:	2f00      	cmp	r7, #0
   b5662:	d14a      	bne.n	b56fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5664:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5668:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b566c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5670:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5674:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5678:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b567c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b567e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5682:	4293      	cmp	r3, r2
   b5684:	db17      	blt.n	b56b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5686:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b568a:	f1ba 0f00 	cmp.w	sl, #0
   b568e:	dd30      	ble.n	b56f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5690:	fb09 f00a 	mul.w	r0, r9, sl
   b5694:	f7ff f826 	bl	b46e4 <malloc>
            if (!d) {
   b5698:	4683      	mov	fp, r0
   b569a:	b360      	cbz	r0, b56f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b569c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b56a0:	fb09 1202 	mla	r2, r9, r2, r1
   b56a4:	f7ff feea 	bl	b547c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b56a8:	6828      	ldr	r0, [r5, #0]
   b56aa:	f7ff f823 	bl	b46f4 <free>
        data_ = d;
   b56ae:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b56b2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b56b6:	682b      	ldr	r3, [r5, #0]
   b56b8:	9a01      	ldr	r2, [sp, #4]
   b56ba:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b56be:	686a      	ldr	r2, [r5, #4]
   b56c0:	4651      	mov	r1, sl
   b56c2:	fb09 3202 	mla	r2, r9, r2, r3
   b56c6:	f10a 0014 	add.w	r0, sl, #20
   b56ca:	f7ff fed7 	bl	b547c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b56ce:	f1ba 0f00 	cmp.w	sl, #0
   b56d2:	d003      	beq.n	b56dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b56d4:	a90f      	add	r1, sp, #60	; 0x3c
   b56d6:	4650      	mov	r0, sl
   b56d8:	f7ff fb5c 	bl	b4d94 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b56dc:	686b      	ldr	r3, [r5, #4]
   b56de:	3301      	adds	r3, #1
   b56e0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b56e2:	a811      	add	r0, sp, #68	; 0x44
   b56e4:	f7ff fcdc 	bl	b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b56e8:	b13f      	cbz	r7, b56fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b56ea:	a80b      	add	r0, sp, #44	; 0x2c
   b56ec:	f7ff fcd8 	bl	b50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b56f0:	e771      	b.n	b55d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b56f2:	46bb      	mov	fp, r7
   b56f4:	e7d8      	b.n	b56a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b56f6:	2701      	movs	r7, #1
   b56f8:	e7f3      	b.n	b56e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b56fa:	9b01      	ldr	r3, [sp, #4]
   b56fc:	682d      	ldr	r5, [r5, #0]
   b56fe:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5702:	9b06      	ldr	r3, [sp, #24]
   b5704:	781b      	ldrb	r3, [r3, #0]
   b5706:	b92b      	cbnz	r3, b5714 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5708:	f8d8 3000 	ldr.w	r3, [r8]
   b570c:	9a02      	ldr	r2, [sp, #8]
   b570e:	4413      	add	r3, r2
   b5710:	7c1b      	ldrb	r3, [r3, #16]
   b5712:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5714:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5716:	e78e      	b.n	b5636 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5718:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b571a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b571c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b571e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5720:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5722:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5726:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5728:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b572a:	60a2      	str	r2, [r4, #8]
   b572c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b572e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5730:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5732:	60e2      	str	r2, [r4, #12]
   b5734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5736:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5738:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b573a:	6122      	str	r2, [r4, #16]
   b573c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b573e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5740:	9b03      	ldr	r3, [sp, #12]
   b5742:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5744:	6162      	str	r2, [r4, #20]
   b5746:	7623      	strb	r3, [r4, #24]
   b5748:	e7cf      	b.n	b56ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b574c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b574c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b574e:	4604      	mov	r4, r0
   b5750:	b087      	sub	sp, #28
   b5752:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5754:	4626      	mov	r6, r4
        stream_(&stream) {
   b5756:	4619      	mov	r1, r3
   b5758:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b575a:	4617      	mov	r7, r2
        stream_(&stream) {
   b575c:	f7fe fd55 	bl	b420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5760:	4b0b      	ldr	r3, [pc, #44]	; (b5790 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5762:	f846 3b04 	str.w	r3, [r6], #4
   b5766:	4669      	mov	r1, sp
   b5768:	a803      	add	r0, sp, #12
   b576a:	f7fe fd4e 	bl	b420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b576e:	aa03      	add	r2, sp, #12
   b5770:	4639      	mov	r1, r7
   b5772:	4630      	mov	r0, r6
   b5774:	f7ff fef0 	bl	b5558 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5778:	a803      	add	r0, sp, #12
   b577a:	f7fe fd05 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b577e:	4668      	mov	r0, sp
   b5780:	f7fe fd02 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5784:	4b03      	ldr	r3, [pc, #12]	; (b5794 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5786:	6023      	str	r3, [r4, #0]
}
   b5788:	4620      	mov	r0, r4
        stream_(&stream) {
   b578a:	6225      	str	r5, [r4, #32]
}
   b578c:	b007      	add	sp, #28
   b578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5790:	000b7500 	.word	0x000b7500
   b5794:	000b7608 	.word	0x000b7608

000b5798 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5798:	b5f0      	push	{r4, r5, r6, r7, lr}
   b579a:	460f      	mov	r7, r1
   b579c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b579e:	491d      	ldr	r1, [pc, #116]	; (b5814 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b57a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b57a2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b57a4:	4616      	mov	r6, r2
   b57a6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b57a8:	f001 fd5b 	bl	b7262 <strcmp>
   b57ac:	b9c0      	cbnz	r0, b57e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b57ae:	b1a4      	cbz	r4, b57da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b57b0:	4629      	mov	r1, r5
   b57b2:	a801      	add	r0, sp, #4
   b57b4:	f7ff fcbc 	bl	b5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b57b8:	4917      	ldr	r1, [pc, #92]	; (b5818 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b57ba:	2024      	movs	r0, #36	; 0x24
   b57bc:	f000 ffc6 	bl	b674c <_ZnwjRKSt9nothrow_t>
   b57c0:	4605      	mov	r5, r0
   b57c2:	b130      	cbz	r0, b57d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b57c4:	ab01      	add	r3, sp, #4
   b57c6:	4632      	mov	r2, r6
   b57c8:	4621      	mov	r1, r4
   b57ca:	f7ff ffbf 	bl	b574c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b57ce:	4b13      	ldr	r3, [pc, #76]	; (b581c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b57d0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b57d2:	a801      	add	r0, sp, #4
   b57d4:	f7fe fcd8 	bl	b4188 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b57d8:	462c      	mov	r4, r5
}
   b57da:	4620      	mov	r0, r4
   b57dc:	b005      	add	sp, #20
   b57de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b57e0:	490f      	ldr	r1, [pc, #60]	; (b5820 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b57e2:	4638      	mov	r0, r7
   b57e4:	f001 fd3d 	bl	b7262 <strcmp>
   b57e8:	b990      	cbnz	r0, b5810 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b57ea:	2c00      	cmp	r4, #0
   b57ec:	d0f5      	beq.n	b57da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b57ee:	4629      	mov	r1, r5
   b57f0:	a801      	add	r0, sp, #4
   b57f2:	f7ff fc9d 	bl	b5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b57f6:	4908      	ldr	r1, [pc, #32]	; (b5818 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b57f8:	2024      	movs	r0, #36	; 0x24
   b57fa:	f000 ffa7 	bl	b674c <_ZnwjRKSt9nothrow_t>
   b57fe:	4605      	mov	r5, r0
   b5800:	2800      	cmp	r0, #0
   b5802:	d0e6      	beq.n	b57d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5804:	ab01      	add	r3, sp, #4
   b5806:	4632      	mov	r2, r6
   b5808:	4621      	mov	r1, r4
   b580a:	f7ff ff9f 	bl	b574c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b580e:	e7e0      	b.n	b57d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5810:	2400      	movs	r4, #0
   b5812:	e7e2      	b.n	b57da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5814:	000b7586 	.word	0x000b7586
   b5818:	000b7799 	.word	0x000b7799
   b581c:	000b7620 	.word	0x000b7620
   b5820:	000b758a 	.word	0x000b758a

000b5824 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5824:	4b01      	ldr	r3, [pc, #4]	; (b582c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5826:	4a02      	ldr	r2, [pc, #8]	; (b5830 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5828:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b582a:	4770      	bx	lr
   b582c:	2003e684 	.word	0x2003e684
   b5830:	000b759b 	.word	0x000b759b

000b5834 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5838:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b583a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b583e:	4604      	mov	r4, r0
   b5840:	460e      	mov	r6, r1
   b5842:	4617      	mov	r7, r2
   b5844:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5846:	f000 fb0b 	bl	b5e60 <_Z16_fetch_usbserialv>
   b584a:	4581      	cmp	r9, r0
   b584c:	d04c      	beq.n	b58e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b584e:	792b      	ldrb	r3, [r5, #4]
   b5850:	0719      	lsls	r1, r3, #28
   b5852:	d504      	bpl.n	b585e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5854:	696a      	ldr	r2, [r5, #20]
   b5856:	4954      	ldr	r1, [pc, #336]	; (b59a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5858:	4620      	mov	r0, r4
   b585a:	f7ff fa8c 	bl	b4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b585e:	f1b8 0f00 	cmp.w	r8, #0
   b5862:	d00d      	beq.n	b5880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5864:	215b      	movs	r1, #91	; 0x5b
   b5866:	4620      	mov	r0, r4
   b5868:	f7ff fa79 	bl	b4d5e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b586c:	4641      	mov	r1, r8
   b586e:	4620      	mov	r0, r4
   b5870:	f7ff fa66 	bl	b4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5874:	6823      	ldr	r3, [r4, #0]
   b5876:	494d      	ldr	r1, [pc, #308]	; (b59ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5878:	68db      	ldr	r3, [r3, #12]
   b587a:	2202      	movs	r2, #2
   b587c:	4620      	mov	r0, r4
   b587e:	4798      	blx	r3
    if (attr.has_file) {
   b5880:	792b      	ldrb	r3, [r5, #4]
   b5882:	07da      	lsls	r2, r3, #31
   b5884:	d523      	bpl.n	b58ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5886:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b588a:	212f      	movs	r1, #47	; 0x2f
   b588c:	4640      	mov	r0, r8
   b588e:	f001 fd16 	bl	b72be <strrchr>
    if (s1) {
   b5892:	b108      	cbz	r0, b5898 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5894:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5898:	4641      	mov	r1, r8
   b589a:	4620      	mov	r0, r4
   b589c:	f7ff fa50 	bl	b4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b58a0:	792b      	ldrb	r3, [r5, #4]
   b58a2:	079b      	lsls	r3, r3, #30
   b58a4:	d508      	bpl.n	b58b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b58a6:	213a      	movs	r1, #58	; 0x3a
   b58a8:	4620      	mov	r0, r4
   b58aa:	f7ff fa58 	bl	b4d5e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b58ae:	68ea      	ldr	r2, [r5, #12]
   b58b0:	493f      	ldr	r1, [pc, #252]	; (b59b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b58b2:	4620      	mov	r0, r4
   b58b4:	f7ff fa5f 	bl	b4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b58b8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b58ba:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b58bc:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b58c0:	68db      	ldr	r3, [r3, #12]
   b58c2:	bf14      	ite	ne
   b58c4:	493b      	ldrne	r1, [pc, #236]	; (b59b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b58c6:	493c      	ldreq	r1, [pc, #240]	; (b59b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b58c8:	2202      	movs	r2, #2
            write(": ", 2);
   b58ca:	4620      	mov	r0, r4
   b58cc:	4798      	blx	r3
    if (attr.has_function) {
   b58ce:	792b      	ldrb	r3, [r5, #4]
   b58d0:	0758      	lsls	r0, r3, #29
   b58d2:	d51d      	bpl.n	b5910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b58d4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b58d6:	460b      	mov	r3, r1
   b58d8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b58da:	f813 0b01 	ldrb.w	r0, [r3], #1
   b58de:	b160      	cbz	r0, b58fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b58e0:	2820      	cmp	r0, #32
   b58e2:	d108      	bne.n	b58f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b58e4:	4619      	mov	r1, r3
   b58e6:	e7f7      	b.n	b58d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b58e8:	4834      	ldr	r0, [pc, #208]	; (b59bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b58ea:	f000 fc08 	bl	b60fe <_ZN5spark12NetworkClass9listeningEv>
   b58ee:	2800      	cmp	r0, #0
   b58f0:	d0ad      	beq.n	b584e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b58f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b58f6:	2828      	cmp	r0, #40	; 0x28
   b58f8:	d1ee      	bne.n	b58d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b58fa:	6823      	ldr	r3, [r4, #0]
   b58fc:	1a52      	subs	r2, r2, r1
   b58fe:	68db      	ldr	r3, [r3, #12]
   b5900:	4620      	mov	r0, r4
   b5902:	4798      	blx	r3
        write("(): ", 4);
   b5904:	6823      	ldr	r3, [r4, #0]
   b5906:	492e      	ldr	r1, [pc, #184]	; (b59c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5908:	68db      	ldr	r3, [r3, #12]
   b590a:	2204      	movs	r2, #4
   b590c:	4620      	mov	r0, r4
   b590e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5910:	2100      	movs	r1, #0
   b5912:	4638      	mov	r0, r7
   b5914:	f7fe fe42 	bl	b459c <log_level_name>
   b5918:	4601      	mov	r1, r0
    write(s);
   b591a:	4620      	mov	r0, r4
   b591c:	f7ff fa10 	bl	b4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5920:	6823      	ldr	r3, [r4, #0]
   b5922:	4925      	ldr	r1, [pc, #148]	; (b59b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5924:	68db      	ldr	r3, [r3, #12]
   b5926:	2202      	movs	r2, #2
   b5928:	4620      	mov	r0, r4
   b592a:	4798      	blx	r3
    if (msg) {
   b592c:	b11e      	cbz	r6, b5936 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b592e:	4631      	mov	r1, r6
   b5930:	4620      	mov	r0, r4
   b5932:	f7ff fa05 	bl	b4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5936:	792b      	ldrb	r3, [r5, #4]
   b5938:	f013 0f30 	tst.w	r3, #48	; 0x30
   b593c:	d02c      	beq.n	b5998 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b593e:	6823      	ldr	r3, [r4, #0]
   b5940:	4920      	ldr	r1, [pc, #128]	; (b59c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5942:	68db      	ldr	r3, [r3, #12]
   b5944:	2202      	movs	r2, #2
   b5946:	4620      	mov	r0, r4
   b5948:	4798      	blx	r3
        if (attr.has_code) {
   b594a:	792b      	ldrb	r3, [r5, #4]
   b594c:	06d9      	lsls	r1, r3, #27
   b594e:	d50a      	bpl.n	b5966 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5950:	6823      	ldr	r3, [r4, #0]
   b5952:	491d      	ldr	r1, [pc, #116]	; (b59c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5954:	68db      	ldr	r3, [r3, #12]
   b5956:	2207      	movs	r2, #7
   b5958:	4620      	mov	r0, r4
   b595a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b595c:	69aa      	ldr	r2, [r5, #24]
   b595e:	491b      	ldr	r1, [pc, #108]	; (b59cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5960:	4620      	mov	r0, r4
   b5962:	f7ff fa08 	bl	b4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5966:	792b      	ldrb	r3, [r5, #4]
   b5968:	069a      	lsls	r2, r3, #26
   b596a:	d511      	bpl.n	b5990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b596c:	06db      	lsls	r3, r3, #27
   b596e:	d505      	bpl.n	b597c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5970:	6823      	ldr	r3, [r4, #0]
   b5972:	4910      	ldr	r1, [pc, #64]	; (b59b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5974:	68db      	ldr	r3, [r3, #12]
   b5976:	2202      	movs	r2, #2
   b5978:	4620      	mov	r0, r4
   b597a:	4798      	blx	r3
            write("details = ", 10);
   b597c:	6823      	ldr	r3, [r4, #0]
   b597e:	4914      	ldr	r1, [pc, #80]	; (b59d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5980:	68db      	ldr	r3, [r3, #12]
   b5982:	4620      	mov	r0, r4
   b5984:	220a      	movs	r2, #10
   b5986:	4798      	blx	r3
            write(attr.details);
   b5988:	69e9      	ldr	r1, [r5, #28]
   b598a:	4620      	mov	r0, r4
   b598c:	f7ff f9d8 	bl	b4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5990:	215d      	movs	r1, #93	; 0x5d
   b5992:	4620      	mov	r0, r4
   b5994:	f7ff f9e3 	bl	b4d5e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5998:	6823      	ldr	r3, [r4, #0]
   b599a:	490e      	ldr	r1, [pc, #56]	; (b59d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b599c:	68db      	ldr	r3, [r3, #12]
   b599e:	4620      	mov	r0, r4
   b59a0:	2202      	movs	r2, #2
}
   b59a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b59a6:	4718      	bx	r3
   b59a8:	000b759f 	.word	0x000b759f
   b59ac:	000b75a6 	.word	0x000b75a6
   b59b0:	000b75a9 	.word	0x000b75a9
   b59b4:	000b75ac 	.word	0x000b75ac
   b59b8:	000b75b1 	.word	0x000b75b1
   b59bc:	2003e714 	.word	0x2003e714
   b59c0:	000b75af 	.word	0x000b75af
   b59c4:	000b75b4 	.word	0x000b75b4
   b59c8:	000b75b7 	.word	0x000b75b7
   b59cc:	000b75bf 	.word	0x000b75bf
   b59d0:	000b75c2 	.word	0x000b75c2
   b59d4:	000b75cd 	.word	0x000b75cd

000b59d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b59d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59dc:	b085      	sub	sp, #20
    return stream_;
   b59de:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b59e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b59e4:	4605      	mov	r5, r0
   b59e6:	460f      	mov	r7, r1
   b59e8:	4690      	mov	r8, r2
   b59ea:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b59ec:	f000 fa38 	bl	b5e60 <_Z16_fetch_usbserialv>
   b59f0:	4581      	cmp	r9, r0
   b59f2:	d105      	bne.n	b5a00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b59f4:	4849      	ldr	r0, [pc, #292]	; (b5b1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b59f6:	f000 fb82 	bl	b60fe <_ZN5spark12NetworkClass9listeningEv>
   b59fa:	2800      	cmp	r0, #0
   b59fc:	f040 808a 	bne.w	b5b14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b5a00:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b5a02:	4a47      	ldr	r2, [pc, #284]	; (b5b20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b5a04:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b5a06:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b5a0a:	a801      	add	r0, sp, #4
        strm_(stream) {
   b5a0c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b5a0e:	f88d 9008 	strb.w	r9, [sp, #8]
   b5a12:	f000 fd18 	bl	b6446 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b5a16:	4649      	mov	r1, r9
   b5a18:	4640      	mov	r0, r8
   b5a1a:	f7fe fdbf 	bl	b459c <log_level_name>
    json.name("l", 1).value(s);
   b5a1e:	4941      	ldr	r1, [pc, #260]	; (b5b24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b5a20:	4680      	mov	r8, r0
   b5a22:	2201      	movs	r2, #1
   b5a24:	a801      	add	r0, sp, #4
   b5a26:	f000 fd9d 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5a2a:	4641      	mov	r1, r8
   b5a2c:	f7ff f97a 	bl	b4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b5a30:	b13f      	cbz	r7, b5a42 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b5a32:	493d      	ldr	r1, [pc, #244]	; (b5b28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b5a34:	2201      	movs	r2, #1
   b5a36:	a801      	add	r0, sp, #4
   b5a38:	f000 fd94 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5a3c:	4639      	mov	r1, r7
   b5a3e:	f7ff f971 	bl	b4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b5a42:	b13e      	cbz	r6, b5a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b5a44:	4939      	ldr	r1, [pc, #228]	; (b5b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b5a46:	2201      	movs	r2, #1
   b5a48:	a801      	add	r0, sp, #4
   b5a4a:	f000 fd8b 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5a4e:	4631      	mov	r1, r6
   b5a50:	f7ff f968 	bl	b4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b5a54:	7923      	ldrb	r3, [r4, #4]
   b5a56:	07df      	lsls	r7, r3, #31
   b5a58:	d50e      	bpl.n	b5a78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b5a5a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b5a5c:	212f      	movs	r1, #47	; 0x2f
   b5a5e:	4630      	mov	r0, r6
   b5a60:	f001 fc2d 	bl	b72be <strrchr>
    if (s1) {
   b5a64:	b100      	cbz	r0, b5a68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b5a66:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b5a68:	4931      	ldr	r1, [pc, #196]	; (b5b30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b5a6a:	2201      	movs	r2, #1
   b5a6c:	a801      	add	r0, sp, #4
   b5a6e:	f000 fd79 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5a72:	4631      	mov	r1, r6
   b5a74:	f7ff f956 	bl	b4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b5a78:	7923      	ldrb	r3, [r4, #4]
   b5a7a:	079e      	lsls	r6, r3, #30
   b5a7c:	d507      	bpl.n	b5a8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b5a7e:	492d      	ldr	r1, [pc, #180]	; (b5b34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b5a80:	2202      	movs	r2, #2
   b5a82:	a801      	add	r0, sp, #4
   b5a84:	f000 fd6e 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5a88:	68e1      	ldr	r1, [r4, #12]
   b5a8a:	f000 fce9 	bl	b6460 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b5a8e:	7923      	ldrb	r3, [r4, #4]
   b5a90:	0758      	lsls	r0, r3, #29
   b5a92:	d514      	bpl.n	b5abe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5a94:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5a96:	4633      	mov	r3, r6
   b5a98:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b5a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5a9e:	b12a      	cbz	r2, b5aac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b5aa0:	2a20      	cmp	r2, #32
   b5aa2:	d101      	bne.n	b5aa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b5aa4:	461e      	mov	r6, r3
   b5aa6:	e7f7      	b.n	b5a98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b5aa8:	2a28      	cmp	r2, #40	; 0x28
   b5aaa:	d1f5      	bne.n	b5a98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b5aac:	4922      	ldr	r1, [pc, #136]	; (b5b38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b5aae:	2202      	movs	r2, #2
   b5ab0:	a801      	add	r0, sp, #4
   b5ab2:	f000 fd57 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5ab6:	1bba      	subs	r2, r7, r6
   b5ab8:	4631      	mov	r1, r6
   b5aba:	f000 fd63 	bl	b6584 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b5abe:	7923      	ldrb	r3, [r4, #4]
   b5ac0:	0719      	lsls	r1, r3, #28
   b5ac2:	d507      	bpl.n	b5ad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b5ac4:	491d      	ldr	r1, [pc, #116]	; (b5b3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b5ac6:	2201      	movs	r2, #1
   b5ac8:	a801      	add	r0, sp, #4
   b5aca:	f000 fd4b 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5ace:	6961      	ldr	r1, [r4, #20]
   b5ad0:	f000 fcd8 	bl	b6484 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b5ad4:	7923      	ldrb	r3, [r4, #4]
   b5ad6:	06da      	lsls	r2, r3, #27
   b5ad8:	d508      	bpl.n	b5aec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b5ada:	2204      	movs	r2, #4
   b5adc:	4918      	ldr	r1, [pc, #96]	; (b5b40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b5ade:	eb0d 0002 	add.w	r0, sp, r2
   b5ae2:	f000 fd3f 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5ae6:	69a1      	ldr	r1, [r4, #24]
   b5ae8:	f000 fcba 	bl	b6460 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b5aec:	7923      	ldrb	r3, [r4, #4]
   b5aee:	069b      	lsls	r3, r3, #26
   b5af0:	d507      	bpl.n	b5b02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b5af2:	4914      	ldr	r1, [pc, #80]	; (b5b44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b5af4:	2206      	movs	r2, #6
   b5af6:	a801      	add	r0, sp, #4
   b5af8:	f000 fd34 	bl	b6564 <_ZN5spark10JSONWriter4nameEPKcj>
   b5afc:	69e1      	ldr	r1, [r4, #28]
   b5afe:	f7ff f911 	bl	b4d24 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b5b02:	a801      	add	r0, sp, #4
   b5b04:	f000 fc89 	bl	b641a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b5b08:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b5b0a:	490f      	ldr	r1, [pc, #60]	; (b5b48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b5b0c:	6803      	ldr	r3, [r0, #0]
   b5b0e:	2202      	movs	r2, #2
   b5b10:	68db      	ldr	r3, [r3, #12]
   b5b12:	4798      	blx	r3
}
   b5b14:	b005      	add	sp, #20
   b5b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5b1a:	bf00      	nop
   b5b1c:	2003e714 	.word	0x2003e714
   b5b20:	000b75f0 	.word	0x000b75f0
   b5b24:	000b757c 	.word	0x000b757c
   b5b28:	000b75d0 	.word	0x000b75d0
   b5b2c:	000b782c 	.word	0x000b782c
   b5b30:	000b756a 	.word	0x000b756a
   b5b34:	000b75d2 	.word	0x000b75d2
   b5b38:	000b75d5 	.word	0x000b75d5
   b5b3c:	000b75d8 	.word	0x000b75d8
   b5b40:	000b75da 	.word	0x000b75da
   b5b44:	000b75df 	.word	0x000b75df
   b5b48:	000b75cd 	.word	0x000b75cd

000b5b4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b4c:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b4e:	681a      	ldr	r2, [r3, #0]
   b5b50:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b54:	4770      	bx	lr
   b5b56:	bf00      	nop
   b5b58:	2003e5c0 	.word	0x2003e5c0
   b5b5c:	2003e6b0 	.word	0x2003e6b0

000b5b60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5b60:	2100      	movs	r1, #0
   b5b62:	f7fe bd33 	b.w	b45cc <system_delay_ms>
	...

000b5b68 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5b68:	4b01      	ldr	r3, [pc, #4]	; (b5b70 <_GLOBAL__sub_I_RGB+0x8>)
   b5b6a:	2200      	movs	r2, #0
   b5b6c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5b6e:	4770      	bx	lr
   b5b70:	2003e6b4 	.word	0x2003e6b4

000b5b74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5b74:	4b01      	ldr	r3, [pc, #4]	; (b5b7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5b76:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5b78:	4770      	bx	lr
   b5b7a:	bf00      	nop
   b5b7c:	2003e5c4 	.word	0x2003e5c4

000b5b80 <serialEventRun>:
{
   b5b80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5b82:	4b0b      	ldr	r3, [pc, #44]	; (b5bb0 <serialEventRun+0x30>)
   b5b84:	b143      	cbz	r3, b5b98 <serialEventRun+0x18>
   b5b86:	f000 f96b 	bl	b5e60 <_Z16_fetch_usbserialv>
   b5b8a:	6803      	ldr	r3, [r0, #0]
   b5b8c:	691b      	ldr	r3, [r3, #16]
   b5b8e:	4798      	blx	r3
   b5b90:	2800      	cmp	r0, #0
   b5b92:	dd01      	ble.n	b5b98 <serialEventRun+0x18>
        serialEvent();
   b5b94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5b98:	4b06      	ldr	r3, [pc, #24]	; (b5bb4 <serialEventRun+0x34>)
   b5b9a:	b143      	cbz	r3, b5bae <serialEventRun+0x2e>
   b5b9c:	f000 fd72 	bl	b6684 <_Z22__fetch_global_Serial1v>
   b5ba0:	6803      	ldr	r3, [r0, #0]
   b5ba2:	691b      	ldr	r3, [r3, #16]
   b5ba4:	4798      	blx	r3
   b5ba6:	2800      	cmp	r0, #0
   b5ba8:	dd01      	ble.n	b5bae <serialEventRun+0x2e>
        serialEvent1();
   b5baa:	f3af 8000 	nop.w
}
   b5bae:	bd08      	pop	{r3, pc}
	...

000b5bb8 <_post_loop>:
{
   b5bb8:	b508      	push	{r3, lr}
	serialEventRun();
   b5bba:	f7ff ffe1 	bl	b5b80 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5bbe:	f7fe fbdd 	bl	b437c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5bc2:	4b01      	ldr	r3, [pc, #4]	; (b5bc8 <_post_loop+0x10>)
   b5bc4:	6018      	str	r0, [r3, #0]
}
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	2003e740 	.word	0x2003e740

000b5bcc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5bcc:	4805      	ldr	r0, [pc, #20]	; (b5be4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5bce:	4a06      	ldr	r2, [pc, #24]	; (b5be8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5bd0:	4906      	ldr	r1, [pc, #24]	; (b5bec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5bd2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5bd4:	1a12      	subs	r2, r2, r0
   b5bd6:	f001 facf 	bl	b7178 <memcpy>
    __backup_sram_signature = signature;
   b5bda:	4b05      	ldr	r3, [pc, #20]	; (b5bf0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5bdc:	4a05      	ldr	r2, [pc, #20]	; (b5bf4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5bde:	601a      	str	r2, [r3, #0]
}
   b5be0:	bd08      	pop	{r3, pc}
   b5be2:	bf00      	nop
   b5be4:	2003f400 	.word	0x2003f400
   b5be8:	2003f404 	.word	0x2003f404
   b5bec:	000b7984 	.word	0x000b7984
   b5bf0:	2003f400 	.word	0x2003f400
   b5bf4:	9a271c1e 	.word	0x9a271c1e

000b5bf8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5bf8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5bfa:	2300      	movs	r3, #0
   b5bfc:	9300      	str	r3, [sp, #0]
   b5bfe:	461a      	mov	r2, r3
   b5c00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c04:	f7fe fcfc 	bl	b4600 <system_ctrl_set_result>
}
   b5c08:	b003      	add	sp, #12
   b5c0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5c10 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5c10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5c12:	8843      	ldrh	r3, [r0, #2]
   b5c14:	2b0a      	cmp	r3, #10
   b5c16:	d008      	beq.n	b5c2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5c18:	2b50      	cmp	r3, #80	; 0x50
   b5c1a:	d10b      	bne.n	b5c34 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5c1c:	4b09      	ldr	r3, [pc, #36]	; (b5c44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5c1e:	681b      	ldr	r3, [r3, #0]
   b5c20:	b14b      	cbz	r3, b5c36 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5c22:	b003      	add	sp, #12
   b5c24:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5c28:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5c2a:	f7ff ffe5 	bl	b5bf8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5c2e:	b003      	add	sp, #12
   b5c30:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c34:	2300      	movs	r3, #0
   b5c36:	9300      	str	r3, [sp, #0]
   b5c38:	461a      	mov	r2, r3
   b5c3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c3e:	f7fe fcdf 	bl	b4600 <system_ctrl_set_result>
}
   b5c42:	e7f4      	b.n	b5c2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5c44:	2003e6c8 	.word	0x2003e6c8

000b5c48 <module_user_init_hook>:
{
   b5c48:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5c4a:	4812      	ldr	r0, [pc, #72]	; (b5c94 <module_user_init_hook+0x4c>)
   b5c4c:	2100      	movs	r1, #0
   b5c4e:	f7fe fd79 	bl	b4744 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5c52:	4b11      	ldr	r3, [pc, #68]	; (b5c98 <module_user_init_hook+0x50>)
   b5c54:	681a      	ldr	r2, [r3, #0]
   b5c56:	4b11      	ldr	r3, [pc, #68]	; (b5c9c <module_user_init_hook+0x54>)
   b5c58:	429a      	cmp	r2, r3
   b5c5a:	4b11      	ldr	r3, [pc, #68]	; (b5ca0 <module_user_init_hook+0x58>)
   b5c5c:	bf0c      	ite	eq
   b5c5e:	2201      	moveq	r2, #1
   b5c60:	2200      	movne	r2, #0
   b5c62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5c64:	d001      	beq.n	b5c6a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5c66:	f7ff ffb1 	bl	b5bcc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5c6a:	f7fe fb77 	bl	b435c <HAL_RNG_GetRandomNumber>
   b5c6e:	4604      	mov	r4, r0
    srand(seed);
   b5c70:	f001 fab2 	bl	b71d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5c74:	4b0b      	ldr	r3, [pc, #44]	; (b5ca4 <module_user_init_hook+0x5c>)
   b5c76:	b113      	cbz	r3, b5c7e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5c7e:	2100      	movs	r1, #0
   b5c80:	4808      	ldr	r0, [pc, #32]	; (b5ca4 <module_user_init_hook+0x5c>)
   b5c82:	f7fe fd27 	bl	b46d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5c8a:	4807      	ldr	r0, [pc, #28]	; (b5ca8 <module_user_init_hook+0x60>)
   b5c8c:	2100      	movs	r1, #0
   b5c8e:	f7fe bcad 	b.w	b45ec <system_ctrl_set_app_request_handler>
   b5c92:	bf00      	nop
   b5c94:	000b5b75 	.word	0x000b5b75
   b5c98:	2003f400 	.word	0x2003f400
   b5c9c:	9a271c1e 	.word	0x9a271c1e
   b5ca0:	2003e6c4 	.word	0x2003e6c4
   b5ca4:	00000000 	.word	0x00000000
   b5ca8:	000b5c11 	.word	0x000b5c11

000b5cac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5cac:	4770      	bx	lr

000b5cae <_ZN9IPAddressD0Ev>:
   b5cae:	b510      	push	{r4, lr}
   b5cb0:	2118      	movs	r1, #24
   b5cb2:	4604      	mov	r4, r0
   b5cb4:	f7fe f9f3 	bl	b409e <_ZdlPvj>
   b5cb8:	4620      	mov	r0, r4
   b5cba:	bd10      	pop	{r4, pc}

000b5cbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5cbe:	7d03      	ldrb	r3, [r0, #20]
   b5cc0:	2b06      	cmp	r3, #6
{
   b5cc2:	b08d      	sub	sp, #52	; 0x34
   b5cc4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cc6:	f100 0704 	add.w	r7, r0, #4
   b5cca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5cce:	d012      	beq.n	b5cf6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5cd0:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b5cd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5cd8:	220a      	movs	r2, #10
   b5cda:	4630      	mov	r0, r6
   b5cdc:	f7fe fe8f 	bl	b49fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5ce0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5ce2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ce4:	d019      	beq.n	b5d1a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5ce6:	2c00      	cmp	r4, #0
   b5ce8:	d0f4      	beq.n	b5cd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5cea:	212e      	movs	r1, #46	; 0x2e
   b5cec:	4630      	mov	r0, r6
   b5cee:	f7fe fe77 	bl	b49e0 <_ZN5Print5printEc>
   b5cf2:	4404      	add	r4, r0
   b5cf4:	e7ee      	b.n	b5cd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cf6:	232f      	movs	r3, #47	; 0x2f
   b5cf8:	466a      	mov	r2, sp
   b5cfa:	4639      	mov	r1, r7
   b5cfc:	200a      	movs	r0, #10
		buf[0] = 0;
   b5cfe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5d02:	f7fe fb63 	bl	b43cc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5d06:	4668      	mov	r0, sp
   b5d08:	f001 fabd 	bl	b7286 <strlen>
   b5d0c:	6833      	ldr	r3, [r6, #0]
   b5d0e:	4602      	mov	r2, r0
   b5d10:	68db      	ldr	r3, [r3, #12]
   b5d12:	4669      	mov	r1, sp
   b5d14:	4630      	mov	r0, r6
   b5d16:	4798      	blx	r3
   b5d18:	4604      	mov	r4, r0
    }
    return n;
}
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	b00d      	add	sp, #52	; 0x34
   b5d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5d20:	b510      	push	{r4, lr}
   b5d22:	4b05      	ldr	r3, [pc, #20]	; (b5d38 <_ZN9IPAddressC1Ev+0x18>)
   b5d24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5d26:	2211      	movs	r2, #17
   b5d28:	f840 3b04 	str.w	r3, [r0], #4
   b5d2c:	2100      	movs	r1, #0
   b5d2e:	f001 fa4b 	bl	b71c8 <memset>
}
   b5d32:	4620      	mov	r0, r4
   b5d34:	bd10      	pop	{r4, pc}
   b5d36:	bf00      	nop
   b5d38:	000b7684 	.word	0x000b7684

000b5d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5d3c:	4603      	mov	r3, r0
   b5d3e:	4a07      	ldr	r2, [pc, #28]	; (b5d5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5d40:	b510      	push	{r4, lr}
   b5d42:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5d46:	f101 0210 	add.w	r2, r1, #16
   b5d4a:	f851 4b04 	ldr.w	r4, [r1], #4
   b5d4e:	f843 4b04 	str.w	r4, [r3], #4
   b5d52:	4291      	cmp	r1, r2
   b5d54:	d1f9      	bne.n	b5d4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5d56:	780a      	ldrb	r2, [r1, #0]
   b5d58:	701a      	strb	r2, [r3, #0]
}
   b5d5a:	bd10      	pop	{r4, pc}
   b5d5c:	000b7684 	.word	0x000b7684

000b5d60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5d60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5d62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5d66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5d6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5d6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5d72:	2304      	movs	r3, #4
   b5d74:	6041      	str	r1, [r0, #4]
   b5d76:	7503      	strb	r3, [r0, #20]
}
   b5d78:	bd10      	pop	{r4, pc}
	...

000b5d7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5d7c:	b507      	push	{r0, r1, r2, lr}
   b5d7e:	4b06      	ldr	r3, [pc, #24]	; (b5d98 <_ZN9IPAddressC1EPKh+0x1c>)
   b5d80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5d82:	78cb      	ldrb	r3, [r1, #3]
   b5d84:	9300      	str	r3, [sp, #0]
   b5d86:	788b      	ldrb	r3, [r1, #2]
   b5d88:	784a      	ldrb	r2, [r1, #1]
   b5d8a:	7809      	ldrb	r1, [r1, #0]
   b5d8c:	f7ff ffe8 	bl	b5d60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5d90:	b003      	add	sp, #12
   b5d92:	f85d fb04 	ldr.w	pc, [sp], #4
   b5d96:	bf00      	nop
   b5d98:	000b7684 	.word	0x000b7684

000b5d9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d9c:	7441      	strb	r1, [r0, #17]
}
   b5d9e:	4770      	bx	lr

000b5da0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5da0:	4770      	bx	lr

000b5da2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5da2:	4770      	bx	lr

000b5da4 <_ZN9USBSerial4readEv>:
{
   b5da4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5da6:	2100      	movs	r1, #0
   b5da8:	7c00      	ldrb	r0, [r0, #16]
   b5daa:	f7fe fbd7 	bl	b455c <HAL_USB_USART_Receive_Data>
}
   b5dae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5db2:	bd08      	pop	{r3, pc}

000b5db4 <_ZN9USBSerial4peekEv>:
{
   b5db4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5db6:	2101      	movs	r1, #1
   b5db8:	7c00      	ldrb	r0, [r0, #16]
   b5dba:	f7fe fbcf 	bl	b455c <HAL_USB_USART_Receive_Data>
}
   b5dbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5dc2:	bd08      	pop	{r3, pc}

000b5dc4 <_ZN9USBSerial17availableForWriteEv>:
{
   b5dc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5dc6:	7c00      	ldrb	r0, [r0, #16]
   b5dc8:	f7fe fbc0 	bl	b454c <HAL_USB_USART_Available_Data_For_Write>
}
   b5dcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dd0:	bd08      	pop	{r3, pc}

000b5dd2 <_ZN9USBSerial9availableEv>:
{
   b5dd2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5dd4:	7c00      	ldrb	r0, [r0, #16]
   b5dd6:	f7fe fbb1 	bl	b453c <HAL_USB_USART_Available_Data>
}
   b5dda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dde:	bd08      	pop	{r3, pc}

000b5de0 <_ZN9USBSerial5writeEh>:
{
   b5de0:	b513      	push	{r0, r1, r4, lr}
   b5de2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5de4:	7c00      	ldrb	r0, [r0, #16]
{
   b5de6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5de8:	f7fe fbb0 	bl	b454c <HAL_USB_USART_Available_Data_For_Write>
   b5dec:	2800      	cmp	r0, #0
   b5dee:	9901      	ldr	r1, [sp, #4]
   b5df0:	dc01      	bgt.n	b5df6 <_ZN9USBSerial5writeEh+0x16>
   b5df2:	7c60      	ldrb	r0, [r4, #17]
   b5df4:	b120      	cbz	r0, b5e00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5df6:	7c20      	ldrb	r0, [r4, #16]
   b5df8:	f7fe fbb8 	bl	b456c <HAL_USB_USART_Send_Data>
   b5dfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5e00:	b002      	add	sp, #8
   b5e02:	bd10      	pop	{r4, pc}

000b5e04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5e04:	7c00      	ldrb	r0, [r0, #16]
   b5e06:	f7fe bbb9 	b.w	b457c <HAL_USB_USART_Flush_Data>

000b5e0a <_ZN9USBSerialD0Ev>:
   b5e0a:	b510      	push	{r4, lr}
   b5e0c:	2114      	movs	r1, #20
   b5e0e:	4604      	mov	r4, r0
   b5e10:	f7fe f945 	bl	b409e <_ZdlPvj>
   b5e14:	4620      	mov	r0, r4
   b5e16:	bd10      	pop	{r4, pc}

000b5e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5e18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e1e:	4604      	mov	r4, r0
   b5e20:	4608      	mov	r0, r1
   b5e22:	2100      	movs	r1, #0
   b5e24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5e28:	4b04      	ldr	r3, [pc, #16]	; (b5e3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5e2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e2c:	2301      	movs	r3, #1
  _serial = serial;
   b5e2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5e30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5e32:	4611      	mov	r1, r2
   b5e34:	f7fe fb6a 	bl	b450c <HAL_USB_USART_Init>
}
   b5e38:	4620      	mov	r0, r4
   b5e3a:	bd10      	pop	{r4, pc}
   b5e3c:	000b7698 	.word	0x000b7698

000b5e40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5e40:	7c00      	ldrb	r0, [r0, #16]
   b5e42:	2200      	movs	r2, #0
   b5e44:	f7fe bb6a 	b.w	b451c <HAL_USB_USART_Begin>

000b5e48 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5e48:	7c00      	ldrb	r0, [r0, #16]
   b5e4a:	f7fe bb6f 	b.w	b452c <HAL_USB_USART_End>

000b5e4e <_Z19acquireSerialBufferv>:
{
   b5e4e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5e50:	2214      	movs	r2, #20
{
   b5e52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5e54:	2100      	movs	r1, #0
   b5e56:	f001 f9b7 	bl	b71c8 <memset>
}
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	bd10      	pop	{r4, pc}
	...

000b5e60 <_Z16_fetch_usbserialv>:
{
   b5e60:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e62:	4c0f      	ldr	r4, [pc, #60]	; (b5ea0 <_Z16_fetch_usbserialv+0x40>)
{
   b5e64:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5e66:	a803      	add	r0, sp, #12
   b5e68:	f7ff fff1 	bl	b5e4e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e6c:	7821      	ldrb	r1, [r4, #0]
   b5e6e:	f3bf 8f5b 	dmb	ish
   b5e72:	f011 0101 	ands.w	r1, r1, #1
   b5e76:	d10f      	bne.n	b5e98 <_Z16_fetch_usbserialv+0x38>
   b5e78:	4620      	mov	r0, r4
   b5e7a:	9101      	str	r1, [sp, #4]
   b5e7c:	f7fe f91e 	bl	b40bc <__cxa_guard_acquire>
   b5e80:	9901      	ldr	r1, [sp, #4]
   b5e82:	b148      	cbz	r0, b5e98 <_Z16_fetch_usbserialv+0x38>
   b5e84:	aa03      	add	r2, sp, #12
   b5e86:	4807      	ldr	r0, [pc, #28]	; (b5ea4 <_Z16_fetch_usbserialv+0x44>)
   b5e88:	f7ff ffc6 	bl	b5e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	f7fe f91a 	bl	b40c6 <__cxa_guard_release>
   b5e92:	4805      	ldr	r0, [pc, #20]	; (b5ea8 <_Z16_fetch_usbserialv+0x48>)
   b5e94:	f001 f962 	bl	b715c <atexit>
	return _usbserial;
}
   b5e98:	4802      	ldr	r0, [pc, #8]	; (b5ea4 <_Z16_fetch_usbserialv+0x44>)
   b5e9a:	b008      	add	sp, #32
   b5e9c:	bd10      	pop	{r4, pc}
   b5e9e:	bf00      	nop
   b5ea0:	2003e6cc 	.word	0x2003e6cc
   b5ea4:	2003e6d0 	.word	0x2003e6d0
   b5ea8:	000b5da1 	.word	0x000b5da1

000b5eac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5eac:	2200      	movs	r2, #0
   b5eae:	6840      	ldr	r0, [r0, #4]
   b5eb0:	4611      	mov	r1, r2
   b5eb2:	f7fe bbc7 	b.w	b4644 <network_ready>

000b5eb6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5eb6:	2200      	movs	r2, #0
   b5eb8:	6840      	ldr	r0, [r0, #4]
   b5eba:	4611      	mov	r1, r2
   b5ebc:	f7fe bbe2 	b.w	b4684 <network_listening>

000b5ec0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5ec0:	2200      	movs	r2, #0
   b5ec2:	6840      	ldr	r0, [r0, #4]
   b5ec4:	4611      	mov	r1, r2
   b5ec6:	f7fe bbed 	b.w	b46a4 <network_get_listen_timeout>

000b5eca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5eca:	6840      	ldr	r0, [r0, #4]
   b5ecc:	2200      	movs	r2, #0
   b5ece:	f7fe bbe1 	b.w	b4694 <network_set_listen_timeout>

000b5ed2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5ed2:	6840      	ldr	r0, [r0, #4]
   b5ed4:	2200      	movs	r2, #0
   b5ed6:	f081 0101 	eor.w	r1, r1, #1
   b5eda:	f7fe bbcb 	b.w	b4674 <network_listen>

000b5ede <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5ede:	2300      	movs	r3, #0
   b5ee0:	6840      	ldr	r0, [r0, #4]
   b5ee2:	461a      	mov	r2, r3
   b5ee4:	4619      	mov	r1, r3
   b5ee6:	f7fe bbbd 	b.w	b4664 <network_off>

000b5eea <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5eea:	2300      	movs	r3, #0
   b5eec:	6840      	ldr	r0, [r0, #4]
   b5eee:	461a      	mov	r2, r3
   b5ef0:	4619      	mov	r1, r3
   b5ef2:	f7fe bbaf 	b.w	b4654 <network_on>

000b5ef6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5ef6:	2200      	movs	r2, #0
   b5ef8:	6840      	ldr	r0, [r0, #4]
   b5efa:	4611      	mov	r1, r2
   b5efc:	f7fe bb92 	b.w	b4624 <network_connecting>

000b5f00 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f00:	6840      	ldr	r0, [r0, #4]
   b5f02:	2200      	movs	r2, #0
   b5f04:	2102      	movs	r1, #2
   b5f06:	f7fe bb95 	b.w	b4634 <network_disconnect>

000b5f0a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5f0a:	2300      	movs	r3, #0
   b5f0c:	6840      	ldr	r0, [r0, #4]
   b5f0e:	461a      	mov	r2, r3
   b5f10:	f7fe bb80 	b.w	b4614 <network_connect>

000b5f14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5f14:	4b08      	ldr	r3, [pc, #32]	; (b5f38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5f16:	b510      	push	{r4, lr}
   b5f18:	2428      	movs	r4, #40	; 0x28
   b5f1a:	4622      	mov	r2, r4
   b5f1c:	4618      	mov	r0, r3
   b5f1e:	2100      	movs	r1, #0
   b5f20:	f001 f952 	bl	b71c8 <memset>
   b5f24:	4b05      	ldr	r3, [pc, #20]	; (b5f3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5f26:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5f28:	f04f 32ff 	mov.w	r2, #4294967295
   b5f2c:	6042      	str	r2, [r0, #4]
   b5f2e:	2204      	movs	r2, #4
   b5f30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5f32:	4a03      	ldr	r2, [pc, #12]	; (b5f40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5f34:	601a      	str	r2, [r3, #0]
   b5f36:	bd10      	pop	{r4, pc}
   b5f38:	2003e6ec 	.word	0x2003e6ec
   b5f3c:	2003e6e4 	.word	0x2003e6e4
   b5f40:	000b76c8 	.word	0x000b76c8

000b5f44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5f44:	4770      	bx	lr

000b5f46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f46:	7441      	strb	r1, [r0, #17]
}
   b5f48:	4770      	bx	lr

000b5f4a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5f4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5f4c:	7c00      	ldrb	r0, [r0, #16]
   b5f4e:	f7fe fa7d 	bl	b444c <hal_usart_available_data_for_write>
}
   b5f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f56:	bd08      	pop	{r3, pc}

000b5f58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5f58:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5f5a:	7c00      	ldrb	r0, [r0, #16]
   b5f5c:	f7fe fa4e 	bl	b43fc <hal_usart_available>
}
   b5f60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f64:	bd08      	pop	{r3, pc}

000b5f66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5f66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5f68:	7c00      	ldrb	r0, [r0, #16]
   b5f6a:	f7fe fa57 	bl	b441c <hal_usart_peek>
}
   b5f6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f72:	bd08      	pop	{r3, pc}

000b5f74 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5f74:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5f76:	7c00      	ldrb	r0, [r0, #16]
   b5f78:	f7fe fa48 	bl	b440c <hal_usart_read>
}
   b5f7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f80:	bd08      	pop	{r3, pc}

000b5f82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5f82:	7c00      	ldrb	r0, [r0, #16]
   b5f84:	f7fe ba52 	b.w	b442c <hal_usart_flush>

000b5f88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f8a:	7c45      	ldrb	r5, [r0, #17]
{
   b5f8c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f8e:	b12d      	cbz	r5, b5f9c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5f90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5f92:	b003      	add	sp, #12
   b5f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5f98:	f7fe ba28 	b.w	b43ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f9c:	7c00      	ldrb	r0, [r0, #16]
   b5f9e:	9101      	str	r1, [sp, #4]
   b5fa0:	f7fe fa54 	bl	b444c <hal_usart_available_data_for_write>
   b5fa4:	2800      	cmp	r0, #0
   b5fa6:	9901      	ldr	r1, [sp, #4]
   b5fa8:	dcf2      	bgt.n	b5f90 <_ZN11USARTSerial5writeEh+0x8>
}
   b5faa:	4628      	mov	r0, r5
   b5fac:	b003      	add	sp, #12
   b5fae:	bd30      	pop	{r4, r5, pc}

000b5fb0 <_ZN11USARTSerialD0Ev>:
   b5fb0:	b510      	push	{r4, lr}
   b5fb2:	2114      	movs	r1, #20
   b5fb4:	4604      	mov	r4, r0
   b5fb6:	f7fe f872 	bl	b409e <_ZdlPvj>
   b5fba:	4620      	mov	r0, r4
   b5fbc:	bd10      	pop	{r4, pc}
	...

000b5fc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5fc0:	b510      	push	{r4, lr}
   b5fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5fc6:	4604      	mov	r4, r0
   b5fc8:	4608      	mov	r0, r1
   b5fca:	4611      	mov	r1, r2
   b5fcc:	2200      	movs	r2, #0
   b5fce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5fd2:	4b04      	ldr	r3, [pc, #16]	; (b5fe4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5fd4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5fd6:	2301      	movs	r3, #1
  _serial = serial;
   b5fd8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5fda:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5fdc:	f7fe fa46 	bl	b446c <hal_usart_init_ex>
}
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	bd10      	pop	{r4, pc}
   b5fe4:	000b7704 	.word	0x000b7704

000b5fe8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5fe8:	7c00      	ldrb	r0, [r0, #16]
   b5fea:	2300      	movs	r3, #0
   b5fec:	f7fe ba36 	b.w	b445c <hal_usart_begin_config>

000b5ff0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5ff0:	2200      	movs	r2, #0
   b5ff2:	f7ff bff9 	b.w	b5fe8 <_ZN11USARTSerial5beginEmm>

000b5ff6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b5ff6:	7c00      	ldrb	r0, [r0, #16]
   b5ff8:	f7fe b9f0 	b.w	b43dc <hal_usart_end>

000b5ffc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5ffc:	4770      	bx	lr

000b5ffe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6000:	4606      	mov	r6, r0
   b6002:	4615      	mov	r5, r2
   b6004:	460c      	mov	r4, r1
   b6006:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6008:	42bc      	cmp	r4, r7
   b600a:	d006      	beq.n	b601a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b600c:	6833      	ldr	r3, [r6, #0]
   b600e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6012:	689b      	ldr	r3, [r3, #8]
   b6014:	4630      	mov	r0, r6
   b6016:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6018:	e7f6      	b.n	b6008 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b601a:	4628      	mov	r0, r5
   b601c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b601e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b601e:	7c00      	ldrb	r0, [r0, #16]
   b6020:	2200      	movs	r2, #0
   b6022:	f7fe ba2b 	b.w	b447c <hal_i2c_write>

000b6026 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6026:	7c00      	ldrb	r0, [r0, #16]
   b6028:	2100      	movs	r1, #0
   b602a:	f7fe ba2f 	b.w	b448c <hal_i2c_available>

000b602e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b602e:	7c00      	ldrb	r0, [r0, #16]
   b6030:	2100      	movs	r1, #0
   b6032:	f7fe ba33 	b.w	b449c <hal_i2c_read>

000b6036 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6036:	7c00      	ldrb	r0, [r0, #16]
   b6038:	2100      	movs	r1, #0
   b603a:	f7fe ba37 	b.w	b44ac <hal_i2c_peek>

000b603e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b603e:	7c00      	ldrb	r0, [r0, #16]
   b6040:	2100      	movs	r1, #0
   b6042:	f7fe ba3b 	b.w	b44bc <hal_i2c_flush>

000b6046 <_ZN7TwoWireD0Ev>:
   b6046:	b510      	push	{r4, lr}
   b6048:	2114      	movs	r1, #20
   b604a:	4604      	mov	r4, r0
   b604c:	f7fe f827 	bl	b409e <_ZdlPvj>
   b6050:	4620      	mov	r0, r4
   b6052:	bd10      	pop	{r4, pc}

000b6054 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6054:	b538      	push	{r3, r4, r5, lr}
   b6056:	4604      	mov	r4, r0
   b6058:	4615      	mov	r5, r2
   b605a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b605e:	2200      	movs	r2, #0
   b6060:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6064:	4b09      	ldr	r3, [pc, #36]	; (b608c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6066:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6068:	4608      	mov	r0, r1
   b606a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b606c:	4629      	mov	r1, r5
   b606e:	f7fe fa35 	bl	b44dc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6072:	30bf      	adds	r0, #191	; 0xbf
   b6074:	d108      	bne.n	b6088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6076:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6078:	07db      	lsls	r3, r3, #31
   b607a:	d505      	bpl.n	b6088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b607c:	6868      	ldr	r0, [r5, #4]
   b607e:	f7fe fb39 	bl	b46f4 <free>
    free(conf.tx_buffer);
   b6082:	68e8      	ldr	r0, [r5, #12]
   b6084:	f7fe fb36 	bl	b46f4 <free>
}
   b6088:	4620      	mov	r0, r4
   b608a:	bd38      	pop	{r3, r4, r5, pc}
   b608c:	000b7734 	.word	0x000b7734

000b6090 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6090:	2300      	movs	r3, #0
   b6092:	6840      	ldr	r0, [r0, #4]
   b6094:	461a      	mov	r2, r3
   b6096:	f7fe babd 	b.w	b4614 <network_connect>

000b609a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b609a:	6840      	ldr	r0, [r0, #4]
   b609c:	2200      	movs	r2, #0
   b609e:	2102      	movs	r1, #2
   b60a0:	f7fe bac8 	b.w	b4634 <network_disconnect>

000b60a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b60a4:	2200      	movs	r2, #0
   b60a6:	6840      	ldr	r0, [r0, #4]
   b60a8:	4611      	mov	r1, r2
   b60aa:	f7fe babb 	b.w	b4624 <network_connecting>

000b60ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b60ae:	2200      	movs	r2, #0
   b60b0:	6840      	ldr	r0, [r0, #4]
   b60b2:	4611      	mov	r1, r2
   b60b4:	f7fe bac6 	b.w	b4644 <network_ready>

000b60b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b60b8:	2300      	movs	r3, #0
   b60ba:	6840      	ldr	r0, [r0, #4]
   b60bc:	461a      	mov	r2, r3
   b60be:	4619      	mov	r1, r3
   b60c0:	f7fe bac8 	b.w	b4654 <network_on>

000b60c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b60c4:	2300      	movs	r3, #0
   b60c6:	6840      	ldr	r0, [r0, #4]
   b60c8:	461a      	mov	r2, r3
   b60ca:	4619      	mov	r1, r3
   b60cc:	f7fe baca 	b.w	b4664 <network_off>

000b60d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b60d0:	6840      	ldr	r0, [r0, #4]
   b60d2:	2100      	movs	r1, #0
   b60d4:	f7fe baee 	b.w	b46b4 <network_is_on>

000b60d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b60d8:	6840      	ldr	r0, [r0, #4]
   b60da:	2100      	movs	r1, #0
   b60dc:	f7fe baf2 	b.w	b46c4 <network_is_off>

000b60e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b60e0:	6840      	ldr	r0, [r0, #4]
   b60e2:	2200      	movs	r2, #0
   b60e4:	f081 0101 	eor.w	r1, r1, #1
   b60e8:	f7fe bac4 	b.w	b4674 <network_listen>

000b60ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b60ec:	6840      	ldr	r0, [r0, #4]
   b60ee:	2200      	movs	r2, #0
   b60f0:	f7fe bad0 	b.w	b4694 <network_set_listen_timeout>

000b60f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b60f4:	2200      	movs	r2, #0
   b60f6:	6840      	ldr	r0, [r0, #4]
   b60f8:	4611      	mov	r1, r2
   b60fa:	f7fe bad3 	b.w	b46a4 <network_get_listen_timeout>

000b60fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b60fe:	2200      	movs	r2, #0
   b6100:	6840      	ldr	r0, [r0, #4]
   b6102:	4611      	mov	r1, r2
   b6104:	f7fe babe 	b.w	b4684 <network_listening>

000b6108 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b610c:	b095      	sub	sp, #84	; 0x54
   b610e:	4614      	mov	r4, r2
   b6110:	460d      	mov	r5, r1
   b6112:	4607      	mov	r7, r0
    IPAddress addr;
   b6114:	f7ff fe04 	bl	b5d20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6118:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b611a:	221c      	movs	r2, #28
   b611c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b611e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6120:	f001 f852 	bl	b71c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6124:	2340      	movs	r3, #64	; 0x40
   b6126:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6128:	4620      	mov	r0, r4
   b612a:	466b      	mov	r3, sp
   b612c:	aa0c      	add	r2, sp, #48	; 0x30
   b612e:	2100      	movs	r1, #0
   b6130:	f7fe f8fc 	bl	b432c <netdb_getaddrinfo>
    if (!r) {
   b6134:	4604      	mov	r4, r0
   b6136:	2800      	cmp	r0, #0
   b6138:	d14b      	bne.n	b61d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b613a:	4602      	mov	r2, r0
   b613c:	2101      	movs	r1, #1
   b613e:	6868      	ldr	r0, [r5, #4]
   b6140:	f7fe fa80 	bl	b4644 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6144:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6146:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6148:	4622      	mov	r2, r4
   b614a:	6868      	ldr	r0, [r5, #4]
   b614c:	f7fe fa7a 	bl	b4644 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6150:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6152:	4681      	mov	r9, r0
        bool ok = false;
   b6154:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6156:	2e00      	cmp	r6, #0
   b6158:	d03b      	beq.n	b61d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b615a:	2900      	cmp	r1, #0
   b615c:	d139      	bne.n	b61d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b615e:	6873      	ldr	r3, [r6, #4]
   b6160:	2b02      	cmp	r3, #2
   b6162:	d003      	beq.n	b616c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6164:	2b0a      	cmp	r3, #10
   b6166:	d011      	beq.n	b618c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6168:	69f6      	ldr	r6, [r6, #28]
   b616a:	e7f4      	b.n	b6156 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b616c:	f1b8 0f00 	cmp.w	r8, #0
   b6170:	d0fa      	beq.n	b6168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6172:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6174:	a806      	add	r0, sp, #24
   b6176:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6178:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b617a:	f7ff fdff 	bl	b5d7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b617e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6180:	1d3c      	adds	r4, r7, #4
   b6182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6184:	682b      	ldr	r3, [r5, #0]
   b6186:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6188:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b618a:	e7ed      	b.n	b6168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b618c:	f1b9 0f00 	cmp.w	r9, #0
   b6190:	d0ea      	beq.n	b6168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6192:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6194:	2210      	movs	r2, #16
   b6196:	a801      	add	r0, sp, #4
   b6198:	f001 f816 	bl	b71c8 <memset>
                    a.v = 6;
   b619c:	2306      	movs	r3, #6
   b619e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b61a2:	ad01      	add	r5, sp, #4
   b61a4:	f104 0308 	add.w	r3, r4, #8
   b61a8:	3418      	adds	r4, #24
   b61aa:	6818      	ldr	r0, [r3, #0]
   b61ac:	6859      	ldr	r1, [r3, #4]
   b61ae:	462a      	mov	r2, r5
   b61b0:	c203      	stmia	r2!, {r0, r1}
   b61b2:	3308      	adds	r3, #8
   b61b4:	42a3      	cmp	r3, r4
   b61b6:	4615      	mov	r5, r2
   b61b8:	d1f7      	bne.n	b61aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b61ba:	a901      	add	r1, sp, #4
   b61bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b61be:	ad07      	add	r5, sp, #28
   b61c0:	f7ff fdbc 	bl	b5d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b61c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61c6:	1d3c      	adds	r4, r7, #4
   b61c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61ca:	682b      	ldr	r3, [r5, #0]
   b61cc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b61ce:	4649      	mov	r1, r9
   b61d0:	e7ca      	b.n	b6168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b61d2:	9800      	ldr	r0, [sp, #0]
   b61d4:	f7fe f8a2 	bl	b431c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b61d8:	4638      	mov	r0, r7
   b61da:	b015      	add	sp, #84	; 0x54
   b61dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b61e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b61e0:	4b02      	ldr	r3, [pc, #8]	; (b61ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b61e2:	4a03      	ldr	r2, [pc, #12]	; (b61f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b61e4:	601a      	str	r2, [r3, #0]
   b61e6:	2200      	movs	r2, #0
   b61e8:	605a      	str	r2, [r3, #4]

} // spark
   b61ea:	4770      	bx	lr
   b61ec:	2003e714 	.word	0x2003e714
   b61f0:	000b775c 	.word	0x000b775c

000b61f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b61f4:	f100 0310 	add.w	r3, r0, #16
   b61f8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b61fa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b61fe:	2901      	cmp	r1, #1
   b6200:	4618      	mov	r0, r3
   b6202:	d108      	bne.n	b6216 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6204:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6208:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b620c:	3a01      	subs	r2, #1
   b620e:	f103 0310 	add.w	r3, r3, #16
   b6212:	d1f2      	bne.n	b61fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6214:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6216:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6218:	bf04      	itt	eq
   b621a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b621e:	1852      	addeq	r2, r2, r1
   b6220:	e7f4      	b.n	b620c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6222 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6222:	b40e      	push	{r1, r2, r3}
   b6224:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6226:	b088      	sub	sp, #32
   b6228:	af00      	add	r7, sp, #0
   b622a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b622e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6230:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6234:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6236:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6238:	462b      	mov	r3, r5
   b623a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b623c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b623e:	f7fe fa69 	bl	b4714 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6242:	280f      	cmp	r0, #15
   b6244:	687a      	ldr	r2, [r7, #4]
   b6246:	d91a      	bls.n	b627e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6248:	f100 0308 	add.w	r3, r0, #8
   b624c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6250:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6252:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6256:	1c41      	adds	r1, r0, #1
   b6258:	462b      	mov	r3, r5
   b625a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b625c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b625e:	f7fe fa59 	bl	b4714 <vsnprintf>
        if (n > 0) {
   b6262:	1e02      	subs	r2, r0, #0
   b6264:	dd04      	ble.n	b6270 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6266:	6823      	ldr	r3, [r4, #0]
   b6268:	4669      	mov	r1, sp
   b626a:	689b      	ldr	r3, [r3, #8]
   b626c:	4620      	mov	r0, r4
   b626e:	4798      	blx	r3
   b6270:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6272:	3720      	adds	r7, #32
   b6274:	46bd      	mov	sp, r7
   b6276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b627a:	b003      	add	sp, #12
   b627c:	4770      	bx	lr
    } else if (n > 0) {
   b627e:	2800      	cmp	r0, #0
   b6280:	d0f7      	beq.n	b6272 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6282:	6823      	ldr	r3, [r4, #0]
   b6284:	4602      	mov	r2, r0
   b6286:	689b      	ldr	r3, [r3, #8]
   b6288:	f107 0110 	add.w	r1, r7, #16
   b628c:	4620      	mov	r0, r4
   b628e:	4798      	blx	r3
}
   b6290:	e7ef      	b.n	b6272 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6292 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6292:	b538      	push	{r3, r4, r5, lr}
   b6294:	680b      	ldr	r3, [r1, #0]
   b6296:	6003      	str	r3, [r0, #0]
   b6298:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b629a:	6843      	ldr	r3, [r0, #4]
   b629c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b629e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b62a0:	d008      	beq.n	b62b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b62a2:	b115      	cbz	r5, b62aa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b62a4:	686b      	ldr	r3, [r5, #4]
   b62a6:	3301      	adds	r3, #1
   b62a8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b62aa:	6860      	ldr	r0, [r4, #4]
   b62ac:	b108      	cbz	r0, b62b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b62ae:	f7fe fb39 	bl	b4924 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b62b2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b62b4:	bd38      	pop	{r3, r4, r5, pc}

000b62b6 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b62b6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b62b8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b62ba:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b62be:	689b      	ldr	r3, [r3, #8]
   b62c0:	2201      	movs	r2, #1
   b62c2:	f10d 0107 	add.w	r1, sp, #7
   b62c6:	4798      	blx	r3
}
   b62c8:	b003      	add	sp, #12
   b62ca:	f85d fb04 	ldr.w	pc, [sp], #4

000b62ce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b62ce:	460b      	mov	r3, r1
   b62d0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b62d2:	2200      	movs	r2, #0
   b62d4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b62d6:	e9c0 2200 	strd	r2, r2, [r0]
   b62da:	4604      	mov	r4, r0
        t_ = t;
   b62dc:	6083      	str	r3, [r0, #8]
    if (t) {
   b62de:	b90b      	cbnz	r3, b62e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b62e0:	4620      	mov	r0, r4
   b62e2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b62e4:	f7ff ffd5 	bl	b6292 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b62e8:	e7fa      	b.n	b62e0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b62ea <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b62ea:	6883      	ldr	r3, [r0, #8]
   b62ec:	b1eb      	cbz	r3, b632a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b62ee:	781a      	ldrb	r2, [r3, #0]
   b62f0:	2a03      	cmp	r2, #3
   b62f2:	d81a      	bhi.n	b632a <_ZNK5spark9JSONValue4typeEv+0x40>
   b62f4:	e8df f002 	tbb	[pc, r2]
   b62f8:	1b021704 	.word	0x1b021704
   b62fc:	2005      	movs	r0, #5
   b62fe:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6300:	6802      	ldr	r2, [r0, #0]
   b6302:	685b      	ldr	r3, [r3, #4]
   b6304:	6852      	ldr	r2, [r2, #4]
   b6306:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6308:	282d      	cmp	r0, #45	; 0x2d
   b630a:	d012      	beq.n	b6332 <_ZNK5spark9JSONValue4typeEv+0x48>
   b630c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6310:	2b09      	cmp	r3, #9
   b6312:	d90e      	bls.n	b6332 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6314:	2874      	cmp	r0, #116	; 0x74
   b6316:	d00e      	beq.n	b6336 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6318:	2866      	cmp	r0, #102	; 0x66
   b631a:	d00c      	beq.n	b6336 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b631c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6320:	4258      	negs	r0, r3
   b6322:	4158      	adcs	r0, r3
   b6324:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6326:	2006      	movs	r0, #6
   b6328:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b632a:	2000      	movs	r0, #0
   b632c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b632e:	2004      	movs	r0, #4
   b6330:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6332:	2003      	movs	r0, #3
   b6334:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6336:	2002      	movs	r0, #2
}
   b6338:	4770      	bx	lr

000b633a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b633a:	b510      	push	{r4, lr}
   b633c:	4604      	mov	r4, r0
    switch (type()) {
   b633e:	f7ff ffd4 	bl	b62ea <_ZNK5spark9JSONValue4typeEv>
   b6342:	2802      	cmp	r0, #2
   b6344:	d00e      	beq.n	b6364 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6346:	1ec3      	subs	r3, r0, #3
   b6348:	b2db      	uxtb	r3, r3
   b634a:	2b01      	cmp	r3, #1
   b634c:	d814      	bhi.n	b6378 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b634e:	6822      	ldr	r2, [r4, #0]
   b6350:	68a3      	ldr	r3, [r4, #8]
   b6352:	6850      	ldr	r0, [r2, #4]
   b6354:	685b      	ldr	r3, [r3, #4]
}
   b6356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b635a:	220a      	movs	r2, #10
   b635c:	2100      	movs	r1, #0
   b635e:	4418      	add	r0, r3
   b6360:	f001 b844 	b.w	b73ec <strtol>
        const char* const s = d_->json + t_->start;
   b6364:	6822      	ldr	r2, [r4, #0]
   b6366:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6368:	6852      	ldr	r2, [r2, #4]
   b636a:	685b      	ldr	r3, [r3, #4]
   b636c:	5cd0      	ldrb	r0, [r2, r3]
   b636e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6372:	4258      	negs	r0, r3
   b6374:	4158      	adcs	r0, r3
}
   b6376:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6378:	2000      	movs	r0, #0
   b637a:	e7fc      	b.n	b6376 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b637c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b637c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b637e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6380:	e9c0 3300 	strd	r3, r3, [r0]
   b6384:	4604      	mov	r4, r0
        n_(0) {
   b6386:	480e      	ldr	r0, [pc, #56]	; (b63c0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6388:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b638c:	b1a9      	cbz	r1, b63ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b638e:	780b      	ldrb	r3, [r1, #0]
   b6390:	2b03      	cmp	r3, #3
   b6392:	d006      	beq.n	b63a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6394:	b98b      	cbnz	r3, b63ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6396:	6813      	ldr	r3, [r2, #0]
   b6398:	6858      	ldr	r0, [r3, #4]
   b639a:	684b      	ldr	r3, [r1, #4]
   b639c:	5cc3      	ldrb	r3, [r0, r3]
   b639e:	2b6e      	cmp	r3, #110	; 0x6e
   b63a0:	d007      	beq.n	b63b2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b63a2:	6813      	ldr	r3, [r2, #0]
   b63a4:	684d      	ldr	r5, [r1, #4]
   b63a6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b63a8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b63aa:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b63ac:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b63ae:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b63b0:	60e3      	str	r3, [r4, #12]
   b63b2:	4611      	mov	r1, r2
   b63b4:	4620      	mov	r0, r4
   b63b6:	f7ff ff6c 	bl	b6292 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b63ba:	4620      	mov	r0, r4
   b63bc:	bd38      	pop	{r3, r4, r5, pc}
   b63be:	bf00      	nop
   b63c0:	000b75cf 	.word	0x000b75cf

000b63c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b63c4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b63c6:	2500      	movs	r5, #0
   b63c8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b63ca:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b63ce:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b63d2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b63d6:	4604      	mov	r4, r0
   b63d8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b63da:	b14b      	cbz	r3, b63f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b63dc:	781a      	ldrb	r2, [r3, #0]
   b63de:	2a01      	cmp	r2, #1
   b63e0:	d106      	bne.n	b63f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b63e2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b63e6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b63e8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b63ea:	6143      	str	r3, [r0, #20]
   b63ec:	f7ff ff51 	bl	b6292 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b63f0:	4620      	mov	r0, r4
   b63f2:	bd38      	pop	{r3, r4, r5, pc}

000b63f4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b63f4:	b510      	push	{r4, lr}
    if (!n_) {
   b63f6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b63f8:	4604      	mov	r4, r0
    if (!n_) {
   b63fa:	b163      	cbz	r3, b6416 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b63fc:	6880      	ldr	r0, [r0, #8]
   b63fe:	60e0      	str	r0, [r4, #12]
    --n_;
   b6400:	3b01      	subs	r3, #1
    ++t_;
   b6402:	3010      	adds	r0, #16
   b6404:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6406:	6120      	str	r0, [r4, #16]
    --n_;
   b6408:	6163      	str	r3, [r4, #20]
    if (n_) {
   b640a:	b113      	cbz	r3, b6412 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b640c:	f7ff fef2 	bl	b61f4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6410:	60a0      	str	r0, [r4, #8]
    return true;
   b6412:	2001      	movs	r0, #1
   b6414:	e000      	b.n	b6418 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6416:	4618      	mov	r0, r3
}
   b6418:	bd10      	pop	{r4, pc}

000b641a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b641a:	b510      	push	{r4, lr}
    write('}');
   b641c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b641e:	4604      	mov	r4, r0
    write('}');
   b6420:	f7ff ff49 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6424:	2301      	movs	r3, #1
   b6426:	7123      	strb	r3, [r4, #4]
}
   b6428:	4620      	mov	r0, r4
   b642a:	bd10      	pop	{r4, pc}

000b642c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b642c:	b508      	push	{r3, lr}
    switch (state_) {
   b642e:	7903      	ldrb	r3, [r0, #4]
   b6430:	2b01      	cmp	r3, #1
   b6432:	d002      	beq.n	b643a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6434:	2b02      	cmp	r3, #2
   b6436:	d004      	beq.n	b6442 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6438:	bd08      	pop	{r3, pc}
        write(',');
   b643a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b643c:	f7ff ff3b 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
}
   b6440:	e7fa      	b.n	b6438 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6442:	213a      	movs	r1, #58	; 0x3a
   b6444:	e7fa      	b.n	b643c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6446 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6446:	b510      	push	{r4, lr}
   b6448:	4604      	mov	r4, r0
    writeSeparator();
   b644a:	f7ff ffef 	bl	b642c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b644e:	4620      	mov	r0, r4
   b6450:	217b      	movs	r1, #123	; 0x7b
   b6452:	f7ff ff30 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6456:	2300      	movs	r3, #0
   b6458:	7123      	strb	r3, [r4, #4]
}
   b645a:	4620      	mov	r0, r4
   b645c:	bd10      	pop	{r4, pc}
	...

000b6460 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6460:	b513      	push	{r0, r1, r4, lr}
   b6462:	4604      	mov	r4, r0
   b6464:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6466:	f7ff ffe1 	bl	b642c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b646a:	6823      	ldr	r3, [r4, #0]
   b646c:	9a01      	ldr	r2, [sp, #4]
   b646e:	68db      	ldr	r3, [r3, #12]
   b6470:	4903      	ldr	r1, [pc, #12]	; (b6480 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6472:	4620      	mov	r0, r4
   b6474:	4798      	blx	r3
    state_ = NEXT;
   b6476:	2301      	movs	r3, #1
}
   b6478:	4620      	mov	r0, r4
    state_ = NEXT;
   b647a:	7123      	strb	r3, [r4, #4]
}
   b647c:	b002      	add	sp, #8
   b647e:	bd10      	pop	{r4, pc}
   b6480:	000b75a9 	.word	0x000b75a9

000b6484 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6484:	b513      	push	{r0, r1, r4, lr}
   b6486:	4604      	mov	r4, r0
   b6488:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b648a:	f7ff ffcf 	bl	b642c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b648e:	6823      	ldr	r3, [r4, #0]
   b6490:	9a01      	ldr	r2, [sp, #4]
   b6492:	68db      	ldr	r3, [r3, #12]
   b6494:	4903      	ldr	r1, [pc, #12]	; (b64a4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6496:	4620      	mov	r0, r4
   b6498:	4798      	blx	r3
    state_ = NEXT;
   b649a:	2301      	movs	r3, #1
}
   b649c:	4620      	mov	r0, r4
    state_ = NEXT;
   b649e:	7123      	strb	r3, [r4, #4]
}
   b64a0:	b002      	add	sp, #8
   b64a2:	bd10      	pop	{r4, pc}
   b64a4:	000b7790 	.word	0x000b7790

000b64a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b64a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b64ac:	460d      	mov	r5, r1
    write('"');
   b64ae:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b64b0:	4690      	mov	r8, r2
   b64b2:	4604      	mov	r4, r0
    write('"');
   b64b4:	f7ff feff 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b64b8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6560 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b64bc:	44a8      	add	r8, r5
    const char *s = str;
   b64be:	462f      	mov	r7, r5
    while (s != end) {
   b64c0:	4547      	cmp	r7, r8
   b64c2:	46ba      	mov	sl, r7
   b64c4:	d03d      	beq.n	b6542 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b64c6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b64ca:	2e22      	cmp	r6, #34	; 0x22
   b64cc:	d006      	beq.n	b64dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b64ce:	2e5c      	cmp	r6, #92	; 0x5c
   b64d0:	d004      	beq.n	b64dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b64d2:	4630      	mov	r0, r6
   b64d4:	f000 fe48 	bl	b7168 <isprint>
   b64d8:	2800      	cmp	r0, #0
   b64da:	d1f1      	bne.n	b64c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b64dc:	6823      	ldr	r3, [r4, #0]
   b64de:	ebaa 0205 	sub.w	r2, sl, r5
   b64e2:	689b      	ldr	r3, [r3, #8]
   b64e4:	4629      	mov	r1, r5
   b64e6:	4620      	mov	r0, r4
   b64e8:	4798      	blx	r3
            write('\\');
   b64ea:	215c      	movs	r1, #92	; 0x5c
   b64ec:	4620      	mov	r0, r4
   b64ee:	f7ff fee2 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b64f2:	2e0d      	cmp	r6, #13
   b64f4:	d80a      	bhi.n	b650c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b64f6:	2e07      	cmp	r6, #7
   b64f8:	d91c      	bls.n	b6534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b64fa:	f1a6 0308 	sub.w	r3, r6, #8
   b64fe:	2b05      	cmp	r3, #5
   b6500:	d818      	bhi.n	b6534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6502:	e8df f003 	tbb	[pc, r3]
   b6506:	0f0d      	.short	0x0f0d
   b6508:	15131711 	.word	0x15131711
   b650c:	2e22      	cmp	r6, #34	; 0x22
   b650e:	d001      	beq.n	b6514 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6510:	2e5c      	cmp	r6, #92	; 0x5c
   b6512:	d10f      	bne.n	b6534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6514:	4631      	mov	r1, r6
                write('b');
   b6516:	4620      	mov	r0, r4
   b6518:	f7ff fecd 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b651c:	463d      	mov	r5, r7
    while (s != end) {
   b651e:	e7cf      	b.n	b64c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6520:	2162      	movs	r1, #98	; 0x62
   b6522:	e7f8      	b.n	b6516 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6524:	2174      	movs	r1, #116	; 0x74
   b6526:	e7f6      	b.n	b6516 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6528:	216e      	movs	r1, #110	; 0x6e
   b652a:	e7f4      	b.n	b6516 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b652c:	2166      	movs	r1, #102	; 0x66
   b652e:	e7f2      	b.n	b6516 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6530:	2172      	movs	r1, #114	; 0x72
   b6532:	e7f0      	b.n	b6516 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6534:	6823      	ldr	r3, [r4, #0]
   b6536:	4632      	mov	r2, r6
   b6538:	68db      	ldr	r3, [r3, #12]
   b653a:	4649      	mov	r1, r9
   b653c:	4620      	mov	r0, r4
   b653e:	4798      	blx	r3
                break;
   b6540:	e7ec      	b.n	b651c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6542:	42bd      	cmp	r5, r7
   b6544:	d005      	beq.n	b6552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6546:	6823      	ldr	r3, [r4, #0]
   b6548:	1b7a      	subs	r2, r7, r5
   b654a:	689b      	ldr	r3, [r3, #8]
   b654c:	4629      	mov	r1, r5
   b654e:	4620      	mov	r0, r4
   b6550:	4798      	blx	r3
    }
    write('"');
   b6552:	2122      	movs	r1, #34	; 0x22
   b6554:	4620      	mov	r0, r4
   b6556:	f7ff feae 	bl	b62b6 <_ZN5spark10JSONWriter5writeEc>
}
   b655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b655e:	bf00      	nop
   b6560:	000b7793 	.word	0x000b7793

000b6564 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6564:	b513      	push	{r0, r1, r4, lr}
   b6566:	4604      	mov	r4, r0
   b6568:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b656c:	f7ff ff5e 	bl	b642c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6570:	4620      	mov	r0, r4
   b6572:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6576:	f7ff ff97 	bl	b64a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b657a:	2302      	movs	r3, #2
}
   b657c:	4620      	mov	r0, r4
    state_ = VALUE;
   b657e:	7123      	strb	r3, [r4, #4]
}
   b6580:	b002      	add	sp, #8
   b6582:	bd10      	pop	{r4, pc}

000b6584 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6584:	b513      	push	{r0, r1, r4, lr}
   b6586:	4604      	mov	r4, r0
   b6588:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b658c:	f7ff ff4e 	bl	b642c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6590:	4620      	mov	r0, r4
   b6592:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6596:	f7ff ff87 	bl	b64a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b659a:	2301      	movs	r3, #1
}
   b659c:	4620      	mov	r0, r4
    state_ = NEXT;
   b659e:	7123      	strb	r3, [r4, #4]
}
   b65a0:	b002      	add	sp, #8
   b65a2:	bd10      	pop	{r4, pc}

000b65a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b65a4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b65a6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b65a8:	d902      	bls.n	b65b0 <pinAvailable+0xc>
    return false;
   b65aa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b65ac:	b002      	add	sp, #8
   b65ae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b65b0:	f1a0 030b 	sub.w	r3, r0, #11
   b65b4:	2b02      	cmp	r3, #2
   b65b6:	d81a      	bhi.n	b65ee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b65b8:	4c17      	ldr	r4, [pc, #92]	; (b6618 <pinAvailable+0x74>)
   b65ba:	7821      	ldrb	r1, [r4, #0]
   b65bc:	f3bf 8f5b 	dmb	ish
   b65c0:	f011 0101 	ands.w	r1, r1, #1
   b65c4:	d10b      	bne.n	b65de <pinAvailable+0x3a>
   b65c6:	4620      	mov	r0, r4
   b65c8:	9101      	str	r1, [sp, #4]
   b65ca:	f7fd fd77 	bl	b40bc <__cxa_guard_acquire>
   b65ce:	9901      	ldr	r1, [sp, #4]
   b65d0:	b128      	cbz	r0, b65de <pinAvailable+0x3a>
   b65d2:	4812      	ldr	r0, [pc, #72]	; (b661c <pinAvailable+0x78>)
   b65d4:	f7fe f8fc 	bl	b47d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b65d8:	4620      	mov	r0, r4
   b65da:	f7fd fd74 	bl	b40c6 <__cxa_guard_release>
   b65de:	4b0f      	ldr	r3, [pc, #60]	; (b661c <pinAvailable+0x78>)
   b65e0:	7818      	ldrb	r0, [r3, #0]
   b65e2:	f7fd ff8b 	bl	b44fc <hal_spi_is_enabled>
   b65e6:	2800      	cmp	r0, #0
   b65e8:	d1df      	bne.n	b65aa <pinAvailable+0x6>
  return true; // 'pin' is available
   b65ea:	2001      	movs	r0, #1
   b65ec:	e7de      	b.n	b65ac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b65ee:	2801      	cmp	r0, #1
   b65f0:	d809      	bhi.n	b6606 <pinAvailable+0x62>
   b65f2:	f000 f887 	bl	b6704 <_Z19__fetch_global_Wirev>
   b65f6:	2100      	movs	r1, #0
   b65f8:	7c00      	ldrb	r0, [r0, #16]
   b65fa:	f7fd ff67 	bl	b44cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b65fe:	f080 0001 	eor.w	r0, r0, #1
   b6602:	b2c0      	uxtb	r0, r0
   b6604:	e7d2      	b.n	b65ac <pinAvailable+0x8>
   b6606:	3809      	subs	r0, #9
   b6608:	2801      	cmp	r0, #1
   b660a:	d8ee      	bhi.n	b65ea <pinAvailable+0x46>
   b660c:	f000 f83a 	bl	b6684 <_Z22__fetch_global_Serial1v>
   b6610:	7c00      	ldrb	r0, [r0, #16]
   b6612:	f7fd ff13 	bl	b443c <hal_usart_is_enabled>
   b6616:	e7f2      	b.n	b65fe <pinAvailable+0x5a>
   b6618:	2003e71c 	.word	0x2003e71c
   b661c:	2003e720 	.word	0x2003e720

000b6620 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6620:	280d      	cmp	r0, #13
{
   b6622:	b510      	push	{r4, lr}
   b6624:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6626:	bf9c      	itt	ls
   b6628:	340e      	addls	r4, #14
   b662a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b662c:	4620      	mov	r0, r4
   b662e:	f7ff ffb9 	bl	b65a4 <pinAvailable>
   b6632:	b150      	cbz	r0, b664a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6634:	2103      	movs	r1, #3
   b6636:	4620      	mov	r0, r4
   b6638:	f7fd fe80 	bl	b433c <HAL_Validate_Pin_Function>
   b663c:	2803      	cmp	r0, #3
   b663e:	d104      	bne.n	b664a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6640:	4620      	mov	r0, r4
}
   b6642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6646:	f7fd be81 	b.w	b434c <hal_adc_read>
}
   b664a:	2000      	movs	r0, #0
   b664c:	bd10      	pop	{r4, pc}

000b664e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b664e:	4770      	bx	lr

000b6650 <_Z20acquireSerial1Bufferv>:
{
   b6650:	b538      	push	{r3, r4, r5, lr}
   b6652:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6654:	2514      	movs	r5, #20
   b6656:	462a      	mov	r2, r5
   b6658:	2100      	movs	r1, #0
   b665a:	f000 fdb5 	bl	b71c8 <memset>
   b665e:	8025      	strh	r5, [r4, #0]
   b6660:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6662:	4907      	ldr	r1, [pc, #28]	; (b6680 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6664:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6666:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6668:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b666a:	f000 f871 	bl	b6750 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b666e:	4904      	ldr	r1, [pc, #16]	; (b6680 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6670:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6672:	4628      	mov	r0, r5
   b6674:	f000 f86c 	bl	b6750 <_ZnajRKSt9nothrow_t>
    };
   b6678:	60e0      	str	r0, [r4, #12]
}
   b667a:	4620      	mov	r0, r4
   b667c:	bd38      	pop	{r3, r4, r5, pc}
   b667e:	bf00      	nop
   b6680:	000b7799 	.word	0x000b7799

000b6684 <_Z22__fetch_global_Serial1v>:
{
   b6684:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6686:	4d0e      	ldr	r5, [pc, #56]	; (b66c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6688:	7829      	ldrb	r1, [r5, #0]
   b668a:	f3bf 8f5b 	dmb	ish
   b668e:	f011 0401 	ands.w	r4, r1, #1
{
   b6692:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6694:	d111      	bne.n	b66ba <_Z22__fetch_global_Serial1v+0x36>
   b6696:	4628      	mov	r0, r5
   b6698:	f7fd fd10 	bl	b40bc <__cxa_guard_acquire>
   b669c:	b168      	cbz	r0, b66ba <_Z22__fetch_global_Serial1v+0x36>
   b669e:	a801      	add	r0, sp, #4
   b66a0:	f7ff ffd6 	bl	b6650 <_Z20acquireSerial1Bufferv>
   b66a4:	aa01      	add	r2, sp, #4
   b66a6:	4621      	mov	r1, r4
   b66a8:	4806      	ldr	r0, [pc, #24]	; (b66c4 <_Z22__fetch_global_Serial1v+0x40>)
   b66aa:	f7ff fc89 	bl	b5fc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b66ae:	4628      	mov	r0, r5
   b66b0:	f7fd fd09 	bl	b40c6 <__cxa_guard_release>
   b66b4:	4804      	ldr	r0, [pc, #16]	; (b66c8 <_Z22__fetch_global_Serial1v+0x44>)
   b66b6:	f000 fd51 	bl	b715c <atexit>
    return serial1;
}
   b66ba:	4802      	ldr	r0, [pc, #8]	; (b66c4 <_Z22__fetch_global_Serial1v+0x40>)
   b66bc:	b007      	add	sp, #28
   b66be:	bd30      	pop	{r4, r5, pc}
   b66c0:	2003e728 	.word	0x2003e728
   b66c4:	2003e72c 	.word	0x2003e72c
   b66c8:	000b664f 	.word	0x000b664f

000b66cc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b66cc:	4770      	bx	lr
	...

000b66d0 <_Z17acquireWireBufferv>:
{
   b66d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b66d2:	4b0a      	ldr	r3, [pc, #40]	; (b66fc <_Z17acquireWireBufferv+0x2c>)
   b66d4:	6003      	str	r3, [r0, #0]
   b66d6:	2301      	movs	r3, #1
{
   b66d8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b66da:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b66dc:	4908      	ldr	r1, [pc, #32]	; (b6700 <_Z17acquireWireBufferv+0x30>)
   b66de:	2020      	movs	r0, #32
   b66e0:	f000 f836 	bl	b6750 <_ZnajRKSt9nothrow_t>
	};
   b66e4:	2520      	movs	r5, #32
   b66e6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b66e8:	4905      	ldr	r1, [pc, #20]	; (b6700 <_Z17acquireWireBufferv+0x30>)
	};
   b66ea:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b66ec:	4628      	mov	r0, r5
   b66ee:	f000 f82f 	bl	b6750 <_ZnajRKSt9nothrow_t>
	};
   b66f2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b66f6:	4620      	mov	r0, r4
   b66f8:	bd38      	pop	{r3, r4, r5, pc}
   b66fa:	bf00      	nop
   b66fc:	00010018 	.word	0x00010018
   b6700:	000b7799 	.word	0x000b7799

000b6704 <_Z19__fetch_global_Wirev>:
{
   b6704:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6706:	4d0e      	ldr	r5, [pc, #56]	; (b6740 <_Z19__fetch_global_Wirev+0x3c>)
   b6708:	7829      	ldrb	r1, [r5, #0]
   b670a:	f3bf 8f5b 	dmb	ish
   b670e:	f011 0401 	ands.w	r4, r1, #1
{
   b6712:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6714:	d111      	bne.n	b673a <_Z19__fetch_global_Wirev+0x36>
   b6716:	4628      	mov	r0, r5
   b6718:	f7fd fcd0 	bl	b40bc <__cxa_guard_acquire>
   b671c:	b168      	cbz	r0, b673a <_Z19__fetch_global_Wirev+0x36>
   b671e:	4668      	mov	r0, sp
   b6720:	f7ff ffd6 	bl	b66d0 <_Z17acquireWireBufferv>
   b6724:	466a      	mov	r2, sp
   b6726:	4621      	mov	r1, r4
   b6728:	4806      	ldr	r0, [pc, #24]	; (b6744 <_Z19__fetch_global_Wirev+0x40>)
   b672a:	f7ff fc93 	bl	b6054 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b672e:	4628      	mov	r0, r5
   b6730:	f7fd fcc9 	bl	b40c6 <__cxa_guard_release>
   b6734:	4804      	ldr	r0, [pc, #16]	; (b6748 <_Z19__fetch_global_Wirev+0x44>)
   b6736:	f000 fd11 	bl	b715c <atexit>
	return wire;
}
   b673a:	4802      	ldr	r0, [pc, #8]	; (b6744 <_Z19__fetch_global_Wirev+0x40>)
   b673c:	b007      	add	sp, #28
   b673e:	bd30      	pop	{r4, r5, pc}
   b6740:	2003e744 	.word	0x2003e744
   b6744:	2003e748 	.word	0x2003e748
   b6748:	000b66cd 	.word	0x000b66cd

000b674c <_ZnwjRKSt9nothrow_t>:
   b674c:	f7fd bca3 	b.w	b4096 <_Znwj>

000b6750 <_ZnajRKSt9nothrow_t>:
   b6750:	f7fd bca3 	b.w	b409a <_Znaj>

000b6754 <__aeabi_drsub>:
   b6754:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6758:	e002      	b.n	b6760 <__adddf3>
   b675a:	bf00      	nop

000b675c <__aeabi_dsub>:
   b675c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6760 <__adddf3>:
   b6760:	b530      	push	{r4, r5, lr}
   b6762:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6766:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b676a:	ea94 0f05 	teq	r4, r5
   b676e:	bf08      	it	eq
   b6770:	ea90 0f02 	teqeq	r0, r2
   b6774:	bf1f      	itttt	ne
   b6776:	ea54 0c00 	orrsne.w	ip, r4, r0
   b677a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b677e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6782:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6786:	f000 80e2 	beq.w	b694e <__adddf3+0x1ee>
   b678a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b678e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6792:	bfb8      	it	lt
   b6794:	426d      	neglt	r5, r5
   b6796:	dd0c      	ble.n	b67b2 <__adddf3+0x52>
   b6798:	442c      	add	r4, r5
   b679a:	ea80 0202 	eor.w	r2, r0, r2
   b679e:	ea81 0303 	eor.w	r3, r1, r3
   b67a2:	ea82 0000 	eor.w	r0, r2, r0
   b67a6:	ea83 0101 	eor.w	r1, r3, r1
   b67aa:	ea80 0202 	eor.w	r2, r0, r2
   b67ae:	ea81 0303 	eor.w	r3, r1, r3
   b67b2:	2d36      	cmp	r5, #54	; 0x36
   b67b4:	bf88      	it	hi
   b67b6:	bd30      	pophi	{r4, r5, pc}
   b67b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b67bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b67c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b67c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b67c8:	d002      	beq.n	b67d0 <__adddf3+0x70>
   b67ca:	4240      	negs	r0, r0
   b67cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b67d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b67d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b67d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b67dc:	d002      	beq.n	b67e4 <__adddf3+0x84>
   b67de:	4252      	negs	r2, r2
   b67e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b67e4:	ea94 0f05 	teq	r4, r5
   b67e8:	f000 80a7 	beq.w	b693a <__adddf3+0x1da>
   b67ec:	f1a4 0401 	sub.w	r4, r4, #1
   b67f0:	f1d5 0e20 	rsbs	lr, r5, #32
   b67f4:	db0d      	blt.n	b6812 <__adddf3+0xb2>
   b67f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b67fa:	fa22 f205 	lsr.w	r2, r2, r5
   b67fe:	1880      	adds	r0, r0, r2
   b6800:	f141 0100 	adc.w	r1, r1, #0
   b6804:	fa03 f20e 	lsl.w	r2, r3, lr
   b6808:	1880      	adds	r0, r0, r2
   b680a:	fa43 f305 	asr.w	r3, r3, r5
   b680e:	4159      	adcs	r1, r3
   b6810:	e00e      	b.n	b6830 <__adddf3+0xd0>
   b6812:	f1a5 0520 	sub.w	r5, r5, #32
   b6816:	f10e 0e20 	add.w	lr, lr, #32
   b681a:	2a01      	cmp	r2, #1
   b681c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6820:	bf28      	it	cs
   b6822:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6826:	fa43 f305 	asr.w	r3, r3, r5
   b682a:	18c0      	adds	r0, r0, r3
   b682c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6830:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6834:	d507      	bpl.n	b6846 <__adddf3+0xe6>
   b6836:	f04f 0e00 	mov.w	lr, #0
   b683a:	f1dc 0c00 	rsbs	ip, ip, #0
   b683e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6842:	eb6e 0101 	sbc.w	r1, lr, r1
   b6846:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b684a:	d31b      	bcc.n	b6884 <__adddf3+0x124>
   b684c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6850:	d30c      	bcc.n	b686c <__adddf3+0x10c>
   b6852:	0849      	lsrs	r1, r1, #1
   b6854:	ea5f 0030 	movs.w	r0, r0, rrx
   b6858:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b685c:	f104 0401 	add.w	r4, r4, #1
   b6860:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6864:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6868:	f080 809a 	bcs.w	b69a0 <__adddf3+0x240>
   b686c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6870:	bf08      	it	eq
   b6872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6876:	f150 0000 	adcs.w	r0, r0, #0
   b687a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b687e:	ea41 0105 	orr.w	r1, r1, r5
   b6882:	bd30      	pop	{r4, r5, pc}
   b6884:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6888:	4140      	adcs	r0, r0
   b688a:	eb41 0101 	adc.w	r1, r1, r1
   b688e:	3c01      	subs	r4, #1
   b6890:	bf28      	it	cs
   b6892:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6896:	d2e9      	bcs.n	b686c <__adddf3+0x10c>
   b6898:	f091 0f00 	teq	r1, #0
   b689c:	bf04      	itt	eq
   b689e:	4601      	moveq	r1, r0
   b68a0:	2000      	moveq	r0, #0
   b68a2:	fab1 f381 	clz	r3, r1
   b68a6:	bf08      	it	eq
   b68a8:	3320      	addeq	r3, #32
   b68aa:	f1a3 030b 	sub.w	r3, r3, #11
   b68ae:	f1b3 0220 	subs.w	r2, r3, #32
   b68b2:	da0c      	bge.n	b68ce <__adddf3+0x16e>
   b68b4:	320c      	adds	r2, #12
   b68b6:	dd08      	ble.n	b68ca <__adddf3+0x16a>
   b68b8:	f102 0c14 	add.w	ip, r2, #20
   b68bc:	f1c2 020c 	rsb	r2, r2, #12
   b68c0:	fa01 f00c 	lsl.w	r0, r1, ip
   b68c4:	fa21 f102 	lsr.w	r1, r1, r2
   b68c8:	e00c      	b.n	b68e4 <__adddf3+0x184>
   b68ca:	f102 0214 	add.w	r2, r2, #20
   b68ce:	bfd8      	it	le
   b68d0:	f1c2 0c20 	rsble	ip, r2, #32
   b68d4:	fa01 f102 	lsl.w	r1, r1, r2
   b68d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b68dc:	bfdc      	itt	le
   b68de:	ea41 010c 	orrle.w	r1, r1, ip
   b68e2:	4090      	lslle	r0, r2
   b68e4:	1ae4      	subs	r4, r4, r3
   b68e6:	bfa2      	ittt	ge
   b68e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b68ec:	4329      	orrge	r1, r5
   b68ee:	bd30      	popge	{r4, r5, pc}
   b68f0:	ea6f 0404 	mvn.w	r4, r4
   b68f4:	3c1f      	subs	r4, #31
   b68f6:	da1c      	bge.n	b6932 <__adddf3+0x1d2>
   b68f8:	340c      	adds	r4, #12
   b68fa:	dc0e      	bgt.n	b691a <__adddf3+0x1ba>
   b68fc:	f104 0414 	add.w	r4, r4, #20
   b6900:	f1c4 0220 	rsb	r2, r4, #32
   b6904:	fa20 f004 	lsr.w	r0, r0, r4
   b6908:	fa01 f302 	lsl.w	r3, r1, r2
   b690c:	ea40 0003 	orr.w	r0, r0, r3
   b6910:	fa21 f304 	lsr.w	r3, r1, r4
   b6914:	ea45 0103 	orr.w	r1, r5, r3
   b6918:	bd30      	pop	{r4, r5, pc}
   b691a:	f1c4 040c 	rsb	r4, r4, #12
   b691e:	f1c4 0220 	rsb	r2, r4, #32
   b6922:	fa20 f002 	lsr.w	r0, r0, r2
   b6926:	fa01 f304 	lsl.w	r3, r1, r4
   b692a:	ea40 0003 	orr.w	r0, r0, r3
   b692e:	4629      	mov	r1, r5
   b6930:	bd30      	pop	{r4, r5, pc}
   b6932:	fa21 f004 	lsr.w	r0, r1, r4
   b6936:	4629      	mov	r1, r5
   b6938:	bd30      	pop	{r4, r5, pc}
   b693a:	f094 0f00 	teq	r4, #0
   b693e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6942:	bf06      	itte	eq
   b6944:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6948:	3401      	addeq	r4, #1
   b694a:	3d01      	subne	r5, #1
   b694c:	e74e      	b.n	b67ec <__adddf3+0x8c>
   b694e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6952:	bf18      	it	ne
   b6954:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6958:	d029      	beq.n	b69ae <__adddf3+0x24e>
   b695a:	ea94 0f05 	teq	r4, r5
   b695e:	bf08      	it	eq
   b6960:	ea90 0f02 	teqeq	r0, r2
   b6964:	d005      	beq.n	b6972 <__adddf3+0x212>
   b6966:	ea54 0c00 	orrs.w	ip, r4, r0
   b696a:	bf04      	itt	eq
   b696c:	4619      	moveq	r1, r3
   b696e:	4610      	moveq	r0, r2
   b6970:	bd30      	pop	{r4, r5, pc}
   b6972:	ea91 0f03 	teq	r1, r3
   b6976:	bf1e      	ittt	ne
   b6978:	2100      	movne	r1, #0
   b697a:	2000      	movne	r0, #0
   b697c:	bd30      	popne	{r4, r5, pc}
   b697e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6982:	d105      	bne.n	b6990 <__adddf3+0x230>
   b6984:	0040      	lsls	r0, r0, #1
   b6986:	4149      	adcs	r1, r1
   b6988:	bf28      	it	cs
   b698a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b698e:	bd30      	pop	{r4, r5, pc}
   b6990:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6994:	bf3c      	itt	cc
   b6996:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b699a:	bd30      	popcc	{r4, r5, pc}
   b699c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b69a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b69a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b69a8:	f04f 0000 	mov.w	r0, #0
   b69ac:	bd30      	pop	{r4, r5, pc}
   b69ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b69b2:	bf1a      	itte	ne
   b69b4:	4619      	movne	r1, r3
   b69b6:	4610      	movne	r0, r2
   b69b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b69bc:	bf1c      	itt	ne
   b69be:	460b      	movne	r3, r1
   b69c0:	4602      	movne	r2, r0
   b69c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b69c6:	bf06      	itte	eq
   b69c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b69cc:	ea91 0f03 	teqeq	r1, r3
   b69d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b69d4:	bd30      	pop	{r4, r5, pc}
   b69d6:	bf00      	nop

000b69d8 <__aeabi_ui2d>:
   b69d8:	f090 0f00 	teq	r0, #0
   b69dc:	bf04      	itt	eq
   b69de:	2100      	moveq	r1, #0
   b69e0:	4770      	bxeq	lr
   b69e2:	b530      	push	{r4, r5, lr}
   b69e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b69e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b69ec:	f04f 0500 	mov.w	r5, #0
   b69f0:	f04f 0100 	mov.w	r1, #0
   b69f4:	e750      	b.n	b6898 <__adddf3+0x138>
   b69f6:	bf00      	nop

000b69f8 <__aeabi_i2d>:
   b69f8:	f090 0f00 	teq	r0, #0
   b69fc:	bf04      	itt	eq
   b69fe:	2100      	moveq	r1, #0
   b6a00:	4770      	bxeq	lr
   b6a02:	b530      	push	{r4, r5, lr}
   b6a04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6a08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6a0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6a10:	bf48      	it	mi
   b6a12:	4240      	negmi	r0, r0
   b6a14:	f04f 0100 	mov.w	r1, #0
   b6a18:	e73e      	b.n	b6898 <__adddf3+0x138>
   b6a1a:	bf00      	nop

000b6a1c <__aeabi_f2d>:
   b6a1c:	0042      	lsls	r2, r0, #1
   b6a1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6a22:	ea4f 0131 	mov.w	r1, r1, rrx
   b6a26:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6a2a:	bf1f      	itttt	ne
   b6a2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6a30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6a34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6a38:	4770      	bxne	lr
   b6a3a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6a3e:	bf08      	it	eq
   b6a40:	4770      	bxeq	lr
   b6a42:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6a46:	bf04      	itt	eq
   b6a48:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6a4c:	4770      	bxeq	lr
   b6a4e:	b530      	push	{r4, r5, lr}
   b6a50:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6a54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6a5c:	e71c      	b.n	b6898 <__adddf3+0x138>
   b6a5e:	bf00      	nop

000b6a60 <__aeabi_ul2d>:
   b6a60:	ea50 0201 	orrs.w	r2, r0, r1
   b6a64:	bf08      	it	eq
   b6a66:	4770      	bxeq	lr
   b6a68:	b530      	push	{r4, r5, lr}
   b6a6a:	f04f 0500 	mov.w	r5, #0
   b6a6e:	e00a      	b.n	b6a86 <__aeabi_l2d+0x16>

000b6a70 <__aeabi_l2d>:
   b6a70:	ea50 0201 	orrs.w	r2, r0, r1
   b6a74:	bf08      	it	eq
   b6a76:	4770      	bxeq	lr
   b6a78:	b530      	push	{r4, r5, lr}
   b6a7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6a7e:	d502      	bpl.n	b6a86 <__aeabi_l2d+0x16>
   b6a80:	4240      	negs	r0, r0
   b6a82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6a86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6a8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6a8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6a92:	f43f aed8 	beq.w	b6846 <__adddf3+0xe6>
   b6a96:	f04f 0203 	mov.w	r2, #3
   b6a9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6a9e:	bf18      	it	ne
   b6aa0:	3203      	addne	r2, #3
   b6aa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6aa6:	bf18      	it	ne
   b6aa8:	3203      	addne	r2, #3
   b6aaa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6aae:	f1c2 0320 	rsb	r3, r2, #32
   b6ab2:	fa00 fc03 	lsl.w	ip, r0, r3
   b6ab6:	fa20 f002 	lsr.w	r0, r0, r2
   b6aba:	fa01 fe03 	lsl.w	lr, r1, r3
   b6abe:	ea40 000e 	orr.w	r0, r0, lr
   b6ac2:	fa21 f102 	lsr.w	r1, r1, r2
   b6ac6:	4414      	add	r4, r2
   b6ac8:	e6bd      	b.n	b6846 <__adddf3+0xe6>
   b6aca:	bf00      	nop

000b6acc <__aeabi_dmul>:
   b6acc:	b570      	push	{r4, r5, r6, lr}
   b6ace:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6ad2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6ad6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6ada:	bf1d      	ittte	ne
   b6adc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6ae0:	ea94 0f0c 	teqne	r4, ip
   b6ae4:	ea95 0f0c 	teqne	r5, ip
   b6ae8:	f000 f8de 	bleq	b6ca8 <__aeabi_dmul+0x1dc>
   b6aec:	442c      	add	r4, r5
   b6aee:	ea81 0603 	eor.w	r6, r1, r3
   b6af2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6af6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6afa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6afe:	bf18      	it	ne
   b6b00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6b0c:	d038      	beq.n	b6b80 <__aeabi_dmul+0xb4>
   b6b0e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6b12:	f04f 0500 	mov.w	r5, #0
   b6b16:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6b1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6b1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6b22:	f04f 0600 	mov.w	r6, #0
   b6b26:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6b2a:	f09c 0f00 	teq	ip, #0
   b6b2e:	bf18      	it	ne
   b6b30:	f04e 0e01 	orrne.w	lr, lr, #1
   b6b34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6b38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6b3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6b40:	d204      	bcs.n	b6b4c <__aeabi_dmul+0x80>
   b6b42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6b46:	416d      	adcs	r5, r5
   b6b48:	eb46 0606 	adc.w	r6, r6, r6
   b6b4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6b50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6b54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6b58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6b5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6b60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6b64:	bf88      	it	hi
   b6b66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6b6a:	d81e      	bhi.n	b6baa <__aeabi_dmul+0xde>
   b6b6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6b70:	bf08      	it	eq
   b6b72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6b76:	f150 0000 	adcs.w	r0, r0, #0
   b6b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b7e:	bd70      	pop	{r4, r5, r6, pc}
   b6b80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6b84:	ea46 0101 	orr.w	r1, r6, r1
   b6b88:	ea40 0002 	orr.w	r0, r0, r2
   b6b8c:	ea81 0103 	eor.w	r1, r1, r3
   b6b90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6b94:	bfc2      	ittt	gt
   b6b96:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b9e:	bd70      	popgt	{r4, r5, r6, pc}
   b6ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6ba4:	f04f 0e00 	mov.w	lr, #0
   b6ba8:	3c01      	subs	r4, #1
   b6baa:	f300 80ab 	bgt.w	b6d04 <__aeabi_dmul+0x238>
   b6bae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6bb2:	bfde      	ittt	le
   b6bb4:	2000      	movle	r0, #0
   b6bb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6bba:	bd70      	pople	{r4, r5, r6, pc}
   b6bbc:	f1c4 0400 	rsb	r4, r4, #0
   b6bc0:	3c20      	subs	r4, #32
   b6bc2:	da35      	bge.n	b6c30 <__aeabi_dmul+0x164>
   b6bc4:	340c      	adds	r4, #12
   b6bc6:	dc1b      	bgt.n	b6c00 <__aeabi_dmul+0x134>
   b6bc8:	f104 0414 	add.w	r4, r4, #20
   b6bcc:	f1c4 0520 	rsb	r5, r4, #32
   b6bd0:	fa00 f305 	lsl.w	r3, r0, r5
   b6bd4:	fa20 f004 	lsr.w	r0, r0, r4
   b6bd8:	fa01 f205 	lsl.w	r2, r1, r5
   b6bdc:	ea40 0002 	orr.w	r0, r0, r2
   b6be0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6be8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6bec:	fa21 f604 	lsr.w	r6, r1, r4
   b6bf0:	eb42 0106 	adc.w	r1, r2, r6
   b6bf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6bf8:	bf08      	it	eq
   b6bfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6bfe:	bd70      	pop	{r4, r5, r6, pc}
   b6c00:	f1c4 040c 	rsb	r4, r4, #12
   b6c04:	f1c4 0520 	rsb	r5, r4, #32
   b6c08:	fa00 f304 	lsl.w	r3, r0, r4
   b6c0c:	fa20 f005 	lsr.w	r0, r0, r5
   b6c10:	fa01 f204 	lsl.w	r2, r1, r4
   b6c14:	ea40 0002 	orr.w	r0, r0, r2
   b6c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6c20:	f141 0100 	adc.w	r1, r1, #0
   b6c24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6c28:	bf08      	it	eq
   b6c2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6c2e:	bd70      	pop	{r4, r5, r6, pc}
   b6c30:	f1c4 0520 	rsb	r5, r4, #32
   b6c34:	fa00 f205 	lsl.w	r2, r0, r5
   b6c38:	ea4e 0e02 	orr.w	lr, lr, r2
   b6c3c:	fa20 f304 	lsr.w	r3, r0, r4
   b6c40:	fa01 f205 	lsl.w	r2, r1, r5
   b6c44:	ea43 0302 	orr.w	r3, r3, r2
   b6c48:	fa21 f004 	lsr.w	r0, r1, r4
   b6c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c50:	fa21 f204 	lsr.w	r2, r1, r4
   b6c54:	ea20 0002 	bic.w	r0, r0, r2
   b6c58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6c5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6c60:	bf08      	it	eq
   b6c62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6c66:	bd70      	pop	{r4, r5, r6, pc}
   b6c68:	f094 0f00 	teq	r4, #0
   b6c6c:	d10f      	bne.n	b6c8e <__aeabi_dmul+0x1c2>
   b6c6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6c72:	0040      	lsls	r0, r0, #1
   b6c74:	eb41 0101 	adc.w	r1, r1, r1
   b6c78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6c7c:	bf08      	it	eq
   b6c7e:	3c01      	subeq	r4, #1
   b6c80:	d0f7      	beq.n	b6c72 <__aeabi_dmul+0x1a6>
   b6c82:	ea41 0106 	orr.w	r1, r1, r6
   b6c86:	f095 0f00 	teq	r5, #0
   b6c8a:	bf18      	it	ne
   b6c8c:	4770      	bxne	lr
   b6c8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6c92:	0052      	lsls	r2, r2, #1
   b6c94:	eb43 0303 	adc.w	r3, r3, r3
   b6c98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6c9c:	bf08      	it	eq
   b6c9e:	3d01      	subeq	r5, #1
   b6ca0:	d0f7      	beq.n	b6c92 <__aeabi_dmul+0x1c6>
   b6ca2:	ea43 0306 	orr.w	r3, r3, r6
   b6ca6:	4770      	bx	lr
   b6ca8:	ea94 0f0c 	teq	r4, ip
   b6cac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6cb0:	bf18      	it	ne
   b6cb2:	ea95 0f0c 	teqne	r5, ip
   b6cb6:	d00c      	beq.n	b6cd2 <__aeabi_dmul+0x206>
   b6cb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6cbc:	bf18      	it	ne
   b6cbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6cc2:	d1d1      	bne.n	b6c68 <__aeabi_dmul+0x19c>
   b6cc4:	ea81 0103 	eor.w	r1, r1, r3
   b6cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6ccc:	f04f 0000 	mov.w	r0, #0
   b6cd0:	bd70      	pop	{r4, r5, r6, pc}
   b6cd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6cd6:	bf06      	itte	eq
   b6cd8:	4610      	moveq	r0, r2
   b6cda:	4619      	moveq	r1, r3
   b6cdc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6ce0:	d019      	beq.n	b6d16 <__aeabi_dmul+0x24a>
   b6ce2:	ea94 0f0c 	teq	r4, ip
   b6ce6:	d102      	bne.n	b6cee <__aeabi_dmul+0x222>
   b6ce8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6cec:	d113      	bne.n	b6d16 <__aeabi_dmul+0x24a>
   b6cee:	ea95 0f0c 	teq	r5, ip
   b6cf2:	d105      	bne.n	b6d00 <__aeabi_dmul+0x234>
   b6cf4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6cf8:	bf1c      	itt	ne
   b6cfa:	4610      	movne	r0, r2
   b6cfc:	4619      	movne	r1, r3
   b6cfe:	d10a      	bne.n	b6d16 <__aeabi_dmul+0x24a>
   b6d00:	ea81 0103 	eor.w	r1, r1, r3
   b6d04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6d08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6d0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6d10:	f04f 0000 	mov.w	r0, #0
   b6d14:	bd70      	pop	{r4, r5, r6, pc}
   b6d16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6d1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6d1e:	bd70      	pop	{r4, r5, r6, pc}

000b6d20 <__aeabi_ddiv>:
   b6d20:	b570      	push	{r4, r5, r6, lr}
   b6d22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6d26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6d2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6d2e:	bf1d      	ittte	ne
   b6d30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6d34:	ea94 0f0c 	teqne	r4, ip
   b6d38:	ea95 0f0c 	teqne	r5, ip
   b6d3c:	f000 f8a7 	bleq	b6e8e <__aeabi_ddiv+0x16e>
   b6d40:	eba4 0405 	sub.w	r4, r4, r5
   b6d44:	ea81 0e03 	eor.w	lr, r1, r3
   b6d48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6d4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6d50:	f000 8088 	beq.w	b6e64 <__aeabi_ddiv+0x144>
   b6d54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6d58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6d5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6d60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6d64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6d68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6d6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6d70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6d74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6d78:	429d      	cmp	r5, r3
   b6d7a:	bf08      	it	eq
   b6d7c:	4296      	cmpeq	r6, r2
   b6d7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6d82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6d86:	d202      	bcs.n	b6d8e <__aeabi_ddiv+0x6e>
   b6d88:	085b      	lsrs	r3, r3, #1
   b6d8a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d8e:	1ab6      	subs	r6, r6, r2
   b6d90:	eb65 0503 	sbc.w	r5, r5, r3
   b6d94:	085b      	lsrs	r3, r3, #1
   b6d96:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6d9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6da2:	ebb6 0e02 	subs.w	lr, r6, r2
   b6da6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6daa:	bf22      	ittt	cs
   b6dac:	1ab6      	subcs	r6, r6, r2
   b6dae:	4675      	movcs	r5, lr
   b6db0:	ea40 000c 	orrcs.w	r0, r0, ip
   b6db4:	085b      	lsrs	r3, r3, #1
   b6db6:	ea4f 0232 	mov.w	r2, r2, rrx
   b6dba:	ebb6 0e02 	subs.w	lr, r6, r2
   b6dbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6dc2:	bf22      	ittt	cs
   b6dc4:	1ab6      	subcs	r6, r6, r2
   b6dc6:	4675      	movcs	r5, lr
   b6dc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6dcc:	085b      	lsrs	r3, r3, #1
   b6dce:	ea4f 0232 	mov.w	r2, r2, rrx
   b6dd2:	ebb6 0e02 	subs.w	lr, r6, r2
   b6dd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6dda:	bf22      	ittt	cs
   b6ddc:	1ab6      	subcs	r6, r6, r2
   b6dde:	4675      	movcs	r5, lr
   b6de0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6de4:	085b      	lsrs	r3, r3, #1
   b6de6:	ea4f 0232 	mov.w	r2, r2, rrx
   b6dea:	ebb6 0e02 	subs.w	lr, r6, r2
   b6dee:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6df2:	bf22      	ittt	cs
   b6df4:	1ab6      	subcs	r6, r6, r2
   b6df6:	4675      	movcs	r5, lr
   b6df8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6dfc:	ea55 0e06 	orrs.w	lr, r5, r6
   b6e00:	d018      	beq.n	b6e34 <__aeabi_ddiv+0x114>
   b6e02:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6e06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6e0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6e0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6e12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6e16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6e1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6e1e:	d1c0      	bne.n	b6da2 <__aeabi_ddiv+0x82>
   b6e20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6e24:	d10b      	bne.n	b6e3e <__aeabi_ddiv+0x11e>
   b6e26:	ea41 0100 	orr.w	r1, r1, r0
   b6e2a:	f04f 0000 	mov.w	r0, #0
   b6e2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6e32:	e7b6      	b.n	b6da2 <__aeabi_ddiv+0x82>
   b6e34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6e38:	bf04      	itt	eq
   b6e3a:	4301      	orreq	r1, r0
   b6e3c:	2000      	moveq	r0, #0
   b6e3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e42:	bf88      	it	hi
   b6e44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e48:	f63f aeaf 	bhi.w	b6baa <__aeabi_dmul+0xde>
   b6e4c:	ebb5 0c03 	subs.w	ip, r5, r3
   b6e50:	bf04      	itt	eq
   b6e52:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6e56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6e5a:	f150 0000 	adcs.w	r0, r0, #0
   b6e5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e62:	bd70      	pop	{r4, r5, r6, pc}
   b6e64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6e68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6e6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6e70:	bfc2      	ittt	gt
   b6e72:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6e76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6e7a:	bd70      	popgt	{r4, r5, r6, pc}
   b6e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e80:	f04f 0e00 	mov.w	lr, #0
   b6e84:	3c01      	subs	r4, #1
   b6e86:	e690      	b.n	b6baa <__aeabi_dmul+0xde>
   b6e88:	ea45 0e06 	orr.w	lr, r5, r6
   b6e8c:	e68d      	b.n	b6baa <__aeabi_dmul+0xde>
   b6e8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6e92:	ea94 0f0c 	teq	r4, ip
   b6e96:	bf08      	it	eq
   b6e98:	ea95 0f0c 	teqeq	r5, ip
   b6e9c:	f43f af3b 	beq.w	b6d16 <__aeabi_dmul+0x24a>
   b6ea0:	ea94 0f0c 	teq	r4, ip
   b6ea4:	d10a      	bne.n	b6ebc <__aeabi_ddiv+0x19c>
   b6ea6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6eaa:	f47f af34 	bne.w	b6d16 <__aeabi_dmul+0x24a>
   b6eae:	ea95 0f0c 	teq	r5, ip
   b6eb2:	f47f af25 	bne.w	b6d00 <__aeabi_dmul+0x234>
   b6eb6:	4610      	mov	r0, r2
   b6eb8:	4619      	mov	r1, r3
   b6eba:	e72c      	b.n	b6d16 <__aeabi_dmul+0x24a>
   b6ebc:	ea95 0f0c 	teq	r5, ip
   b6ec0:	d106      	bne.n	b6ed0 <__aeabi_ddiv+0x1b0>
   b6ec2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6ec6:	f43f aefd 	beq.w	b6cc4 <__aeabi_dmul+0x1f8>
   b6eca:	4610      	mov	r0, r2
   b6ecc:	4619      	mov	r1, r3
   b6ece:	e722      	b.n	b6d16 <__aeabi_dmul+0x24a>
   b6ed0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6ed4:	bf18      	it	ne
   b6ed6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6eda:	f47f aec5 	bne.w	b6c68 <__aeabi_dmul+0x19c>
   b6ede:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6ee2:	f47f af0d 	bne.w	b6d00 <__aeabi_dmul+0x234>
   b6ee6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6eea:	f47f aeeb 	bne.w	b6cc4 <__aeabi_dmul+0x1f8>
   b6eee:	e712      	b.n	b6d16 <__aeabi_dmul+0x24a>

000b6ef0 <__gedf2>:
   b6ef0:	f04f 3cff 	mov.w	ip, #4294967295
   b6ef4:	e006      	b.n	b6f04 <__cmpdf2+0x4>
   b6ef6:	bf00      	nop

000b6ef8 <__ledf2>:
   b6ef8:	f04f 0c01 	mov.w	ip, #1
   b6efc:	e002      	b.n	b6f04 <__cmpdf2+0x4>
   b6efe:	bf00      	nop

000b6f00 <__cmpdf2>:
   b6f00:	f04f 0c01 	mov.w	ip, #1
   b6f04:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6f08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6f0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6f14:	bf18      	it	ne
   b6f16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6f1a:	d01b      	beq.n	b6f54 <__cmpdf2+0x54>
   b6f1c:	b001      	add	sp, #4
   b6f1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6f22:	bf0c      	ite	eq
   b6f24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6f28:	ea91 0f03 	teqne	r1, r3
   b6f2c:	bf02      	ittt	eq
   b6f2e:	ea90 0f02 	teqeq	r0, r2
   b6f32:	2000      	moveq	r0, #0
   b6f34:	4770      	bxeq	lr
   b6f36:	f110 0f00 	cmn.w	r0, #0
   b6f3a:	ea91 0f03 	teq	r1, r3
   b6f3e:	bf58      	it	pl
   b6f40:	4299      	cmppl	r1, r3
   b6f42:	bf08      	it	eq
   b6f44:	4290      	cmpeq	r0, r2
   b6f46:	bf2c      	ite	cs
   b6f48:	17d8      	asrcs	r0, r3, #31
   b6f4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6f4e:	f040 0001 	orr.w	r0, r0, #1
   b6f52:	4770      	bx	lr
   b6f54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f5c:	d102      	bne.n	b6f64 <__cmpdf2+0x64>
   b6f5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6f62:	d107      	bne.n	b6f74 <__cmpdf2+0x74>
   b6f64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f6c:	d1d6      	bne.n	b6f1c <__cmpdf2+0x1c>
   b6f6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6f72:	d0d3      	beq.n	b6f1c <__cmpdf2+0x1c>
   b6f74:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6f78:	4770      	bx	lr
   b6f7a:	bf00      	nop

000b6f7c <__aeabi_cdrcmple>:
   b6f7c:	4684      	mov	ip, r0
   b6f7e:	4610      	mov	r0, r2
   b6f80:	4662      	mov	r2, ip
   b6f82:	468c      	mov	ip, r1
   b6f84:	4619      	mov	r1, r3
   b6f86:	4663      	mov	r3, ip
   b6f88:	e000      	b.n	b6f8c <__aeabi_cdcmpeq>
   b6f8a:	bf00      	nop

000b6f8c <__aeabi_cdcmpeq>:
   b6f8c:	b501      	push	{r0, lr}
   b6f8e:	f7ff ffb7 	bl	b6f00 <__cmpdf2>
   b6f92:	2800      	cmp	r0, #0
   b6f94:	bf48      	it	mi
   b6f96:	f110 0f00 	cmnmi.w	r0, #0
   b6f9a:	bd01      	pop	{r0, pc}

000b6f9c <__aeabi_dcmpeq>:
   b6f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6fa0:	f7ff fff4 	bl	b6f8c <__aeabi_cdcmpeq>
   b6fa4:	bf0c      	ite	eq
   b6fa6:	2001      	moveq	r0, #1
   b6fa8:	2000      	movne	r0, #0
   b6faa:	f85d fb08 	ldr.w	pc, [sp], #8
   b6fae:	bf00      	nop

000b6fb0 <__aeabi_dcmplt>:
   b6fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6fb4:	f7ff ffea 	bl	b6f8c <__aeabi_cdcmpeq>
   b6fb8:	bf34      	ite	cc
   b6fba:	2001      	movcc	r0, #1
   b6fbc:	2000      	movcs	r0, #0
   b6fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   b6fc2:	bf00      	nop

000b6fc4 <__aeabi_dcmple>:
   b6fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6fc8:	f7ff ffe0 	bl	b6f8c <__aeabi_cdcmpeq>
   b6fcc:	bf94      	ite	ls
   b6fce:	2001      	movls	r0, #1
   b6fd0:	2000      	movhi	r0, #0
   b6fd2:	f85d fb08 	ldr.w	pc, [sp], #8
   b6fd6:	bf00      	nop

000b6fd8 <__aeabi_dcmpge>:
   b6fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6fdc:	f7ff ffce 	bl	b6f7c <__aeabi_cdrcmple>
   b6fe0:	bf94      	ite	ls
   b6fe2:	2001      	movls	r0, #1
   b6fe4:	2000      	movhi	r0, #0
   b6fe6:	f85d fb08 	ldr.w	pc, [sp], #8
   b6fea:	bf00      	nop

000b6fec <__aeabi_dcmpgt>:
   b6fec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ff0:	f7ff ffc4 	bl	b6f7c <__aeabi_cdrcmple>
   b6ff4:	bf34      	ite	cc
   b6ff6:	2001      	movcc	r0, #1
   b6ff8:	2000      	movcs	r0, #0
   b6ffa:	f85d fb08 	ldr.w	pc, [sp], #8
   b6ffe:	bf00      	nop

000b7000 <__aeabi_dcmpun>:
   b7000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7008:	d102      	bne.n	b7010 <__aeabi_dcmpun+0x10>
   b700a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b700e:	d10a      	bne.n	b7026 <__aeabi_dcmpun+0x26>
   b7010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7018:	d102      	bne.n	b7020 <__aeabi_dcmpun+0x20>
   b701a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b701e:	d102      	bne.n	b7026 <__aeabi_dcmpun+0x26>
   b7020:	f04f 0000 	mov.w	r0, #0
   b7024:	4770      	bx	lr
   b7026:	f04f 0001 	mov.w	r0, #1
   b702a:	4770      	bx	lr

000b702c <__aeabi_d2iz>:
   b702c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7030:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7034:	d215      	bcs.n	b7062 <__aeabi_d2iz+0x36>
   b7036:	d511      	bpl.n	b705c <__aeabi_d2iz+0x30>
   b7038:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b703c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7040:	d912      	bls.n	b7068 <__aeabi_d2iz+0x3c>
   b7042:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b704a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b704e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7052:	fa23 f002 	lsr.w	r0, r3, r2
   b7056:	bf18      	it	ne
   b7058:	4240      	negne	r0, r0
   b705a:	4770      	bx	lr
   b705c:	f04f 0000 	mov.w	r0, #0
   b7060:	4770      	bx	lr
   b7062:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7066:	d105      	bne.n	b7074 <__aeabi_d2iz+0x48>
   b7068:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b706c:	bf08      	it	eq
   b706e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7072:	4770      	bx	lr
   b7074:	f04f 0000 	mov.w	r0, #0
   b7078:	4770      	bx	lr
   b707a:	bf00      	nop

000b707c <__aeabi_d2uiz>:
   b707c:	004a      	lsls	r2, r1, #1
   b707e:	d211      	bcs.n	b70a4 <__aeabi_d2uiz+0x28>
   b7080:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7084:	d211      	bcs.n	b70aa <__aeabi_d2uiz+0x2e>
   b7086:	d50d      	bpl.n	b70a4 <__aeabi_d2uiz+0x28>
   b7088:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b708c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7090:	d40e      	bmi.n	b70b0 <__aeabi_d2uiz+0x34>
   b7092:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b709a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b709e:	fa23 f002 	lsr.w	r0, r3, r2
   b70a2:	4770      	bx	lr
   b70a4:	f04f 0000 	mov.w	r0, #0
   b70a8:	4770      	bx	lr
   b70aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b70ae:	d102      	bne.n	b70b6 <__aeabi_d2uiz+0x3a>
   b70b0:	f04f 30ff 	mov.w	r0, #4294967295
   b70b4:	4770      	bx	lr
   b70b6:	f04f 0000 	mov.w	r0, #0
   b70ba:	4770      	bx	lr

000b70bc <__aeabi_d2f>:
   b70bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b70c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b70c4:	bf24      	itt	cs
   b70c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b70ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b70ce:	d90d      	bls.n	b70ec <__aeabi_d2f+0x30>
   b70d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b70d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b70d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b70dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b70e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b70e4:	bf08      	it	eq
   b70e6:	f020 0001 	biceq.w	r0, r0, #1
   b70ea:	4770      	bx	lr
   b70ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b70f0:	d121      	bne.n	b7136 <__aeabi_d2f+0x7a>
   b70f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b70f6:	bfbc      	itt	lt
   b70f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b70fc:	4770      	bxlt	lr
   b70fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7102:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7106:	f1c2 0218 	rsb	r2, r2, #24
   b710a:	f1c2 0c20 	rsb	ip, r2, #32
   b710e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7112:	fa20 f002 	lsr.w	r0, r0, r2
   b7116:	bf18      	it	ne
   b7118:	f040 0001 	orrne.w	r0, r0, #1
   b711c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7120:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7124:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7128:	ea40 000c 	orr.w	r0, r0, ip
   b712c:	fa23 f302 	lsr.w	r3, r3, r2
   b7130:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7134:	e7cc      	b.n	b70d0 <__aeabi_d2f+0x14>
   b7136:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b713a:	d107      	bne.n	b714c <__aeabi_d2f+0x90>
   b713c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7140:	bf1e      	ittt	ne
   b7142:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7146:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b714a:	4770      	bxne	lr
   b714c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7150:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7154:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7158:	4770      	bx	lr
   b715a:	bf00      	nop

000b715c <atexit>:
   b715c:	2300      	movs	r3, #0
   b715e:	4601      	mov	r1, r0
   b7160:	461a      	mov	r2, r3
   b7162:	4618      	mov	r0, r3
   b7164:	f000 b94c 	b.w	b7400 <__register_exitproc>

000b7168 <isprint>:
   b7168:	4b02      	ldr	r3, [pc, #8]	; (b7174 <isprint+0xc>)
   b716a:	4418      	add	r0, r3
   b716c:	7840      	ldrb	r0, [r0, #1]
   b716e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7172:	4770      	bx	lr
   b7174:	000b782e 	.word	0x000b782e

000b7178 <memcpy>:
   b7178:	440a      	add	r2, r1
   b717a:	4291      	cmp	r1, r2
   b717c:	f100 33ff 	add.w	r3, r0, #4294967295
   b7180:	d100      	bne.n	b7184 <memcpy+0xc>
   b7182:	4770      	bx	lr
   b7184:	b510      	push	{r4, lr}
   b7186:	f811 4b01 	ldrb.w	r4, [r1], #1
   b718a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b718e:	4291      	cmp	r1, r2
   b7190:	d1f9      	bne.n	b7186 <memcpy+0xe>
   b7192:	bd10      	pop	{r4, pc}

000b7194 <memmove>:
   b7194:	4288      	cmp	r0, r1
   b7196:	b510      	push	{r4, lr}
   b7198:	eb01 0402 	add.w	r4, r1, r2
   b719c:	d902      	bls.n	b71a4 <memmove+0x10>
   b719e:	4284      	cmp	r4, r0
   b71a0:	4623      	mov	r3, r4
   b71a2:	d807      	bhi.n	b71b4 <memmove+0x20>
   b71a4:	1e43      	subs	r3, r0, #1
   b71a6:	42a1      	cmp	r1, r4
   b71a8:	d008      	beq.n	b71bc <memmove+0x28>
   b71aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b71ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   b71b2:	e7f8      	b.n	b71a6 <memmove+0x12>
   b71b4:	4402      	add	r2, r0
   b71b6:	4601      	mov	r1, r0
   b71b8:	428a      	cmp	r2, r1
   b71ba:	d100      	bne.n	b71be <memmove+0x2a>
   b71bc:	bd10      	pop	{r4, pc}
   b71be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b71c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b71c6:	e7f7      	b.n	b71b8 <memmove+0x24>

000b71c8 <memset>:
   b71c8:	4402      	add	r2, r0
   b71ca:	4603      	mov	r3, r0
   b71cc:	4293      	cmp	r3, r2
   b71ce:	d100      	bne.n	b71d2 <memset+0xa>
   b71d0:	4770      	bx	lr
   b71d2:	f803 1b01 	strb.w	r1, [r3], #1
   b71d6:	e7f9      	b.n	b71cc <memset+0x4>

000b71d8 <srand>:
   b71d8:	b538      	push	{r3, r4, r5, lr}
   b71da:	4b10      	ldr	r3, [pc, #64]	; (b721c <srand+0x44>)
   b71dc:	681d      	ldr	r5, [r3, #0]
   b71de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b71e0:	4604      	mov	r4, r0
   b71e2:	b9b3      	cbnz	r3, b7212 <srand+0x3a>
   b71e4:	2018      	movs	r0, #24
   b71e6:	f7fd fa7d 	bl	b46e4 <malloc>
   b71ea:	4602      	mov	r2, r0
   b71ec:	63a8      	str	r0, [r5, #56]	; 0x38
   b71ee:	b920      	cbnz	r0, b71fa <srand+0x22>
   b71f0:	4b0b      	ldr	r3, [pc, #44]	; (b7220 <srand+0x48>)
   b71f2:	480c      	ldr	r0, [pc, #48]	; (b7224 <srand+0x4c>)
   b71f4:	2142      	movs	r1, #66	; 0x42
   b71f6:	f7fd fa9d 	bl	b4734 <__assert_func>
   b71fa:	490b      	ldr	r1, [pc, #44]	; (b7228 <srand+0x50>)
   b71fc:	4b0b      	ldr	r3, [pc, #44]	; (b722c <srand+0x54>)
   b71fe:	e9c0 1300 	strd	r1, r3, [r0]
   b7202:	4b0b      	ldr	r3, [pc, #44]	; (b7230 <srand+0x58>)
   b7204:	6083      	str	r3, [r0, #8]
   b7206:	230b      	movs	r3, #11
   b7208:	8183      	strh	r3, [r0, #12]
   b720a:	2100      	movs	r1, #0
   b720c:	2001      	movs	r0, #1
   b720e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7212:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7214:	2200      	movs	r2, #0
   b7216:	611c      	str	r4, [r3, #16]
   b7218:	615a      	str	r2, [r3, #20]
   b721a:	bd38      	pop	{r3, r4, r5, pc}
   b721c:	2003e5c4 	.word	0x2003e5c4
   b7220:	000b779a 	.word	0x000b779a
   b7224:	000b77b1 	.word	0x000b77b1
   b7228:	abcd330e 	.word	0xabcd330e
   b722c:	e66d1234 	.word	0xe66d1234
   b7230:	0005deec 	.word	0x0005deec

000b7234 <strchr>:
   b7234:	b2c9      	uxtb	r1, r1
   b7236:	4603      	mov	r3, r0
   b7238:	f810 2b01 	ldrb.w	r2, [r0], #1
   b723c:	b11a      	cbz	r2, b7246 <strchr+0x12>
   b723e:	428a      	cmp	r2, r1
   b7240:	d1f9      	bne.n	b7236 <strchr+0x2>
   b7242:	4618      	mov	r0, r3
   b7244:	4770      	bx	lr
   b7246:	2900      	cmp	r1, #0
   b7248:	bf18      	it	ne
   b724a:	2300      	movne	r3, #0
   b724c:	e7f9      	b.n	b7242 <strchr+0xe>

000b724e <strchrnul>:
   b724e:	b510      	push	{r4, lr}
   b7250:	4604      	mov	r4, r0
   b7252:	f7ff ffef 	bl	b7234 <strchr>
   b7256:	b918      	cbnz	r0, b7260 <strchrnul+0x12>
   b7258:	4620      	mov	r0, r4
   b725a:	f000 f814 	bl	b7286 <strlen>
   b725e:	4420      	add	r0, r4
   b7260:	bd10      	pop	{r4, pc}

000b7262 <strcmp>:
   b7262:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7266:	f811 3b01 	ldrb.w	r3, [r1], #1
   b726a:	2a01      	cmp	r2, #1
   b726c:	bf28      	it	cs
   b726e:	429a      	cmpcs	r2, r3
   b7270:	d0f7      	beq.n	b7262 <strcmp>
   b7272:	1ad0      	subs	r0, r2, r3
   b7274:	4770      	bx	lr

000b7276 <strcpy>:
   b7276:	4603      	mov	r3, r0
   b7278:	f811 2b01 	ldrb.w	r2, [r1], #1
   b727c:	f803 2b01 	strb.w	r2, [r3], #1
   b7280:	2a00      	cmp	r2, #0
   b7282:	d1f9      	bne.n	b7278 <strcpy+0x2>
   b7284:	4770      	bx	lr

000b7286 <strlen>:
   b7286:	4603      	mov	r3, r0
   b7288:	f813 2b01 	ldrb.w	r2, [r3], #1
   b728c:	2a00      	cmp	r2, #0
   b728e:	d1fb      	bne.n	b7288 <strlen+0x2>
   b7290:	1a18      	subs	r0, r3, r0
   b7292:	3801      	subs	r0, #1
   b7294:	4770      	bx	lr

000b7296 <strncmp>:
   b7296:	b510      	push	{r4, lr}
   b7298:	b17a      	cbz	r2, b72ba <strncmp+0x24>
   b729a:	4603      	mov	r3, r0
   b729c:	3901      	subs	r1, #1
   b729e:	1884      	adds	r4, r0, r2
   b72a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b72a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b72a8:	4290      	cmp	r0, r2
   b72aa:	d101      	bne.n	b72b0 <strncmp+0x1a>
   b72ac:	42a3      	cmp	r3, r4
   b72ae:	d101      	bne.n	b72b4 <strncmp+0x1e>
   b72b0:	1a80      	subs	r0, r0, r2
   b72b2:	bd10      	pop	{r4, pc}
   b72b4:	2800      	cmp	r0, #0
   b72b6:	d1f3      	bne.n	b72a0 <strncmp+0xa>
   b72b8:	e7fa      	b.n	b72b0 <strncmp+0x1a>
   b72ba:	4610      	mov	r0, r2
   b72bc:	e7f9      	b.n	b72b2 <strncmp+0x1c>

000b72be <strrchr>:
   b72be:	b538      	push	{r3, r4, r5, lr}
   b72c0:	4603      	mov	r3, r0
   b72c2:	460c      	mov	r4, r1
   b72c4:	b969      	cbnz	r1, b72e2 <strrchr+0x24>
   b72c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b72ca:	f7ff bfb3 	b.w	b7234 <strchr>
   b72ce:	1c43      	adds	r3, r0, #1
   b72d0:	4605      	mov	r5, r0
   b72d2:	4621      	mov	r1, r4
   b72d4:	4618      	mov	r0, r3
   b72d6:	f7ff ffad 	bl	b7234 <strchr>
   b72da:	2800      	cmp	r0, #0
   b72dc:	d1f7      	bne.n	b72ce <strrchr+0x10>
   b72de:	4628      	mov	r0, r5
   b72e0:	bd38      	pop	{r3, r4, r5, pc}
   b72e2:	2500      	movs	r5, #0
   b72e4:	e7f5      	b.n	b72d2 <strrchr+0x14>
	...

000b72e8 <_strtol_l.constprop.0>:
   b72e8:	2b01      	cmp	r3, #1
   b72ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b72ee:	d001      	beq.n	b72f4 <_strtol_l.constprop.0+0xc>
   b72f0:	2b24      	cmp	r3, #36	; 0x24
   b72f2:	d906      	bls.n	b7302 <_strtol_l.constprop.0+0x1a>
   b72f4:	f7fd fa16 	bl	b4724 <__errno>
   b72f8:	2316      	movs	r3, #22
   b72fa:	6003      	str	r3, [r0, #0]
   b72fc:	2000      	movs	r0, #0
   b72fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7302:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b73e8 <_strtol_l.constprop.0+0x100>
   b7306:	460d      	mov	r5, r1
   b7308:	462e      	mov	r6, r5
   b730a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b730e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7312:	f017 0708 	ands.w	r7, r7, #8
   b7316:	d1f7      	bne.n	b7308 <_strtol_l.constprop.0+0x20>
   b7318:	2c2d      	cmp	r4, #45	; 0x2d
   b731a:	d132      	bne.n	b7382 <_strtol_l.constprop.0+0x9a>
   b731c:	782c      	ldrb	r4, [r5, #0]
   b731e:	2701      	movs	r7, #1
   b7320:	1cb5      	adds	r5, r6, #2
   b7322:	2b00      	cmp	r3, #0
   b7324:	d05b      	beq.n	b73de <_strtol_l.constprop.0+0xf6>
   b7326:	2b10      	cmp	r3, #16
   b7328:	d109      	bne.n	b733e <_strtol_l.constprop.0+0x56>
   b732a:	2c30      	cmp	r4, #48	; 0x30
   b732c:	d107      	bne.n	b733e <_strtol_l.constprop.0+0x56>
   b732e:	782c      	ldrb	r4, [r5, #0]
   b7330:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7334:	2c58      	cmp	r4, #88	; 0x58
   b7336:	d14d      	bne.n	b73d4 <_strtol_l.constprop.0+0xec>
   b7338:	786c      	ldrb	r4, [r5, #1]
   b733a:	2310      	movs	r3, #16
   b733c:	3502      	adds	r5, #2
   b733e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7342:	f108 38ff 	add.w	r8, r8, #4294967295
   b7346:	f04f 0c00 	mov.w	ip, #0
   b734a:	fbb8 f9f3 	udiv	r9, r8, r3
   b734e:	4666      	mov	r6, ip
   b7350:	fb03 8a19 	mls	sl, r3, r9, r8
   b7354:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7358:	f1be 0f09 	cmp.w	lr, #9
   b735c:	d816      	bhi.n	b738c <_strtol_l.constprop.0+0xa4>
   b735e:	4674      	mov	r4, lr
   b7360:	42a3      	cmp	r3, r4
   b7362:	dd24      	ble.n	b73ae <_strtol_l.constprop.0+0xc6>
   b7364:	f1bc 0f00 	cmp.w	ip, #0
   b7368:	db1e      	blt.n	b73a8 <_strtol_l.constprop.0+0xc0>
   b736a:	45b1      	cmp	r9, r6
   b736c:	d31c      	bcc.n	b73a8 <_strtol_l.constprop.0+0xc0>
   b736e:	d101      	bne.n	b7374 <_strtol_l.constprop.0+0x8c>
   b7370:	45a2      	cmp	sl, r4
   b7372:	db19      	blt.n	b73a8 <_strtol_l.constprop.0+0xc0>
   b7374:	fb06 4603 	mla	r6, r6, r3, r4
   b7378:	f04f 0c01 	mov.w	ip, #1
   b737c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7380:	e7e8      	b.n	b7354 <_strtol_l.constprop.0+0x6c>
   b7382:	2c2b      	cmp	r4, #43	; 0x2b
   b7384:	bf04      	itt	eq
   b7386:	782c      	ldrbeq	r4, [r5, #0]
   b7388:	1cb5      	addeq	r5, r6, #2
   b738a:	e7ca      	b.n	b7322 <_strtol_l.constprop.0+0x3a>
   b738c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7390:	f1be 0f19 	cmp.w	lr, #25
   b7394:	d801      	bhi.n	b739a <_strtol_l.constprop.0+0xb2>
   b7396:	3c37      	subs	r4, #55	; 0x37
   b7398:	e7e2      	b.n	b7360 <_strtol_l.constprop.0+0x78>
   b739a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b739e:	f1be 0f19 	cmp.w	lr, #25
   b73a2:	d804      	bhi.n	b73ae <_strtol_l.constprop.0+0xc6>
   b73a4:	3c57      	subs	r4, #87	; 0x57
   b73a6:	e7db      	b.n	b7360 <_strtol_l.constprop.0+0x78>
   b73a8:	f04f 3cff 	mov.w	ip, #4294967295
   b73ac:	e7e6      	b.n	b737c <_strtol_l.constprop.0+0x94>
   b73ae:	f1bc 0f00 	cmp.w	ip, #0
   b73b2:	da05      	bge.n	b73c0 <_strtol_l.constprop.0+0xd8>
   b73b4:	2322      	movs	r3, #34	; 0x22
   b73b6:	6003      	str	r3, [r0, #0]
   b73b8:	4646      	mov	r6, r8
   b73ba:	b942      	cbnz	r2, b73ce <_strtol_l.constprop.0+0xe6>
   b73bc:	4630      	mov	r0, r6
   b73be:	e79e      	b.n	b72fe <_strtol_l.constprop.0+0x16>
   b73c0:	b107      	cbz	r7, b73c4 <_strtol_l.constprop.0+0xdc>
   b73c2:	4276      	negs	r6, r6
   b73c4:	2a00      	cmp	r2, #0
   b73c6:	d0f9      	beq.n	b73bc <_strtol_l.constprop.0+0xd4>
   b73c8:	f1bc 0f00 	cmp.w	ip, #0
   b73cc:	d000      	beq.n	b73d0 <_strtol_l.constprop.0+0xe8>
   b73ce:	1e69      	subs	r1, r5, #1
   b73d0:	6011      	str	r1, [r2, #0]
   b73d2:	e7f3      	b.n	b73bc <_strtol_l.constprop.0+0xd4>
   b73d4:	2430      	movs	r4, #48	; 0x30
   b73d6:	2b00      	cmp	r3, #0
   b73d8:	d1b1      	bne.n	b733e <_strtol_l.constprop.0+0x56>
   b73da:	2308      	movs	r3, #8
   b73dc:	e7af      	b.n	b733e <_strtol_l.constprop.0+0x56>
   b73de:	2c30      	cmp	r4, #48	; 0x30
   b73e0:	d0a5      	beq.n	b732e <_strtol_l.constprop.0+0x46>
   b73e2:	230a      	movs	r3, #10
   b73e4:	e7ab      	b.n	b733e <_strtol_l.constprop.0+0x56>
   b73e6:	bf00      	nop
   b73e8:	000b782f 	.word	0x000b782f

000b73ec <strtol>:
   b73ec:	4613      	mov	r3, r2
   b73ee:	460a      	mov	r2, r1
   b73f0:	4601      	mov	r1, r0
   b73f2:	4802      	ldr	r0, [pc, #8]	; (b73fc <strtol+0x10>)
   b73f4:	6800      	ldr	r0, [r0, #0]
   b73f6:	f7ff bf77 	b.w	b72e8 <_strtol_l.constprop.0>
   b73fa:	bf00      	nop
   b73fc:	2003e5c4 	.word	0x2003e5c4

000b7400 <__register_exitproc>:
   b7400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7404:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b74c0 <__register_exitproc+0xc0>
   b7408:	4606      	mov	r6, r0
   b740a:	f8d8 0000 	ldr.w	r0, [r8]
   b740e:	461f      	mov	r7, r3
   b7410:	460d      	mov	r5, r1
   b7412:	4691      	mov	r9, r2
   b7414:	f000 f856 	bl	b74c4 <__retarget_lock_acquire_recursive>
   b7418:	4b25      	ldr	r3, [pc, #148]	; (b74b0 <__register_exitproc+0xb0>)
   b741a:	681c      	ldr	r4, [r3, #0]
   b741c:	b934      	cbnz	r4, b742c <__register_exitproc+0x2c>
   b741e:	4c25      	ldr	r4, [pc, #148]	; (b74b4 <__register_exitproc+0xb4>)
   b7420:	601c      	str	r4, [r3, #0]
   b7422:	4b25      	ldr	r3, [pc, #148]	; (b74b8 <__register_exitproc+0xb8>)
   b7424:	b113      	cbz	r3, b742c <__register_exitproc+0x2c>
   b7426:	681b      	ldr	r3, [r3, #0]
   b7428:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b742c:	6863      	ldr	r3, [r4, #4]
   b742e:	2b1f      	cmp	r3, #31
   b7430:	dd07      	ble.n	b7442 <__register_exitproc+0x42>
   b7432:	f8d8 0000 	ldr.w	r0, [r8]
   b7436:	f000 f847 	bl	b74c8 <__retarget_lock_release_recursive>
   b743a:	f04f 30ff 	mov.w	r0, #4294967295
   b743e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7442:	b34e      	cbz	r6, b7498 <__register_exitproc+0x98>
   b7444:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7448:	b988      	cbnz	r0, b746e <__register_exitproc+0x6e>
   b744a:	4b1c      	ldr	r3, [pc, #112]	; (b74bc <__register_exitproc+0xbc>)
   b744c:	b923      	cbnz	r3, b7458 <__register_exitproc+0x58>
   b744e:	f8d8 0000 	ldr.w	r0, [r8]
   b7452:	f000 f838 	bl	b74c6 <__retarget_lock_release>
   b7456:	e7f0      	b.n	b743a <__register_exitproc+0x3a>
   b7458:	f44f 7084 	mov.w	r0, #264	; 0x108
   b745c:	f7fd f942 	bl	b46e4 <malloc>
   b7460:	2800      	cmp	r0, #0
   b7462:	d0f4      	beq.n	b744e <__register_exitproc+0x4e>
   b7464:	2300      	movs	r3, #0
   b7466:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b746a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b746e:	6863      	ldr	r3, [r4, #4]
   b7470:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7474:	2201      	movs	r2, #1
   b7476:	409a      	lsls	r2, r3
   b7478:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b747c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7480:	4313      	orrs	r3, r2
   b7482:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7486:	2e02      	cmp	r6, #2
   b7488:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b748c:	bf02      	ittt	eq
   b748e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7492:	4313      	orreq	r3, r2
   b7494:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7498:	6863      	ldr	r3, [r4, #4]
   b749a:	f8d8 0000 	ldr.w	r0, [r8]
   b749e:	1c5a      	adds	r2, r3, #1
   b74a0:	3302      	adds	r3, #2
   b74a2:	6062      	str	r2, [r4, #4]
   b74a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b74a8:	f000 f80e 	bl	b74c8 <__retarget_lock_release_recursive>
   b74ac:	2000      	movs	r0, #0
   b74ae:	e7c6      	b.n	b743e <__register_exitproc+0x3e>
   b74b0:	2003e7e8 	.word	0x2003e7e8
   b74b4:	2003e75c 	.word	0x2003e75c
   b74b8:	00000000 	.word	0x00000000
   b74bc:	000b46e5 	.word	0x000b46e5
   b74c0:	2003e628 	.word	0x2003e628

000b74c4 <__retarget_lock_acquire_recursive>:
   b74c4:	4770      	bx	lr

000b74c6 <__retarget_lock_release>:
   b74c6:	4770      	bx	lr

000b74c8 <__retarget_lock_release_recursive>:
   b74c8:	4770      	bx	lr

000b74ca <link_code_end>:
	...

000b74cc <dynalib_user>:
   b74cc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b74dc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b74ec:	7620 7269 7574 6c61 0000 0000                virtual....

000b74f8 <_ZTVN5spark10LogHandlerE>:
	...
   b7508:	40a5 000b 40cd 000b                         .@...@..

000b7510 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7518:	40d9 000b 410d 000b 5835 000b 40cf 000b     .@...A..5X...@..

000b7528 <_ZTVN5spark13EthernetClassE>:
	...
   b7530:	47b3 000b 47a9 000b 479f 000b 4795 000b     .G...G...G...G..
   b7540:	4789 000b 477d 000b 60d1 000b 60d9 000b     .G..}G...`...`..
   b7550:	4771 000b 4769 000b 475f 000b 4755 000b     qG..iG.._G..UG..
   b7560:	6109 000b 616e 006e 6e69 0066 766f 0066     .a..nan.inf.ovf.
   b7570:	002e 6162 6475 5300 7265 6169 006c 6553     ..baud.Serial.Se
   b7580:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   b7590:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   b75a0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   b75b0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b75c0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b75d0:	006d 6e6c 6600 006e 0074 6f63 6564 6400     m.ln.fn.t.code.d
   b75e0:	7465 6961 006c 0000                         etail...

000b75e8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b75f0:	4c7f 000b 4ca5 000b 4c63 000b 6223 000b     .L...L..cL..#b..

000b7600 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7608:	50dd 000b 50f5 000b 5835 000b 40cf 000b     .P...P..5X...@..

000b7618 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7620:	5109 000b 511d 000b 59d9 000b 4c6b 000b     .Q...Q...Y..kL..

000b7630 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7638:	4c7d 000b 4cb3 000b 5799 000b 4c6d 000b     }L...L...W..mL..

000b7648 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7650:	4c7b 000b 4cc1 000b 5045 000b 4ce3 000b     {L...L..EP...L..
   b7660:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b7670:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b767c <_ZTV9IPAddress>:
	...
   b7684:	5cbd 000b 5cad 000b 5caf 000b               .\...\...\..

000b7690 <_ZTV9USBSerial>:
	...
   b7698:	5da3 000b 5e0b 000b 5de1 000b 4991 000b     .]...^...]...I..
   b76a8:	5dd3 000b 5da5 000b 5db5 000b 5e05 000b     .]...]...]...^..
   b76b8:	5dc5 000b 5d9d 000b                         .]...]..

000b76c0 <_ZTVN5spark13CellularClassE>:
	...
   b76c8:	5f0b 000b 5f01 000b 5ef7 000b 5ead 000b     ._..._...^...^..
   b76d8:	5eeb 000b 5edf 000b 60d1 000b 60d9 000b     .^...^...`...`..
   b76e8:	5ed3 000b 5ecb 000b 5ec1 000b 5eb7 000b     .^...^...^...^..
   b76f8:	6109 000b                                   .a..

000b76fc <_ZTV11USARTSerial>:
	...
   b7704:	5f45 000b 5fb1 000b 5f89 000b 4991 000b     E_..._..._...I..
   b7714:	5f59 000b 5f75 000b 5f67 000b 5f83 000b     Y_..u_..g_..._..
   b7724:	5f47 000b 5f4b 000b                         G_..K_..

000b772c <_ZTV7TwoWire>:
	...
   b7734:	5ffd 000b 6047 000b 601f 000b 5fff 000b     ._..G`...`..._..
   b7744:	6027 000b 602f 000b 6037 000b 603f 000b     '`../`..7`..?`..

000b7754 <_ZTVN5spark12NetworkClassE>:
	...
   b775c:	6091 000b 609b 000b 60a5 000b 60af 000b     .`...`...`...`..
   b776c:	60b9 000b 60c5 000b 60d1 000b 60d9 000b     .`...`...`...`..
   b777c:	60e1 000b 60ed 000b 60f5 000b 60ff 000b     .`...`...`...`..
   b778c:	6109 000b 7525 7500 3025 7834                .a..%u.u%04x.

000b7799 <_ZSt7nothrow>:
   b7799:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b77a9:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b77b9:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b77c9:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b77d9:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b77e9:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b77f9:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7809:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7819:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b7829:	646e 632e                                    nd.c.

000b782e <_ctype_>:
   b782e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b783e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b784e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b785e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b786e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b787e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b788e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b789e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b78ae:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b792f <link_const_variable_data_end>:
	...

000b7930 <link_constructors_location>:
   b7930:	000b4271 	.word	0x000b4271
   b7934:	000b47bd 	.word	0x000b47bd
   b7938:	000b47e5 	.word	0x000b47e5
   b793c:	000b4981 	.word	0x000b4981
   b7940:	000b5825 	.word	0x000b5825
   b7944:	000b5b4d 	.word	0x000b5b4d
   b7948:	000b5b69 	.word	0x000b5b69
   b794c:	000b5f15 	.word	0x000b5f15
   b7950:	000b61e1 	.word	0x000b61e1

000b7954 <link_constructors_end>:
	...

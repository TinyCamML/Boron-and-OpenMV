
c:/Users/efarquh/Documents/GitHub/Boron-and-OpenMV/Firmware/PublishBoronCode/target/4.2.0/boron/PublishBoronCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ba0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6bc0  000b6bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6be4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e554  000b6be8  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6c58  000b6c58  00026c58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6c80  000b6c80  00026c80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012e1a8  00000000  00000000  00026c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013bfa  00000000  00000000  00154e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003c041  00000000  00000000  00168a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d90  00000000  00000000  001a4a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ade8  00000000  00000000  001a77f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039adf  00000000  00000000  001b25df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004016f  00000000  00000000  001ec0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013849b  00000000  00000000  0022c22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000810c  00000000  00000000  003646c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fb33 	bl	b669c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fb3b 	bl	b66b8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e554 	.word	0x2003e554
   b404c:	000b6be8 	.word	0x000b6be8
   b4050:	2003e5c4 	.word	0x2003e5c4
   b4054:	2003e5c4 	.word	0x2003e5c4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 f82b 	bl	b50bc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6b9c 	.word	0x000b6b9c
   b4080:	000b6bc0 	.word	0x000b6bc0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b82b 	b.w	b40de <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f88d 	bl	b41a8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bfcb 	b.w	b502c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bc83 	b.w	b49a0 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bc81 	b.w	b49a0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bc87 	b.w	b49b0 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>:
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   b40b2:	b121      	cbz	r1, b40be <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   b40b4:	888b      	ldrh	r3, [r1, #4]
   b40b6:	4283      	cmp	r3, r0
   b40b8:	d001      	beq.n	b40be <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0+0xc>
                return start;
            }
            start = start->next;
   b40ba:	6889      	ldr	r1, [r1, #8]
        while (start) {
   b40bc:	e7f9      	b.n	b40b2 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
        }
        return nullptr;
    }
   b40be:	4608      	mov	r0, r1
   b40c0:	4770      	bx	lr

000b40c2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c2:	b40e      	push	{r1, r2, r3}
   b40c4:	b503      	push	{r0, r1, lr}
   b40c6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40c8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ca:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ce:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40d0:	f000 febd 	bl	b4e4e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d4:	b002      	add	sp, #8
   b40d6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40da:	b003      	add	sp, #12
   b40dc:	4770      	bx	lr

000b40de <setup>:
// const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 360; // What should sampling period be?
const unsigned long EARLYBIRD_SECONDS = 0; // how long before desired time should I wake up? 
const unsigned long TIMEOUT_TINYCAM_MS = 5000;

void setup(void) {
   b40de:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b40e0:	f000 fc36 	bl	b4950 <spark_cloud_flag_connect>
    Particle.connect();
  } else {
    Cellular.off(); // turn off cellular for prelim testing (uncomment)
  }

  Serial.begin(9600);
   b40e4:	f001 fb8a 	bl	b57fc <_Z16_fetch_usbserialv>
   b40e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ec:	f001 fb7a 	bl	b57e4 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600); // Initialize serial communication
   b40f0:	f001 fe06 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b40f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40f8:	f001 fc48 	bl	b598c <_ZN11USARTSerial5beginEm>
  pinMode(A0, OUTPUT);
   b40fc:	2101      	movs	r1, #1
   b40fe:	2013      	movs	r0, #19
   b4100:	f001 fda2 	bl	b5c48 <pinMode>
  digitalWrite(A0, HIGH);
   b4104:	2101      	movs	r1, #1
   b4106:	2013      	movs	r0, #19
   b4108:	f001 fdaf 	bl	b5c6a <digitalWrite>

  Serial1.begin(9600);
   b410c:	f001 fdf8 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b4110:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4114:	f001 fc3a 	bl	b598c <_ZN11USARTSerial5beginEm>
  Serial1.setTimeout(TIMEOUT_TINYCAM_MS);
   b4118:	f001 fdf2 	bl	b5d00 <_Z22__fetch_global_Serial1v>
  
}
   b411c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial1.setTimeout(TIMEOUT_TINYCAM_MS);
   b4120:	f241 3188 	movw	r1, #5000	; 0x1388
   b4124:	f000 bed9 	b.w	b4eda <_ZN6Stream10setTimeoutEm>

000b4128 <_Z21secondsUntilNextEventv>:
  }
  break;
  }
}

int secondsUntilNextEvent() {
   b4128:	b538      	push	{r3, r4, r5, lr}

  int current_seconds = Time.now();
   b412a:	f000 ff1f 	bl	b4f6c <_ZN9TimeClass3nowEv>
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS) - EARLYBIRD_SECONDS;
   b412e:	f44f 74b4 	mov.w	r4, #360	; 0x168
   b4132:	fbb0 f3f4 	udiv	r3, r0, r4
   b4136:	fb03 0014 	mls	r0, r3, r4, r0
   b413a:	1a24      	subs	r4, r4, r0

  Serial.print("Sleeping for ");
   b413c:	f001 fb5e 	bl	b57fc <_Z16_fetch_usbserialv>
   b4140:	4907      	ldr	r1, [pc, #28]	; (b4160 <_Z21secondsUntilNextEventv+0x38>)
   b4142:	f000 fe49 	bl	b4dd8 <_ZN5Print5printEPKc>
  Serial.println(seconds_to_sleep);
   b4146:	f001 fb59 	bl	b57fc <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b414a:	220a      	movs	r2, #10
   b414c:	4605      	mov	r5, r0
   b414e:	4621      	mov	r1, r4
   b4150:	f000 fe5f 	bl	b4e12 <_ZN5Print11printNumberEmh>
        n += println();
   b4154:	4628      	mov	r0, r5
   b4156:	f000 fe46 	bl	b4de6 <_ZN5Print7printlnEv>

  return seconds_to_sleep;
   b415a:	4620      	mov	r0, r4
   b415c:	bd38      	pop	{r3, r4, r5, pc}
   b415e:	bf00      	nop
   b4160:	000b6860 	.word	0x000b6860

000b4164 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4164:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4166:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b4168:	2000      	movs	r0, #0
   b416a:	f000 fb53 	bl	b4814 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b416e:	b120      	cbz	r0, b417a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4170:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4172:	b913      	cbnz	r3, b417a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4174:	f000 fbe4 	bl	b4940 <spark_process>
    }
   b4178:	e7fa      	b.n	b4170 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b417a:	7863      	ldrb	r3, [r4, #1]
   b417c:	f3bf 8f5b 	dmb	ish
   b4180:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4182:	b90b      	cbnz	r3, b4188 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4184:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b4186:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4188:	2000      	movs	r0, #0
   b418a:	f000 fb43 	bl	b4814 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b418e:	b120      	cbz	r0, b419a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b4190:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4192:	b913      	cbnz	r3, b419a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b4194:	f000 fbd4 	bl	b4940 <spark_process>
    }
   b4198:	e7fa      	b.n	b4190 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b419a:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b419c:	2b01      	cmp	r3, #1
   b419e:	d1f1      	bne.n	b4184 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b41a0:	7b20      	ldrb	r0, [r4, #12]
   b41a2:	e7f0      	b.n	b4186 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
   b41a4:	0000      	movs	r0, r0
	...

000b41a8 <loop>:
void loop(void) {
   b41a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   b41ac:	4eac      	ldr	r6, [pc, #688]	; (b4460 <loop+0x2b8>)
   b41ae:	7835      	ldrb	r5, [r6, #0]
   b41b0:	2d01      	cmp	r5, #1
void loop(void) {
   b41b2:	b089      	sub	sp, #36	; 0x24
  switch (state) {
   b41b4:	d04e      	beq.n	b4254 <loop+0xac>
   b41b6:	2d02      	cmp	r5, #2
   b41b8:	f000 80ca 	beq.w	b4350 <loop+0x1a8>
   b41bc:	2d00      	cmp	r5, #0
   b41be:	d146      	bne.n	b424e <loop+0xa6>
    digitalWrite(A0, LOW);
   b41c0:	4629      	mov	r1, r5
   b41c2:	2013      	movs	r0, #19
   b41c4:	f001 fd51 	bl	b5c6a <digitalWrite>
    delay(1000);
   b41c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b41cc:	f000 fee8 	bl	b4fa0 <delay>
    digitalWrite(A0, HIGH);
   b41d0:	2101      	movs	r1, #1
   b41d2:	2013      	movs	r0, #19
   b41d4:	f001 fd49 	bl	b5c6a <digitalWrite>
    digitalWrite(A0, LOW);
   b41d8:	4629      	mov	r1, r5
   b41da:	2013      	movs	r0, #19
   b41dc:	f001 fd45 	bl	b5c6a <digitalWrite>
    delay(1000);
   b41e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b41e4:	f000 fedc 	bl	b4fa0 <delay>
    String statement = Serial1.readString();
   b41e8:	f001 fd8a 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b41ec:	4601      	mov	r1, r0
   b41ee:	a804      	add	r0, sp, #16
   b41f0:	f000 fe76 	bl	b4ee0 <_ZN6Stream10readStringEv>
    digitalWrite(A0, HIGH);
   b41f4:	2101      	movs	r1, #1
   b41f6:	2013      	movs	r0, #19
   b41f8:	f001 fd37 	bl	b5c6a <digitalWrite>
    float voltage = analogRead(A1) * ((3.3/4096)*((2000000+1300000)/2000000));
   b41fc:	2012      	movs	r0, #18
   b41fe:	f001 fd4d 	bl	b5c9c <analogRead>
   b4202:	4605      	mov	r5, r0
    real_time = Time.now();
   b4204:	f000 feb2 	bl	b4f6c <_ZN9TimeClass3nowEv>
   b4208:	4b96      	ldr	r3, [pc, #600]	; (b4464 <loop+0x2bc>)
   b420a:	4604      	mov	r4, r0
   b420c:	6018      	str	r0, [r3, #0]
    float voltage = analogRead(A1) * ((3.3/4096)*((2000000+1300000)/2000000));
   b420e:	4628      	mov	r0, r5
   b4210:	f001 ff72 	bl	b60f8 <__aeabi_i2d>
   b4214:	a390      	add	r3, pc, #576	; (adr r3, b4458 <loop+0x2b0>)
   b4216:	e9d3 2300 	ldrd	r2, r3, [r3]
   b421a:	f001 ffd7 	bl	b61cc <__aeabi_dmul>
   b421e:	f002 f9e7 	bl	b65f0 <__aeabi_d2f>
    snprintf(data, sizeof(data), "%li,%s,%.02f", //,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   b4222:	f001 ff7b 	bl	b611c <__aeabi_f2d>
   b4226:	9b04      	ldr	r3, [sp, #16]
   b4228:	4a8f      	ldr	r2, [pc, #572]	; (b4468 <loop+0x2c0>)
   b422a:	9300      	str	r3, [sp, #0]
   b422c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4230:	4623      	mov	r3, r4
   b4232:	2178      	movs	r1, #120	; 0x78
   b4234:	488d      	ldr	r0, [pc, #564]	; (b446c <loop+0x2c4>)
   b4236:	f000 fbcb 	bl	b49d0 <snprintf>
    Serial.println(data);
   b423a:	f001 fadf 	bl	b57fc <_Z16_fetch_usbserialv>
   b423e:	498b      	ldr	r1, [pc, #556]	; (b446c <loop+0x2c4>)
   b4240:	f000 fddd 	bl	b4dfe <_ZN5Print7printlnEPKc>
      state = PUBLISH_STATE;
   b4244:	2301      	movs	r3, #1
    String statement = Serial1.readString();
   b4246:	a804      	add	r0, sp, #16
      state = PUBLISH_STATE;
   b4248:	7033      	strb	r3, [r6, #0]
    String statement = Serial1.readString();
   b424a:	f000 fcdb 	bl	b4c04 <_ZN6StringD1Ev>
}
   b424e:	b009      	add	sp, #36	; 0x24
   b4250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4254:	f000 f9b6 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4258:	4d85      	ldr	r5, [pc, #532]	; (b4470 <loop+0x2c8>)
        Serial.print("Trying to connect");
   b425a:	f8df 8244 	ldr.w	r8, [pc, #580]	; b44a0 <loop+0x2f8>
    stateTime = millis();
   b425e:	6028      	str	r0, [r5, #0]
    Serial1.end();
   b4260:	f001 fd4e 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b4264:	f001 fb95 	bl	b5992 <_ZN11USARTSerial3endEv>
    delay(1000);
   b4268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b426c:	f000 fe98 	bl	b4fa0 <delay>
    Serial1.begin(9600);
   b4270:	f001 fd46 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b4274:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4278:	f001 fb88 	bl	b598c <_ZN11USARTSerial5beginEm>
    delay(500);
   b427c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4280:	f000 fe8e 	bl	b4fa0 <delay>
    Serial1.setTimeout(TIMEOUT_TINYCAM_MS);
   b4284:	f001 fd3c 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b4288:	f241 3188 	movw	r1, #5000	; 0x1388
   b428c:	f000 fe25 	bl	b4eda <_ZN6Stream10setTimeoutEm>
          Serial.println("max time for publishing reached without success; go to sleep");
   b4290:	f8df 9210 	ldr.w	r9, [pc, #528]	; b44a4 <loop+0x2fc>
        Serial.println("Not max time, try again to connect and publish");
   b4294:	4f77      	ldr	r7, [pc, #476]	; (b4474 <loop+0x2cc>)
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4296:	f000 fb63 	bl	b4960 <spark_cloud_flag_connected>
      if (Particle.connected() == false) {
   b429a:	b930      	cbnz	r0, b42aa <loop+0x102>
        spark_cloud_flag_connect();
   b429c:	f000 fb58 	bl	b4950 <spark_cloud_flag_connect>
        Serial.print("Trying to connect");
   b42a0:	f001 faac 	bl	b57fc <_Z16_fetch_usbserialv>
   b42a4:	4641      	mov	r1, r8
   b42a6:	f000 fd97 	bl	b4dd8 <_ZN5Print5printEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b42aa:	f000 fb59 	bl	b4960 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b42ae:	4604      	mov	r4, r0
   b42b0:	2800      	cmp	r0, #0
   b42b2:	d031      	beq.n	b4318 <loop+0x170>
        Serial.println("publishing data");
   b42b4:	f001 faa2 	bl	b57fc <_Z16_fetch_usbserialv>
   b42b8:	496f      	ldr	r1, [pc, #444]	; (b4478 <loop+0x2d0>)
   b42ba:	f000 fda0 	bl	b4dfe <_ZN5Print7printlnEPKc>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b42be:	4b6f      	ldr	r3, [pc, #444]	; (b447c <loop+0x2d4>)
   b42c0:	4a6f      	ldr	r2, [pc, #444]	; (b4480 <loop+0x2d8>)
   b42c2:	781b      	ldrb	r3, [r3, #0]
   b42c4:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42c6:	496f      	ldr	r1, [pc, #444]	; (b4484 <loop+0x2dc>)
   b42c8:	4313      	orrs	r3, r2
   b42ca:	f88d 3000 	strb.w	r3, [sp]
   b42ce:	4a67      	ldr	r2, [pc, #412]	; (b446c <loop+0x2c4>)
   b42d0:	6809      	ldr	r1, [r1, #0]
   b42d2:	233c      	movs	r3, #60	; 0x3c
   b42d4:	a804      	add	r0, sp, #16
   b42d6:	f001 f84f 	bl	b5378 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b42da:	a804      	add	r0, sp, #16
   b42dc:	f7ff ff42 	bl	b4164 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
   b42e0:	9c05      	ldr	r4, [sp, #20]
   b42e2:	4605      	mov	r5, r0
   b42e4:	b17c      	cbz	r4, b4306 <loop+0x15e>
      if (--_M_use_count == 0)
   b42e6:	6863      	ldr	r3, [r4, #4]
   b42e8:	3b01      	subs	r3, #1
   b42ea:	6063      	str	r3, [r4, #4]
   b42ec:	b95b      	cbnz	r3, b4306 <loop+0x15e>
          _M_dispose();
   b42ee:	6823      	ldr	r3, [r4, #0]
   b42f0:	4620      	mov	r0, r4
   b42f2:	689b      	ldr	r3, [r3, #8]
   b42f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42f6:	68a3      	ldr	r3, [r4, #8]
   b42f8:	3b01      	subs	r3, #1
   b42fa:	60a3      	str	r3, [r4, #8]
   b42fc:	b91b      	cbnz	r3, b4306 <loop+0x15e>
            _M_destroy();
   b42fe:	6823      	ldr	r3, [r4, #0]
   b4300:	4620      	mov	r0, r4
   b4302:	68db      	ldr	r3, [r3, #12]
   b4304:	4798      	blx	r3
        Serial.printlnf("publish result %d", success);
   b4306:	f001 fa79 	bl	b57fc <_Z16_fetch_usbserialv>
   b430a:	495f      	ldr	r1, [pc, #380]	; (b4488 <loop+0x2e0>)
   b430c:	462a      	mov	r2, r5
   b430e:	f7ff fed8 	bl	b40c2 <_ZN5Print8printlnfEPKcz>
        state = SLEEP_STATE;
   b4312:	2302      	movs	r3, #2
   b4314:	7033      	strb	r3, [r6, #0]
    while (!isMaxTime) {
   b4316:	e79a      	b.n	b424e <loop+0xa6>
   b4318:	f000 f954 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b431c:	682b      	ldr	r3, [r5, #0]
   b431e:	1ac0      	subs	r0, r0, r3
   b4320:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b4324:	4298      	cmp	r0, r3
   b4326:	d907      	bls.n	b4338 <loop+0x190>
          state = SLEEP_STATE;
   b4328:	2302      	movs	r3, #2
   b432a:	7033      	strb	r3, [r6, #0]
          Serial.println("max time for publishing reached without success; go to sleep");
   b432c:	f001 fa66 	bl	b57fc <_Z16_fetch_usbserialv>
   b4330:	4649      	mov	r1, r9
   b4332:	f000 fd64 	bl	b4dfe <_ZN5Print7printlnEPKc>
          isMaxTime = true;
   b4336:	2401      	movs	r4, #1
        Serial.println("Not max time, try again to connect and publish");
   b4338:	f001 fa60 	bl	b57fc <_Z16_fetch_usbserialv>
   b433c:	4639      	mov	r1, r7
   b433e:	f000 fd5e 	bl	b4dfe <_ZN5Print7printlnEPKc>
        delay(500);
   b4342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4346:	f000 fe2b 	bl	b4fa0 <delay>
    while (!isMaxTime) {
   b434a:	2c00      	cmp	r4, #0
   b434c:	d0a3      	beq.n	b4296 <loop+0xee>
   b434e:	e77e      	b.n	b424e <loop+0xa6>
    Serial.println("going to sleep");
   b4350:	f001 fa54 	bl	b57fc <_Z16_fetch_usbserialv>
   b4354:	494d      	ldr	r1, [pc, #308]	; (b448c <loop+0x2e4>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4356:	4c4e      	ldr	r4, [pc, #312]	; (b4490 <loop+0x2e8>)
   b4358:	f000 fd51 	bl	b4dfe <_ZN5Print7printlnEPKc>
    delay(500);
   b435c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4360:	f000 fe1e 	bl	b4fa0 <delay>
    int wakeInSeconds = secondsUntilNextEvent(); // Calculate how long to sleep 
   b4364:	f7ff fee0 	bl	b4128 <_Z21secondsUntilNextEventv>
   b4368:	7d23      	ldrb	r3, [r4, #20]
   b436a:	4680      	mov	r8, r0
   b436c:	b1e3      	cbz	r3, b43a8 <loop+0x200>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b436e:	6823      	ldr	r3, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4370:	7225      	strb	r5, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4372:	68d9      	ldr	r1, [r3, #12]
   b4374:	2001      	movs	r0, #1
   b4376:	f7ff fe9c 	bl	b40b2 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b437a:	4605      	mov	r5, r0

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
            while (wakeup) {
   b437c:	2800      	cmp	r0, #0
   b437e:	d03e      	beq.n	b43fe <loop+0x256>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   b4380:	8983      	ldrh	r3, [r0, #12]
   b4382:	2b02      	cmp	r3, #2
   b4384:	d139      	bne.n	b43fa <loop+0x252>
                    gpioWakeup->mode = mode;
   b4386:	7383      	strb	r3, [r0, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4388:	7d23      	ldrb	r3, [r4, #20]
   b438a:	b16b      	cbz	r3, b43a8 <loop+0x200>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b438c:	6823      	ldr	r3, [r4, #0]
      .duration(wakeInSeconds * 1000L) // Set seconds until wake
   b438e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4392:	68d9      	ldr	r1, [r3, #12]
   b4394:	fb00 f808 	mul.w	r8, r0, r8
   b4398:	2004      	movs	r0, #4
   b439a:	f7ff fe8a 	bl	b40b2 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
            if (wakeup) {
   b439e:	4607      	mov	r7, r0
   b43a0:	2800      	cmp	r0, #0
   b43a2:	d042      	beq.n	b442a <loop+0x282>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b43a4:	f8c0 800c 	str.w	r8, [r0, #12]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   b43a8:	7d23      	ldrb	r3, [r4, #20]
   b43aa:	b183      	cbz	r3, b43ce <loop+0x226>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43ac:	6823      	ldr	r3, [r4, #0]
   b43ae:	68d9      	ldr	r1, [r3, #12]
   b43b0:	200e      	movs	r0, #14
   b43b2:	f7ff fe7e 	bl	b40b2 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_tP24hal_wakeup_source_base_t.isra.0>
   b43b6:	4605      	mov	r5, r0
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
            while (wakeup) {
   b43b8:	2800      	cmp	r0, #0
   b43ba:	d075      	beq.n	b44a8 <loop+0x300>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   b43bc:	7b03      	ldrb	r3, [r0, #12]
   b43be:	2b04      	cmp	r3, #4
   b43c0:	d147      	bne.n	b4452 <loop+0x2aa>
                    if (networkWakeup->flags != flags.value()) {
   b43c2:	89c3      	ldrh	r3, [r0, #14]
   b43c4:	2b01      	cmp	r3, #1
   b43c6:	d002      	beq.n	b43ce <loop+0x226>
                        networkWakeup->flags |= flags.value();
   b43c8:	f043 0301 	orr.w	r3, r3, #1
   b43cc:	81c3      	strh	r3, [r0, #14]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b43ce:	4930      	ldr	r1, [pc, #192]	; (b4490 <loop+0x2e8>)
   b43d0:	a804      	add	r0, sp, #16
   b43d2:	f000 fba5 	bl	b4b20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Serial.print("Feeling restless");
   b43d6:	f001 fa11 	bl	b57fc <_Z16_fetch_usbserialv>
   b43da:	492e      	ldr	r1, [pc, #184]	; (b4494 <loop+0x2ec>)
   b43dc:	f000 fcfc 	bl	b4dd8 <_ZN5Print5printEPKc>
   b43e0:	f000 f8f0 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b43e4:	4b22      	ldr	r3, [pc, #136]	; (b4470 <loop+0x2c8>)
   b43e6:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b43e8:	9804      	ldr	r0, [sp, #16]
    state = DATALOG_STATE;
   b43ea:	2300      	movs	r3, #0
   b43ec:	7033      	strb	r3, [r6, #0]
   b43ee:	2800      	cmp	r0, #0
   b43f0:	f43f af2d 	beq.w	b424e <loop+0xa6>
            free(wakeupSource_);
   b43f4:	f000 fadc 	bl	b49b0 <free>
}
   b43f8:	e729      	b.n	b424e <loop+0xa6>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b43fa:	6881      	ldr	r1, [r0, #8]
   b43fc:	e7ba      	b.n	b4374 <loop+0x1cc>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b43fe:	4926      	ldr	r1, [pc, #152]	; (b4498 <loop+0x2f0>)
   b4400:	2010      	movs	r0, #16
   b4402:	f001 fd1f 	bl	b5e44 <_ZnwjRKSt9nothrow_t>
   b4406:	4607      	mov	r7, r0
   b4408:	2800      	cmp	r0, #0
   b440a:	d065      	beq.n	b44d8 <loop+0x330>
   b440c:	2210      	movs	r2, #16
   b440e:	4629      	mov	r1, r5
   b4410:	f002 f952 	bl	b66b8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4414:	4b21      	ldr	r3, [pc, #132]	; (b449c <loop+0x2f4>)
   b4416:	603b      	str	r3, [r7, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4418:	2301      	movs	r3, #1
   b441a:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b441c:	6923      	ldr	r3, [r4, #16]
   b441e:	60bb      	str	r3, [r7, #8]
            wakeupSource->pin = pin;
   b4420:	2302      	movs	r3, #2
   b4422:	81bb      	strh	r3, [r7, #12]
            wakeupSource->mode = mode;
   b4424:	73bb      	strb	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4426:	6127      	str	r7, [r4, #16]
   b4428:	e7ae      	b.n	b4388 <loop+0x1e0>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b442a:	491b      	ldr	r1, [pc, #108]	; (b4498 <loop+0x2f0>)
   b442c:	2010      	movs	r0, #16
   b442e:	f001 fd09 	bl	b5e44 <_ZnwjRKSt9nothrow_t>
   b4432:	4605      	mov	r5, r0
   b4434:	2800      	cmp	r0, #0
   b4436:	d04f      	beq.n	b44d8 <loop+0x330>
   b4438:	2210      	movs	r2, #16
   b443a:	4639      	mov	r1, r7
   b443c:	f002 f93c 	bl	b66b8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4440:	4b16      	ldr	r3, [pc, #88]	; (b449c <loop+0x2f4>)
   b4442:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4444:	2304      	movs	r3, #4
   b4446:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4448:	6923      	ldr	r3, [r4, #16]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b444a:	6125      	str	r5, [r4, #16]
            wakeupSource->ms = ms;
   b444c:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4450:	e7aa      	b.n	b43a8 <loop+0x200>
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   b4452:	6881      	ldr	r1, [r0, #8]
   b4454:	e7ac      	b.n	b43b0 <loop+0x208>
   b4456:	bf00      	nop
   b4458:	66666666 	.word	0x66666666
   b445c:	3f4a6666 	.word	0x3f4a6666
   b4460:	2003e670 	.word	0x2003e670
   b4464:	2003e66c 	.word	0x2003e66c
   b4468:	000b686e 	.word	0x000b686e
   b446c:	2003e5f4 	.word	0x2003e5f4
   b4470:	2003e674 	.word	0x2003e674
   b4474:	000b68ec 	.word	0x000b68ec
   b4478:	000b688d 	.word	0x000b688d
   b447c:	2003e5d1 	.word	0x2003e5d1
   b4480:	2003e5d0 	.word	0x2003e5d0
   b4484:	2003e554 	.word	0x2003e554
   b4488:	000b689d 	.word	0x000b689d
   b448c:	000b691b 	.word	0x000b691b
   b4490:	2003e5dc 	.word	0x2003e5dc
   b4494:	000b692a 	.word	0x000b692a
   b4498:	000b6b04 	.word	0x000b6b04
   b449c:	00030010 	.word	0x00030010
   b44a0:	000b687b 	.word	0x000b687b
   b44a4:	000b68af 	.word	0x000b68af
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   b44a8:	490c      	ldr	r1, [pc, #48]	; (b44dc <loop+0x334>)
   b44aa:	2014      	movs	r0, #20
   b44ac:	f001 fcca 	bl	b5e44 <_ZnwjRKSt9nothrow_t>
   b44b0:	4607      	mov	r7, r0
   b44b2:	b178      	cbz	r0, b44d4 <loop+0x32c>
   b44b4:	2214      	movs	r2, #20
   b44b6:	4629      	mov	r1, r5
   b44b8:	f002 f8fe 	bl	b66b8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b44bc:	4b08      	ldr	r3, [pc, #32]	; (b44e0 <loop+0x338>)
   b44be:	603b      	str	r3, [r7, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   b44c0:	230e      	movs	r3, #14
   b44c2:	80bb      	strh	r3, [r7, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b44c4:	6923      	ldr	r3, [r4, #16]
   b44c6:	60bb      	str	r3, [r7, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   b44c8:	2304      	movs	r3, #4
   b44ca:	733b      	strb	r3, [r7, #12]
            wakeupSource->flags = flags.value();
   b44cc:	2301      	movs	r3, #1
   b44ce:	81fb      	strh	r3, [r7, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b44d0:	6127      	str	r7, [r4, #16]
   b44d2:	e77c      	b.n	b43ce <loop+0x226>
                valid_ = false;
   b44d4:	7525      	strb	r5, [r4, #20]
                return *this;
   b44d6:	e77a      	b.n	b43ce <loop+0x226>
                valid_ = false;
   b44d8:	7525      	strb	r5, [r4, #20]
                return *this;
   b44da:	e765      	b.n	b43a8 <loop+0x200>
   b44dc:	000b6b04 	.word	0x000b6b04
   b44e0:	00030010 	.word	0x00030010

000b44e4 <_GLOBAL__sub_I_real_time>:
   b44e4:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b44e6:	4b10      	ldr	r3, [pc, #64]	; (b4528 <_GLOBAL__sub_I_real_time+0x44>)
   b44e8:	2501      	movs	r5, #1
   b44ea:	701d      	strb	r5, [r3, #0]
   b44ec:	4b0f      	ldr	r3, [pc, #60]	; (b452c <_GLOBAL__sub_I_real_time+0x48>)
   b44ee:	2208      	movs	r2, #8
   b44f0:	701a      	strb	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b44f2:	4b0f      	ldr	r3, [pc, #60]	; (b4530 <_GLOBAL__sub_I_real_time+0x4c>)
    SleepResult() {}
   b44f4:	4a0f      	ldr	r2, [pc, #60]	; (b4534 <_GLOBAL__sub_I_real_time+0x50>)
   b44f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b44f8:	2400      	movs	r4, #0
   b44fa:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b44fe:	2003      	movs	r0, #3
   b4500:	f000 f970 	bl	b47e4 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4504:	4621      	mov	r1, r4
   b4506:	4628      	mov	r0, r5
   b4508:	f000 f97c 	bl	b4804 <system_thread_set_state>
FuelGauge batteryMonitor;
   b450c:	480a      	ldr	r0, [pc, #40]	; (b4538 <_GLOBAL__sub_I_real_time+0x54>)
   b450e:	4621      	mov	r1, r4
   b4510:	f000 fd5c 	bl	b4fcc <_ZN9FuelGaugeC1Eb>
        : config_(config) {
   b4514:	4b09      	ldr	r3, [pc, #36]	; (b453c <_GLOBAL__sub_I_real_time+0x58>)
   b4516:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b4518:	e9c3 4402 	strd	r4, r4, [r3, #8]
        : config_(config) {
   b451c:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b451e:	4a08      	ldr	r2, [pc, #32]	; (b4540 <_GLOBAL__sub_I_real_time+0x5c>)
   b4520:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4522:	611c      	str	r4, [r3, #16]
   b4524:	751d      	strb	r5, [r3, #20]
   b4526:	bd38      	pop	{r3, r4, r5, pc}
   b4528:	2003e5d0 	.word	0x2003e5d0
   b452c:	2003e5d1 	.word	0x2003e5d1
   b4530:	2003e5c4 	.word	0x2003e5c4
   b4534:	ffff0000 	.word	0xffff0000
   b4538:	2003e5d4 	.word	0x2003e5d4
   b453c:	2003e5dc 	.word	0x2003e5dc
   b4540:	00030010 	.word	0x00030010

000b4544 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <netdb_freeaddrinfo+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	689b      	ldr	r3, [r3, #8]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030268 	.word	0x00030268

000b4554 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <netdb_getaddrinfo+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	68db      	ldr	r3, [r3, #12]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030268 	.word	0x00030268

000b4564 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <HAL_Validate_Pin_Function+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	685b      	ldr	r3, [r3, #4]
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	0003022c 	.word	0x0003022c

000b4574 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <HAL_Pin_Mode+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	689b      	ldr	r3, [r3, #8]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003022c 	.word	0x0003022c

000b4584 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <HAL_Get_Pin_Mode+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	68db      	ldr	r3, [r3, #12]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003022c 	.word	0x0003022c

000b4594 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <HAL_GPIO_Write+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	691b      	ldr	r3, [r3, #16]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003022c 	.word	0x0003022c

000b45a4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <hal_adc_read+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003022c 	.word	0x0003022c

000b45b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <HAL_RNG_GetRandomNumber+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	685b      	ldr	r3, [r3, #4]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030218 	.word	0x00030218

000b45c4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	695b      	ldr	r3, [r3, #20]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	00030218 	.word	0x00030218

000b45d4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_rtc_time_is_valid+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	00030218 	.word	0x00030218

000b45e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_rtc_get_time+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030218 	.word	0x00030218

000b45f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <os_mutex_recursive_create+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030248 	.word	0x00030248

000b4604 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <inet_inet_ntop+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	695b      	ldr	r3, [r3, #20]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030264 	.word	0x00030264

000b4614 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_usart_end+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	689b      	ldr	r3, [r3, #8]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	0003023c 	.word	0x0003023c

000b4624 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_usart_write+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	68db      	ldr	r3, [r3, #12]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	0003023c 	.word	0x0003023c

000b4634 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <hal_usart_available+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	691b      	ldr	r3, [r3, #16]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	0003023c 	.word	0x0003023c

000b4644 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <hal_usart_read+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003023c 	.word	0x0003023c

000b4654 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <hal_usart_peek+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	699b      	ldr	r3, [r3, #24]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003023c 	.word	0x0003023c

000b4664 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <hal_usart_flush+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	69db      	ldr	r3, [r3, #28]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003023c 	.word	0x0003023c

000b4674 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <hal_usart_is_enabled+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6a1b      	ldr	r3, [r3, #32]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003023c 	.word	0x0003023c

000b4684 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <hal_usart_available_data_for_write+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	0003023c 	.word	0x0003023c

000b4694 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_usart_begin_config+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	0003023c 	.word	0x0003023c

000b46a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <hal_usart_init_ex+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	0003023c 	.word	0x0003023c

000b46b4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <hal_i2c_write+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6a1b      	ldr	r3, [r3, #32]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030228 	.word	0x00030228

000b46c4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <hal_i2c_available+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030228 	.word	0x00030228

000b46d4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <hal_i2c_read+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030228 	.word	0x00030228

000b46e4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <hal_i2c_peek+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030228 	.word	0x00030228

000b46f4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <hal_i2c_flush+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030228 	.word	0x00030228

000b4704 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <hal_i2c_is_enabled+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030228 	.word	0x00030228

000b4714 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <hal_i2c_init+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030228 	.word	0x00030228

000b4724 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <hal_i2c_lock+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030228 	.word	0x00030228

000b4734 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <hal_spi_init+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	69db      	ldr	r3, [r3, #28]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	00030230 	.word	0x00030230

000b4744 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <hal_spi_is_enabled+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6a1b      	ldr	r3, [r3, #32]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030230 	.word	0x00030230

000b4754 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <HAL_USB_USART_Init+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	681b      	ldr	r3, [r3, #0]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	0003024c 	.word	0x0003024c

000b4764 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <HAL_USB_USART_Begin+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	685b      	ldr	r3, [r3, #4]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	0003024c 	.word	0x0003024c

000b4774 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <HAL_USB_USART_Available_Data+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	691b      	ldr	r3, [r3, #16]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003024c 	.word	0x0003024c

000b4784 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	695b      	ldr	r3, [r3, #20]
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003024c 	.word	0x0003024c

000b4794 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <HAL_USB_USART_Receive_Data+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	699b      	ldr	r3, [r3, #24]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003024c 	.word	0x0003024c

000b47a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <HAL_USB_USART_Send_Data+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	69db      	ldr	r3, [r3, #28]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003024c 	.word	0x0003024c

000b47b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <HAL_USB_USART_Flush_Data+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	6a1b      	ldr	r3, [r3, #32]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003024c 	.word	0x0003024c

000b47c4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <log_message+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	00030260 	.word	0x00030260

000b47d4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <system_mode+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	681b      	ldr	r3, [r3, #0]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	00030220 	.word	0x00030220

000b47e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <set_system_mode+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	685b      	ldr	r3, [r3, #4]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	00030220 	.word	0x00030220

000b47f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <system_delay_ms+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	695b      	ldr	r3, [r3, #20]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030220 	.word	0x00030220

000b4804 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <system_thread_set_state+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030220 	.word	0x00030220

000b4814 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <application_thread_current+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030220 	.word	0x00030220

000b4824 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <application_thread_invoke+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030220 	.word	0x00030220

000b4834 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <system_thread_get_state+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030220 	.word	0x00030220

000b4844 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b03      	ldr	r3, [pc, #12]	; (b4854 <system_ctrl_set_app_request_handler+0x10>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b484e:	9301      	str	r3, [sp, #4]
   b4850:	bd08      	pop	{r3, pc}
   b4852:	0000      	.short	0x0000
   b4854:	00030220 	.word	0x00030220

000b4858 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b03      	ldr	r3, [pc, #12]	; (b4868 <system_ctrl_set_result+0x10>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4862:	9301      	str	r3, [sp, #4]
   b4864:	bd08      	pop	{r3, pc}
   b4866:	0000      	.short	0x0000
   b4868:	00030220 	.word	0x00030220

000b486c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b03      	ldr	r3, [pc, #12]	; (b487c <system_sleep_ext+0x10>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b4876:	9301      	str	r3, [sp, #4]
   b4878:	bd08      	pop	{r3, pc}
   b487a:	0000      	.short	0x0000
   b487c:	00030220 	.word	0x00030220

000b4880 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <network_connect+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	685b      	ldr	r3, [r3, #4]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	00030240 	.word	0x00030240

000b4890 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <network_connecting+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	689b      	ldr	r3, [r3, #8]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030240 	.word	0x00030240

000b48a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <network_disconnect+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	68db      	ldr	r3, [r3, #12]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030240 	.word	0x00030240

000b48b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <network_ready+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	691b      	ldr	r3, [r3, #16]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030240 	.word	0x00030240

000b48c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <network_on+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	695b      	ldr	r3, [r3, #20]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	00030240 	.word	0x00030240

000b48d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <network_off+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	699b      	ldr	r3, [r3, #24]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030240 	.word	0x00030240

000b48e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <network_listen+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	69db      	ldr	r3, [r3, #28]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	00030240 	.word	0x00030240

000b48f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <network_listening+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	6a1b      	ldr	r3, [r3, #32]
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	00030240 	.word	0x00030240

000b4900 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <network_set_listen_timeout+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	00030240 	.word	0x00030240

000b4910 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <network_get_listen_timeout+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	00030240 	.word	0x00030240

000b4920 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <network_is_on+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	00030240 	.word	0x00030240

000b4930 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <network_is_off+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	00030240 	.word	0x00030240

000b4940 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <spark_process+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	689b      	ldr	r3, [r3, #8]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030244 	.word	0x00030244

000b4950 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <spark_cloud_flag_connect+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	68db      	ldr	r3, [r3, #12]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030244 	.word	0x00030244

000b4960 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <spark_cloud_flag_connected+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	695b      	ldr	r3, [r3, #20]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030244 	.word	0x00030244

000b4970 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <spark_send_event+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	6a1b      	ldr	r3, [r3, #32]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	00030244 	.word	0x00030244

000b4980 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <spark_sync_time_pending+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030244 	.word	0x00030244

000b4990 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030244 	.word	0x00030244

000b49a0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <malloc+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	681b      	ldr	r3, [r3, #0]
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	0003021c 	.word	0x0003021c

000b49b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <free+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	685b      	ldr	r3, [r3, #4]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	0003021c 	.word	0x0003021c

000b49c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <realloc+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	689b      	ldr	r3, [r3, #8]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	0003021c 	.word	0x0003021c

000b49d0 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <snprintf+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	69db      	ldr	r3, [r3, #28]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	0003021c 	.word	0x0003021c

000b49e0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <vsnprintf+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	0003021c 	.word	0x0003021c

000b49f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <abort+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	0003021c 	.word	0x0003021c

000b4a00 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <_malloc_r+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	0003021c 	.word	0x0003021c

000b4a10 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <__assert_func+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	0003021c 	.word	0x0003021c

000b4a20 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <newlib_impure_ptr_callback+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	0003021c 	.word	0x0003021c

000b4a30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4a30:	2200      	movs	r2, #0
   b4a32:	6840      	ldr	r0, [r0, #4]
   b4a34:	4611      	mov	r1, r2
   b4a36:	f7ff bf5b 	b.w	b48f0 <network_listening>

000b4a3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a3a:	2200      	movs	r2, #0
   b4a3c:	6840      	ldr	r0, [r0, #4]
   b4a3e:	4611      	mov	r1, r2
   b4a40:	f7ff bf66 	b.w	b4910 <network_get_listen_timeout>

000b4a44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a44:	6840      	ldr	r0, [r0, #4]
   b4a46:	2200      	movs	r2, #0
   b4a48:	f7ff bf5a 	b.w	b4900 <network_set_listen_timeout>

000b4a4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a4c:	6840      	ldr	r0, [r0, #4]
   b4a4e:	2200      	movs	r2, #0
   b4a50:	f081 0101 	eor.w	r1, r1, #1
   b4a54:	f7ff bf44 	b.w	b48e0 <network_listen>

000b4a58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a58:	2300      	movs	r3, #0
   b4a5a:	6840      	ldr	r0, [r0, #4]
   b4a5c:	461a      	mov	r2, r3
   b4a5e:	4619      	mov	r1, r3
   b4a60:	f7ff bf36 	b.w	b48d0 <network_off>

000b4a64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a64:	2300      	movs	r3, #0
   b4a66:	6840      	ldr	r0, [r0, #4]
   b4a68:	461a      	mov	r2, r3
   b4a6a:	4619      	mov	r1, r3
   b4a6c:	f7ff bf28 	b.w	b48c0 <network_on>

000b4a70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4a70:	2200      	movs	r2, #0
   b4a72:	6840      	ldr	r0, [r0, #4]
   b4a74:	4611      	mov	r1, r2
   b4a76:	f7ff bf1b 	b.w	b48b0 <network_ready>

000b4a7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4a7a:	2200      	movs	r2, #0
   b4a7c:	6840      	ldr	r0, [r0, #4]
   b4a7e:	4611      	mov	r1, r2
   b4a80:	f7ff bf06 	b.w	b4890 <network_connecting>

000b4a84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a84:	6840      	ldr	r0, [r0, #4]
   b4a86:	2200      	movs	r2, #0
   b4a88:	2102      	movs	r1, #2
   b4a8a:	f7ff bf09 	b.w	b48a0 <network_disconnect>

000b4a8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a8e:	2300      	movs	r3, #0
   b4a90:	6840      	ldr	r0, [r0, #4]
   b4a92:	461a      	mov	r2, r3
   b4a94:	f7ff bef4 	b.w	b4880 <network_connect>

000b4a98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a98:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a9a:	2203      	movs	r2, #3
   b4a9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a9e:	4a02      	ldr	r2, [pc, #8]	; (b4aa8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4aa0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4aa2:	4770      	bx	lr
   b4aa4:	2003e678 	.word	0x2003e678
   b4aa8:	000b6950 	.word	0x000b6950

000b4aac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4aac:	b510      	push	{r4, lr}
   b4aae:	4604      	mov	r4, r0
   b4ab0:	4608      	mov	r0, r1
{
    _spi = spi;
   b4ab2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4ab4:	f7ff fe3e 	bl	b4734 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4ab8:	2300      	movs	r3, #0
   b4aba:	6063      	str	r3, [r4, #4]
}
   b4abc:	4620      	mov	r0, r4
   b4abe:	bd10      	pop	{r4, pc}

000b4ac0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b4ac0:	b510      	push	{r4, lr}
   b4ac2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4ac4:	6800      	ldr	r0, [r0, #0]
   b4ac6:	b118      	cbz	r0, b4ad0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b4ac8:	f7ff ff72 	bl	b49b0 <free>
            wakeupSource_ = nullptr;
   b4acc:	2300      	movs	r3, #0
   b4ace:	6023      	str	r3, [r4, #0]
        }
    }
   b4ad0:	bd10      	pop	{r4, pc}

000b4ad2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b4ad2:	b538      	push	{r3, r4, r5, lr}
   b4ad4:	460c      	mov	r4, r1
   b4ad6:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b4ad8:	f7ff fff2 	bl	b4ac0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b4adc:	b154      	cbz	r4, b4af4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b4ade:	8820      	ldrh	r0, [r4, #0]
   b4ae0:	f7ff ff5e 	bl	b49a0 <malloc>
   b4ae4:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b4ae6:	b128      	cbz	r0, b4af4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b4ae8:	8822      	ldrh	r2, [r4, #0]
   b4aea:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b4aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b4af0:	f001 bdd4 	b.w	b669c <memcpy>
    }
   b4af4:	bd38      	pop	{r3, r4, r5, pc}

000b4af6 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b4af6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b4af8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b4afc:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b4afe:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b4b02:	f8c0 3006 	str.w	r3, [r0, #6]
   b4b06:	894b      	ldrh	r3, [r1, #10]
   b4b08:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b4b0a:	460c      	mov	r4, r1
   b4b0c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b4b0e:	f7ff ffd7 	bl	b4ac0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b4b12:	6823      	ldr	r3, [r4, #0]
   b4b14:	b113      	cbz	r3, b4b1c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b4b16:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b4b18:	2300      	movs	r3, #0
   b4b1a:	6023      	str	r3, [r4, #0]
    }
   b4b1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b4b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4b22:	4d2b      	ldr	r5, [pc, #172]	; (b4bd0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b4b24:	7d0b      	ldrb	r3, [r1, #20]
   b4b26:	4604      	mov	r4, r0
   b4b28:	b08b      	sub	sp, #44	; 0x2c
   b4b2a:	4608      	mov	r0, r1
   b4b2c:	1daf      	adds	r7, r5, #6
   b4b2e:	2b00      	cmp	r3, #0
   b4b30:	d036      	beq.n	b4ba0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b4b32:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b4b34:	791b      	ldrb	r3, [r3, #4]
   b4b36:	2b00      	cmp	r3, #0
   b4b38:	d032      	beq.n	b4ba0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b4b3a:	4b26      	ldr	r3, [pc, #152]	; (b4bd4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b4b3c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b4b3e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b4b40:	a902      	add	r1, sp, #8
   b4b42:	3004      	adds	r0, #4
   b4b44:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b4b48:	f7ff fe90 	bl	b486c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b4b4c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b4b50:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b4b54:	b200      	sxth	r0, r0
   b4b56:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b4b5a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b4b5e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b4b60:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b4b62:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b4b64:	4628      	mov	r0, r5
   b4b66:	f7ff ffb4 	bl	b4ad2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b4b6a:	a802      	add	r0, sp, #8
   b4b6c:	f7ff ffa8 	bl	b4ac0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b4b70:	2300      	movs	r3, #0
   b4b72:	6023      	str	r3, [r4, #0]
   b4b74:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b4b76:	71a3      	strb	r3, [r4, #6]
   b4b78:	8123      	strh	r3, [r4, #8]
   b4b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4b7e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b4b80:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b4b84:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b4b86:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b4b8a:	f8c4 3006 	str.w	r3, [r4, #6]
   b4b8e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b4b90:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b4b92:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff ff9c 	bl	b4ad2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	b00b      	add	sp, #44	; 0x2c
   b4b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b4ba0:	2600      	movs	r6, #0
   b4ba2:	2320      	movs	r3, #32
   b4ba4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b4ba8:	4b0b      	ldr	r3, [pc, #44]	; (b4bd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b4baa:	9300      	str	r3, [sp, #0]
   b4bac:	aa02      	add	r2, sp, #8
   b4bae:	4633      	mov	r3, r6
   b4bb0:	490a      	ldr	r1, [pc, #40]	; (b4bdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b4bb2:	2032      	movs	r0, #50	; 0x32
   b4bb4:	f7ff fe06 	bl	b47c4 <log_message>
            : wakeupSource_(nullptr),
   b4bb8:	4b06      	ldr	r3, [pc, #24]	; (b4bd4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b4bba:	4805      	ldr	r0, [pc, #20]	; (b4bd0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b4bbc:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b4bbe:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b4bc2:	a902      	add	r1, sp, #8
   b4bc4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b4bc8:	f7ff ff95 	bl	b4af6 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b4bcc:	e7cd      	b.n	b4b6a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b4bce:	bf00      	nop
   b4bd0:	2003e680 	.word	0x2003e680
   b4bd4:	ffff0000 	.word	0xffff0000
   b4bd8:	000b698b 	.word	0x000b698b
   b4bdc:	000b6984 	.word	0x000b6984

000b4be0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4be0:	4b05      	ldr	r3, [pc, #20]	; (b4bf8 <_GLOBAL__sub_I_System+0x18>)
   b4be2:	2202      	movs	r2, #2
   b4be4:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b4be6:	4b05      	ldr	r3, [pc, #20]	; (b4bfc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4be8:	4a05      	ldr	r2, [pc, #20]	; (b4c00 <_GLOBAL__sub_I_System+0x20>)
   b4bea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4bec:	2000      	movs	r0, #0
   b4bee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4bf2:	f7ff bdf7 	b.w	b47e4 <set_system_mode>
   b4bf6:	bf00      	nop
   b4bf8:	2003e68c 	.word	0x2003e68c
   b4bfc:	2003e680 	.word	0x2003e680
   b4c00:	ffff0000 	.word	0xffff0000

000b4c04 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b4c04:	b510      	push	{r4, lr}
   b4c06:	4604      	mov	r4, r0
{
    free(buffer);
   b4c08:	6800      	ldr	r0, [r0, #0]
   b4c0a:	f7ff fed1 	bl	b49b0 <free>
}
   b4c0e:	4620      	mov	r0, r4
   b4c10:	bd10      	pop	{r4, pc}

000b4c12 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b4c12:	b510      	push	{r4, lr}
   b4c14:	4604      	mov	r4, r0
    if (buffer) {
   b4c16:	6800      	ldr	r0, [r0, #0]
   b4c18:	b108      	cbz	r0, b4c1e <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b4c1a:	f7ff fec9 	bl	b49b0 <free>
    }
    buffer = nullptr;
   b4c1e:	2300      	movs	r3, #0
    capacity = len = 0;
   b4c20:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b4c24:	6023      	str	r3, [r4, #0]
}
   b4c26:	bd10      	pop	{r4, pc}

000b4c28 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4c28:	b538      	push	{r3, r4, r5, lr}
   b4c2a:	4604      	mov	r4, r0
   b4c2c:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4c2e:	6800      	ldr	r0, [r0, #0]
   b4c30:	3101      	adds	r1, #1
   b4c32:	f7ff fec5 	bl	b49c0 <realloc>
    if (newbuffer) {
   b4c36:	b110      	cbz	r0, b4c3e <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b4c38:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4c3c:	2001      	movs	r0, #1
    }
    return 0;
}
   b4c3e:	bd38      	pop	{r3, r4, r5, pc}

000b4c40 <_ZN6String7reserveEj>:
{
   b4c40:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b4c42:	6803      	ldr	r3, [r0, #0]
{
   b4c44:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b4c46:	b123      	cbz	r3, b4c52 <_ZN6String7reserveEj+0x12>
   b4c48:	6843      	ldr	r3, [r0, #4]
   b4c4a:	428b      	cmp	r3, r1
   b4c4c:	d301      	bcc.n	b4c52 <_ZN6String7reserveEj+0x12>
   b4c4e:	2001      	movs	r0, #1
}
   b4c50:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b4c52:	4620      	mov	r0, r4
   b4c54:	f7ff ffe8 	bl	b4c28 <_ZN6String12changeBufferEj>
   b4c58:	2800      	cmp	r0, #0
   b4c5a:	d0f9      	beq.n	b4c50 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4c5c:	68a3      	ldr	r3, [r4, #8]
   b4c5e:	2b00      	cmp	r3, #0
   b4c60:	d1f5      	bne.n	b4c4e <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b4c62:	6822      	ldr	r2, [r4, #0]
   b4c64:	7013      	strb	r3, [r2, #0]
   b4c66:	e7f2      	b.n	b4c4e <_ZN6String7reserveEj+0xe>

000b4c68 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c6a:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4c6c:	4611      	mov	r1, r2
   b4c6e:	9201      	str	r2, [sp, #4]
{
   b4c70:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b4c72:	f7ff ffe5 	bl	b4c40 <_ZN6String7reserveEj>
   b4c76:	9a01      	ldr	r2, [sp, #4]
   b4c78:	b928      	cbnz	r0, b4c86 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b4c7a:	4620      	mov	r0, r4
   b4c7c:	f7ff ffc9 	bl	b4c12 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b4c80:	4620      	mov	r0, r4
   b4c82:	b003      	add	sp, #12
   b4c84:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4c86:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4c88:	4629      	mov	r1, r5
   b4c8a:	6820      	ldr	r0, [r4, #0]
   b4c8c:	f001 fd06 	bl	b669c <memcpy>
    buffer[len] = 0;
   b4c90:	6822      	ldr	r2, [r4, #0]
   b4c92:	68a3      	ldr	r3, [r4, #8]
   b4c94:	2100      	movs	r1, #0
   b4c96:	54d1      	strb	r1, [r2, r3]
    return *this;
   b4c98:	e7f2      	b.n	b4c80 <_ZN6String4copyEPKcj+0x18>

000b4c9a <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b4c9a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4c9c:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b4c9e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4ca2:	4604      	mov	r4, r0
    len = 0;
   b4ca4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4ca6:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b4ca8:	b141      	cbz	r1, b4cbc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b4caa:	4608      	mov	r0, r1
   b4cac:	9101      	str	r1, [sp, #4]
   b4cae:	f001 fd5e 	bl	b676e <strlen>
   b4cb2:	9901      	ldr	r1, [sp, #4]
   b4cb4:	4602      	mov	r2, r0
   b4cb6:	4620      	mov	r0, r4
   b4cb8:	f7ff ffd6 	bl	b4c68 <_ZN6String4copyEPKcj>
}
   b4cbc:	4620      	mov	r0, r4
   b4cbe:	b002      	add	sp, #8
   b4cc0:	bd10      	pop	{r4, pc}

000b4cc2 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4cc2:	b570      	push	{r4, r5, r6, lr}
   b4cc4:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   b4cc6:	460e      	mov	r6, r1
   b4cc8:	b909      	cbnz	r1, b4cce <_ZN6String6concatEPKcj+0xc>
        return 0;
   b4cca:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   b4ccc:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b4cce:	b16a      	cbz	r2, b4cec <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b4cd0:	6884      	ldr	r4, [r0, #8]
   b4cd2:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b4cd4:	4621      	mov	r1, r4
   b4cd6:	f7ff ffb3 	bl	b4c40 <_ZN6String7reserveEj>
   b4cda:	2800      	cmp	r0, #0
   b4cdc:	d0f5      	beq.n	b4cca <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b4cde:	6828      	ldr	r0, [r5, #0]
   b4ce0:	68ab      	ldr	r3, [r5, #8]
   b4ce2:	4631      	mov	r1, r6
   b4ce4:	4418      	add	r0, r3
   b4ce6:	f001 fd1d 	bl	b6724 <strcpy>
    len = newlen;
   b4cea:	60ac      	str	r4, [r5, #8]
        return 1;
   b4cec:	2001      	movs	r0, #1
   b4cee:	e7ed      	b.n	b4ccc <_ZN6String6concatEPKcj+0xa>

000b4cf0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4cf0:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b4cf2:	2300      	movs	r3, #0
   b4cf4:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b4cf8:	2201      	movs	r2, #1
    buf[0] = c;
   b4cfa:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b4cfe:	a901      	add	r1, sp, #4
   b4d00:	f7ff ffdf 	bl	b4cc2 <_ZN6String6concatEPKcj>
}
   b4d04:	b003      	add	sp, #12
   b4d06:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d0a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4d0a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4d0c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d0e:	4604      	mov	r4, r0
      if (_M_manager)
   b4d10:	b113      	cbz	r3, b4d18 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d12:	2203      	movs	r2, #3
   b4d14:	4601      	mov	r1, r0
   b4d16:	4798      	blx	r3
    }
   b4d18:	4620      	mov	r0, r4
   b4d1a:	bd10      	pop	{r4, pc}

000b4d1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4d1c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4d1e:	6843      	ldr	r3, [r0, #4]
   b4d20:	3b01      	subs	r3, #1
    {
   b4d22:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4d24:	6043      	str	r3, [r0, #4]
   b4d26:	b963      	cbnz	r3, b4d42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4d28:	6803      	ldr	r3, [r0, #0]
   b4d2a:	689b      	ldr	r3, [r3, #8]
   b4d2c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d2e:	68a3      	ldr	r3, [r4, #8]
   b4d30:	3b01      	subs	r3, #1
   b4d32:	60a3      	str	r3, [r4, #8]
   b4d34:	b92b      	cbnz	r3, b4d42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4d36:	6823      	ldr	r3, [r4, #0]
   b4d38:	4620      	mov	r0, r4
   b4d3a:	68db      	ldr	r3, [r3, #12]
    }
   b4d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4d40:	4718      	bx	r3
    }
   b4d42:	bd10      	pop	{r4, pc}

000b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4d44:	b510      	push	{r4, lr}
   b4d46:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4d48:	6800      	ldr	r0, [r0, #0]
   b4d4a:	b108      	cbz	r0, b4d50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4d4c:	f7ff ffe6 	bl	b4d1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4d50:	4620      	mov	r0, r4
   b4d52:	bd10      	pop	{r4, pc}

000b4d54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4d54:	b513      	push	{r0, r1, r4, lr}
   b4d56:	460b      	mov	r3, r1
   b4d58:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d5a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4d5e:	466c      	mov	r4, sp
   b4d60:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4d64:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4d68:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4d70:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4d74:	b002      	add	sp, #8
   b4d76:	bd10      	pop	{r4, pc}

000b4d78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d78:	4802      	ldr	r0, [pc, #8]	; (b4d84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d7a:	2300      	movs	r3, #0
   b4d7c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d7e:	f7ff bc39 	b.w	b45f4 <os_mutex_recursive_create>
   b4d82:	bf00      	nop
   b4d84:	2003e690 	.word	0x2003e690

000b4d88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d8a:	4606      	mov	r6, r0
   b4d8c:	460d      	mov	r5, r1
  size_t n = 0;
   b4d8e:	188f      	adds	r7, r1, r2
   b4d90:	2400      	movs	r4, #0
  while (size--) {
   b4d92:	42bd      	cmp	r5, r7
   b4d94:	d00c      	beq.n	b4db0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4d96:	6833      	ldr	r3, [r6, #0]
   b4d98:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d9c:	689b      	ldr	r3, [r3, #8]
   b4d9e:	4630      	mov	r0, r6
   b4da0:	4798      	blx	r3
     if (chunk>=0)
   b4da2:	1e03      	subs	r3, r0, #0
   b4da4:	db01      	blt.n	b4daa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4da6:	441c      	add	r4, r3
  while (size--) {
   b4da8:	e7f3      	b.n	b4d92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4daa:	2c00      	cmp	r4, #0
   b4dac:	bf08      	it	eq
   b4dae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4db0:	4620      	mov	r0, r4
   b4db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4db4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4db4:	b513      	push	{r0, r1, r4, lr}
   b4db6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4db8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4dba:	b159      	cbz	r1, b4dd4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4dbc:	9101      	str	r1, [sp, #4]
   b4dbe:	f001 fcd6 	bl	b676e <strlen>
   b4dc2:	6823      	ldr	r3, [r4, #0]
   b4dc4:	9901      	ldr	r1, [sp, #4]
   b4dc6:	68db      	ldr	r3, [r3, #12]
   b4dc8:	4602      	mov	r2, r0
   b4dca:	4620      	mov	r0, r4
    }
   b4dcc:	b002      	add	sp, #8
   b4dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4dd2:	4718      	bx	r3
    }
   b4dd4:	b002      	add	sp, #8
   b4dd6:	bd10      	pop	{r4, pc}

000b4dd8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b4dd8:	b508      	push	{r3, lr}
  return write(str);
   b4dda:	f7ff ffeb 	bl	b4db4 <_ZN5Print5writeEPKc>
}
   b4dde:	bd08      	pop	{r3, pc}

000b4de0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b4de0:	6803      	ldr	r3, [r0, #0]
   b4de2:	689b      	ldr	r3, [r3, #8]
   b4de4:	4718      	bx	r3

000b4de6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4de6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4de8:	210d      	movs	r1, #13
{
   b4dea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4dec:	f7ff fff8 	bl	b4de0 <_ZN5Print5printEc>
  n += print('\n');
   b4df0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4df2:	4604      	mov	r4, r0
  n += print('\n');
   b4df4:	4628      	mov	r0, r5
   b4df6:	f7ff fff3 	bl	b4de0 <_ZN5Print5printEc>
  return n;
}
   b4dfa:	4420      	add	r0, r4
   b4dfc:	bd38      	pop	{r3, r4, r5, pc}

000b4dfe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4dfe:	b538      	push	{r3, r4, r5, lr}
   b4e00:	4605      	mov	r5, r0
  return write(str);
   b4e02:	f7ff ffd7 	bl	b4db4 <_ZN5Print5writeEPKc>
   b4e06:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4e08:	4628      	mov	r0, r5
   b4e0a:	f7ff ffec 	bl	b4de6 <_ZN5Print7printlnEv>
  return n;
}
   b4e0e:	4420      	add	r0, r4
   b4e10:	bd38      	pop	{r3, r4, r5, pc}

000b4e12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4e12:	b530      	push	{r4, r5, lr}
   b4e14:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4e16:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e18:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e1e:	bf98      	it	ls
   b4e20:	220a      	movls	r2, #10
   b4e22:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e24:	460d      	mov	r5, r1
   b4e26:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e2a:	fb01 5312 	mls	r3, r1, r2, r5
   b4e2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e32:	2b09      	cmp	r3, #9
   b4e34:	bf94      	ite	ls
   b4e36:	3330      	addls	r3, #48	; 0x30
   b4e38:	3337      	addhi	r3, #55	; 0x37
   b4e3a:	b2db      	uxtb	r3, r3
  } while(n);
   b4e3c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e3e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4e42:	d9ef      	bls.n	b4e24 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4e44:	4621      	mov	r1, r4
   b4e46:	f7ff ffb5 	bl	b4db4 <_ZN5Print5writeEPKc>
}
   b4e4a:	b00b      	add	sp, #44	; 0x2c
   b4e4c:	bd30      	pop	{r4, r5, pc}

000b4e4e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4e52:	b086      	sub	sp, #24
   b4e54:	af00      	add	r7, sp, #0
   b4e56:	4605      	mov	r5, r0
   b4e58:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4e5a:	1d38      	adds	r0, r7, #4
   b4e5c:	2114      	movs	r1, #20
{
   b4e5e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4e60:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4e62:	f7ff fdbd 	bl	b49e0 <vsnprintf>

    if (n<bufsize)
   b4e66:	2813      	cmp	r0, #19
   b4e68:	d80e      	bhi.n	b4e88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4e6a:	1d39      	adds	r1, r7, #4
   b4e6c:	4628      	mov	r0, r5
   b4e6e:	f7ff ffa1 	bl	b4db4 <_ZN5Print5writeEPKc>
   b4e72:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4e74:	b11e      	cbz	r6, b4e7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4e76:	4628      	mov	r0, r5
   b4e78:	f7ff ffb5 	bl	b4de6 <_ZN5Print7printlnEv>
   b4e7c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4e7e:	4620      	mov	r0, r4
   b4e80:	3718      	adds	r7, #24
   b4e82:	46bd      	mov	sp, r7
   b4e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4e88:	f100 0308 	add.w	r3, r0, #8
   b4e8c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4e90:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4e92:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4e96:	4622      	mov	r2, r4
   b4e98:	1c41      	adds	r1, r0, #1
   b4e9a:	683b      	ldr	r3, [r7, #0]
   b4e9c:	4668      	mov	r0, sp
   b4e9e:	f7ff fd9f 	bl	b49e0 <vsnprintf>
  return write(str);
   b4ea2:	4669      	mov	r1, sp
   b4ea4:	4628      	mov	r0, r5
   b4ea6:	f7ff ff85 	bl	b4db4 <_ZN5Print5writeEPKc>
   b4eaa:	4604      	mov	r4, r0
   b4eac:	46c5      	mov	sp, r8
   b4eae:	e7e1      	b.n	b4e74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4eb0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4eb0:	b510      	push	{r4, lr}
   b4eb2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4eb4:	f7ff fb86 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4eb8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4eba:	6823      	ldr	r3, [r4, #0]
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	695b      	ldr	r3, [r3, #20]
   b4ec0:	4798      	blx	r3
    if (c >= 0) return c;
   b4ec2:	2800      	cmp	r0, #0
   b4ec4:	da08      	bge.n	b4ed8 <_ZN6Stream9timedReadEv+0x28>
   b4ec6:	f7ff fb7d 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4eca:	68e3      	ldr	r3, [r4, #12]
   b4ecc:	1ac0      	subs	r0, r0, r3
   b4ece:	68a3      	ldr	r3, [r4, #8]
   b4ed0:	4298      	cmp	r0, r3
   b4ed2:	d3f2      	bcc.n	b4eba <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4ed4:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4ed8:	bd10      	pop	{r4, pc}

000b4eda <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   b4eda:	6081      	str	r1, [r0, #8]
}
   b4edc:	4770      	bx	lr
	...

000b4ee0 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b4ee0:	b538      	push	{r3, r4, r5, lr}
   b4ee2:	460d      	mov	r5, r1
  String ret;
   b4ee4:	4907      	ldr	r1, [pc, #28]	; (b4f04 <_ZN6Stream10readStringEv+0x24>)
{
   b4ee6:	4604      	mov	r4, r0
  String ret;
   b4ee8:	f7ff fed7 	bl	b4c9a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b4eec:	4628      	mov	r0, r5
   b4eee:	f7ff ffdf 	bl	b4eb0 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b4ef2:	2800      	cmp	r0, #0
   b4ef4:	db04      	blt.n	b4f00 <_ZN6Stream10readStringEv+0x20>

    // if there's not enough memory for the concatenated value, the string
    // will be left unchanged (but this isn't signalled in any way)
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
    String & operator += (char c)           {concat(c); return (*this);}
   b4ef6:	b2c1      	uxtb	r1, r0
   b4ef8:	4620      	mov	r0, r4
   b4efa:	f7ff fef9 	bl	b4cf0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b4efe:	e7f5      	b.n	b4eec <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b4f00:	4620      	mov	r0, r4
   b4f02:	bd38      	pop	{r3, r4, r5, pc}
   b4f04:	000b686d 	.word	0x000b686d

000b4f08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4f08:	4b01      	ldr	r3, [pc, #4]	; (b4f10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4f0a:	4a02      	ldr	r2, [pc, #8]	; (b4f14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4f0c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4f0e:	4770      	bx	lr
   b4f10:	2003e694 	.word	0x2003e694
   b4f14:	000b69b2 	.word	0x000b69b2

000b4f18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b4f18:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4f1a:	2000      	movs	r0, #0
   b4f1c:	f7ff fd30 	bl	b4980 <spark_sync_time_pending>
   b4f20:	b128      	cbz	r0, b4f2e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f22:	f7ff fd1d 	bl	b4960 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4f26:	f080 0001 	eor.w	r0, r0, #1
   b4f2a:	b2c0      	uxtb	r0, r0
    }
   b4f2c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4f2e:	2001      	movs	r0, #1
   b4f30:	e7fc      	b.n	b4f2c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4f32 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b4f32:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b4f34:	2000      	movs	r0, #0
   b4f36:	f7ff fb4d 	bl	b45d4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b4f3a:	4604      	mov	r4, r0
   b4f3c:	b9a0      	cbnz	r0, b4f68 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b4f3e:	f7ff fc49 	bl	b47d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b4f42:	2801      	cmp	r0, #1
   b4f44:	d110      	bne.n	b4f68 <_ZN9TimeClass7isValidEv+0x36>
   b4f46:	4620      	mov	r0, r4
   b4f48:	f7ff fc74 	bl	b4834 <system_thread_get_state>
   b4f4c:	b960      	cbnz	r0, b4f68 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b4f4e:	f7ff ffe3 	bl	b4f18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4f52:	b910      	cbnz	r0, b4f5a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b4f54:	f7ff fcf4 	bl	b4940 <spark_process>
        while (_while() && !_condition()) {
   b4f58:	e7f9      	b.n	b4f4e <_ZN9TimeClass7isValidEv+0x1c>
   b4f5a:	f7ff ffdd 	bl	b4f18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b4f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b4f62:	2000      	movs	r0, #0
   b4f64:	f7ff bb36 	b.w	b45d4 <hal_rtc_time_is_valid>
}
   b4f68:	4620      	mov	r0, r4
   b4f6a:	bd10      	pop	{r4, pc}

000b4f6c <_ZN9TimeClass3nowEv>:
{
   b4f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b4f6e:	f7ff ffe0 	bl	b4f32 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b4f72:	2210      	movs	r2, #16
   b4f74:	2100      	movs	r1, #0
   b4f76:	4668      	mov	r0, sp
   b4f78:	f001 fb9e 	bl	b66b8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b4f7c:	2100      	movs	r1, #0
   b4f7e:	4668      	mov	r0, sp
   b4f80:	f7ff fb30 	bl	b45e4 <hal_rtc_get_time>
}
   b4f84:	9800      	ldr	r0, [sp, #0]
   b4f86:	b005      	add	sp, #20
   b4f88:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4f8c:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4f8e:	681a      	ldr	r2, [r3, #0]
   b4f90:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4f92:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4f94:	4770      	bx	lr
   b4f96:	bf00      	nop
   b4f98:	2003e558 	.word	0x2003e558
   b4f9c:	2003e698 	.word	0x2003e698

000b4fa0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4fa0:	2100      	movs	r1, #0
   b4fa2:	f7ff bc27 	b.w	b47f4 <system_delay_ms>
	...

000b4fa8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4fa8:	4b01      	ldr	r3, [pc, #4]	; (b4fb0 <_GLOBAL__sub_I_RGB+0x8>)
   b4faa:	2200      	movs	r2, #0
   b4fac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4fae:	4770      	bx	lr
   b4fb0:	2003e69c 	.word	0x2003e69c

000b4fb4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b4fb4:	6800      	ldr	r0, [r0, #0]
   b4fb6:	f000 bd4d 	b.w	b5a54 <_ZN7TwoWire4lockEv>

000b4fba <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b4fba:	b510      	push	{r4, lr}
   b4fbc:	4604      	mov	r4, r0
      lock_(_lock) {
   b4fbe:	6001      	str	r1, [r0, #0]
   b4fc0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b4fc2:	b10a      	cbz	r2, b4fc8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b4fc4:	f7ff fff6 	bl	b4fb4 <_ZN9FuelGauge4lockEv>
}
   b4fc8:	4620      	mov	r0, r4
   b4fca:	bd10      	pop	{r4, pc}

000b4fcc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b4fcc:	b513      	push	{r0, r1, r4, lr}
   b4fce:	4604      	mov	r4, r0
   b4fd0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b4fd2:	f000 ff13 	bl	b5dfc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b4fd6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b4fd8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b4fda:	4620      	mov	r0, r4
   b4fdc:	f7ff ffed 	bl	b4fba <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b4fe0:	4620      	mov	r0, r4
   b4fe2:	b002      	add	sp, #8
   b4fe4:	bd10      	pop	{r4, pc}
	...

000b4fe8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4fe8:	4b01      	ldr	r3, [pc, #4]	; (b4ff0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4fea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4fec:	4770      	bx	lr
   b4fee:	bf00      	nop
   b4ff0:	2003e55c 	.word	0x2003e55c

000b4ff4 <serialEventRun>:
{
   b4ff4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4ff6:	4b0b      	ldr	r3, [pc, #44]	; (b5024 <serialEventRun+0x30>)
   b4ff8:	b143      	cbz	r3, b500c <serialEventRun+0x18>
   b4ffa:	f000 fbff 	bl	b57fc <_Z16_fetch_usbserialv>
   b4ffe:	6803      	ldr	r3, [r0, #0]
   b5000:	691b      	ldr	r3, [r3, #16]
   b5002:	4798      	blx	r3
   b5004:	2800      	cmp	r0, #0
   b5006:	dd01      	ble.n	b500c <serialEventRun+0x18>
        serialEvent();
   b5008:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b500c:	4b06      	ldr	r3, [pc, #24]	; (b5028 <serialEventRun+0x34>)
   b500e:	b143      	cbz	r3, b5022 <serialEventRun+0x2e>
   b5010:	f000 fe76 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b5014:	6803      	ldr	r3, [r0, #0]
   b5016:	691b      	ldr	r3, [r3, #16]
   b5018:	4798      	blx	r3
   b501a:	2800      	cmp	r0, #0
   b501c:	dd01      	ble.n	b5022 <serialEventRun+0x2e>
        serialEvent1();
   b501e:	f3af 8000 	nop.w
}
   b5022:	bd08      	pop	{r3, pc}
	...

000b502c <_post_loop>:
{
   b502c:	b508      	push	{r3, lr}
	serialEventRun();
   b502e:	f7ff ffe1 	bl	b4ff4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5032:	f7ff fac7 	bl	b45c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5036:	4b01      	ldr	r3, [pc, #4]	; (b503c <_post_loop+0x10>)
   b5038:	6018      	str	r0, [r3, #0]
}
   b503a:	bd08      	pop	{r3, pc}
   b503c:	2003e728 	.word	0x2003e728

000b5040 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5040:	4805      	ldr	r0, [pc, #20]	; (b5058 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5042:	4a06      	ldr	r2, [pc, #24]	; (b505c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5044:	4906      	ldr	r1, [pc, #24]	; (b5060 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5046:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5048:	1a12      	subs	r2, r2, r0
   b504a:	f001 fb27 	bl	b669c <memcpy>
    __backup_sram_signature = signature;
   b504e:	4b05      	ldr	r3, [pc, #20]	; (b5064 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5050:	4a05      	ldr	r2, [pc, #20]	; (b5068 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5052:	601a      	str	r2, [r3, #0]
}
   b5054:	bd08      	pop	{r3, pc}
   b5056:	bf00      	nop
   b5058:	2003f400 	.word	0x2003f400
   b505c:	2003f404 	.word	0x2003f404
   b5060:	000b6be4 	.word	0x000b6be4
   b5064:	2003f400 	.word	0x2003f400
   b5068:	9a271c1e 	.word	0x9a271c1e

000b506c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b506c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b506e:	2300      	movs	r3, #0
   b5070:	9300      	str	r3, [sp, #0]
   b5072:	461a      	mov	r2, r3
   b5074:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5078:	f7ff fbee 	bl	b4858 <system_ctrl_set_result>
}
   b507c:	b003      	add	sp, #12
   b507e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5084 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5084:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5086:	8843      	ldrh	r3, [r0, #2]
   b5088:	2b0a      	cmp	r3, #10
   b508a:	d008      	beq.n	b509e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b508c:	2b50      	cmp	r3, #80	; 0x50
   b508e:	d10b      	bne.n	b50a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5090:	4b09      	ldr	r3, [pc, #36]	; (b50b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5092:	681b      	ldr	r3, [r3, #0]
   b5094:	b14b      	cbz	r3, b50aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5096:	b003      	add	sp, #12
   b5098:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b509c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b509e:	f7ff ffe5 	bl	b506c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b50a2:	b003      	add	sp, #12
   b50a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b50a8:	2300      	movs	r3, #0
   b50aa:	9300      	str	r3, [sp, #0]
   b50ac:	461a      	mov	r2, r3
   b50ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b50b2:	f7ff fbd1 	bl	b4858 <system_ctrl_set_result>
}
   b50b6:	e7f4      	b.n	b50a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b50b8:	2003e6b0 	.word	0x2003e6b0

000b50bc <module_user_init_hook>:
{
   b50bc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b50be:	4812      	ldr	r0, [pc, #72]	; (b5108 <module_user_init_hook+0x4c>)
   b50c0:	2100      	movs	r1, #0
   b50c2:	f7ff fcad 	bl	b4a20 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b50c6:	4b11      	ldr	r3, [pc, #68]	; (b510c <module_user_init_hook+0x50>)
   b50c8:	681a      	ldr	r2, [r3, #0]
   b50ca:	4b11      	ldr	r3, [pc, #68]	; (b5110 <module_user_init_hook+0x54>)
   b50cc:	429a      	cmp	r2, r3
   b50ce:	4b11      	ldr	r3, [pc, #68]	; (b5114 <module_user_init_hook+0x58>)
   b50d0:	bf0c      	ite	eq
   b50d2:	2201      	moveq	r2, #1
   b50d4:	2200      	movne	r2, #0
   b50d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b50d8:	d001      	beq.n	b50de <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b50da:	f7ff ffb1 	bl	b5040 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b50de:	f7ff fa69 	bl	b45b4 <HAL_RNG_GetRandomNumber>
   b50e2:	4604      	mov	r4, r0
    srand(seed);
   b50e4:	f001 faf0 	bl	b66c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b50e8:	4b0b      	ldr	r3, [pc, #44]	; (b5118 <module_user_init_hook+0x5c>)
   b50ea:	b113      	cbz	r3, b50f2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b50ec:	4620      	mov	r0, r4
   b50ee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b50f2:	2100      	movs	r1, #0
   b50f4:	4808      	ldr	r0, [pc, #32]	; (b5118 <module_user_init_hook+0x5c>)
   b50f6:	f7ff fc4b 	bl	b4990 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b50fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b50fe:	4807      	ldr	r0, [pc, #28]	; (b511c <module_user_init_hook+0x60>)
   b5100:	2100      	movs	r1, #0
   b5102:	f7ff bb9f 	b.w	b4844 <system_ctrl_set_app_request_handler>
   b5106:	bf00      	nop
   b5108:	000b4fe9 	.word	0x000b4fe9
   b510c:	2003f400 	.word	0x2003f400
   b5110:	9a271c1e 	.word	0x9a271c1e
   b5114:	2003e6ac 	.word	0x2003e6ac
   b5118:	00000000 	.word	0x00000000
   b511c:	000b5085 	.word	0x000b5085

000b5120 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5120:	4770      	bx	lr

000b5122 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5122:	2000      	movs	r0, #0
   b5124:	4770      	bx	lr

000b5126 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5126:	b510      	push	{r4, lr}
   b5128:	2110      	movs	r1, #16
   b512a:	4604      	mov	r4, r0
   b512c:	f7fe ffb7 	bl	b409e <_ZdlPvj>
   b5130:	4620      	mov	r0, r4
   b5132:	bd10      	pop	{r4, pc}

000b5134 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5134:	b508      	push	{r3, lr}
      { delete this; }
   b5136:	f7ff fff6 	bl	b5126 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b513a:	bd08      	pop	{r3, pc}

000b513c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b513c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b513e:	2200      	movs	r2, #0
   b5140:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5144:	6002      	str	r2, [r0, #0]
   b5146:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5148:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b514a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b514c:	680c      	ldr	r4, [r1, #0]
   b514e:	8085      	strh	r5, [r0, #4]
   b5150:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5152:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5154:	bd30      	pop	{r4, r5, pc}

000b5156 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5156:	b510      	push	{r4, lr}
   b5158:	4604      	mov	r4, r0
    free((void*)msg_);
   b515a:	6800      	ldr	r0, [r0, #0]
   b515c:	f7ff fc28 	bl	b49b0 <free>
}
   b5160:	4620      	mov	r0, r4
   b5162:	bd10      	pop	{r4, pc}

000b5164 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5164:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5166:	68c4      	ldr	r4, [r0, #12]
   b5168:	b1f4      	cbz	r4, b51a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b516a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b516c:	2b02      	cmp	r3, #2
   b516e:	d103      	bne.n	b5178 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5170:	f104 000c 	add.w	r0, r4, #12
   b5174:	f7ff ffef 	bl	b5156 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5178:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b517a:	b135      	cbz	r5, b518a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b517c:	4628      	mov	r0, r5
   b517e:	f7ff fdc4 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
   b5182:	2110      	movs	r1, #16
   b5184:	4628      	mov	r0, r5
   b5186:	f7fe ff8a 	bl	b409e <_ZdlPvj>
   b518a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b518c:	b135      	cbz	r5, b519c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b518e:	4628      	mov	r0, r5
   b5190:	f7ff fdbb 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
   b5194:	2110      	movs	r1, #16
   b5196:	4628      	mov	r0, r5
   b5198:	f7fe ff81 	bl	b409e <_ZdlPvj>
   b519c:	4620      	mov	r0, r4
   b519e:	2114      	movs	r1, #20
   b51a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b51a4:	f7fe bf7b 	b.w	b409e <_ZdlPvj>
   b51a8:	bd38      	pop	{r3, r4, r5, pc}

000b51aa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51aa:	680b      	ldr	r3, [r1, #0]
   b51ac:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b51ae:	684b      	ldr	r3, [r1, #4]
   b51b0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b51b2:	b113      	cbz	r3, b51ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b51b4:	685a      	ldr	r2, [r3, #4]
   b51b6:	3201      	adds	r2, #1
   b51b8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51ba:	4770      	bx	lr

000b51bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b51bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b51be:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b51c0:	4668      	mov	r0, sp
   b51c2:	460d      	mov	r5, r1
   b51c4:	f7ff fff1 	bl	b51aa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51c8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b51ca:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51cc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b51ce:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b51d0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b51d2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b51d4:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b51d6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b51d8:	f7ff fdb4 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b51dc:	b135      	cbz	r5, b51ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b51de:	1d28      	adds	r0, r5, #4
   b51e0:	f7ff fdb0 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51e4:	2108      	movs	r1, #8
   b51e6:	4628      	mov	r0, r5
   b51e8:	f7fe ff59 	bl	b409e <_ZdlPvj>
        return p;
    }
   b51ec:	4620      	mov	r0, r4
   b51ee:	b003      	add	sp, #12
   b51f0:	bd30      	pop	{r4, r5, pc}

000b51f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b51f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b51f4:	b510      	push	{r4, lr}
      if (_M_empty())
   b51f6:	b90a      	cbnz	r2, b51fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b51f8:	f000 fe28 	bl	b5e4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b51fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5200:	68c3      	ldr	r3, [r0, #12]
   b5202:	4718      	bx	r3

000b5204 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5204:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5206:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5208:	f100 0110 	add.w	r1, r0, #16
   b520c:	f7ff fff1 	bl	b51f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5210:	bd08      	pop	{r3, pc}

000b5212 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5212:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5214:	b510      	push	{r4, lr}
      if (_M_empty())
   b5216:	b90a      	cbnz	r2, b521c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5218:	f000 fe18 	bl	b5e4c <_ZSt25__throw_bad_function_callv>
    }
   b521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5220:	68c3      	ldr	r3, [r0, #12]
   b5222:	4718      	bx	r3

000b5224 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5224:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5226:	6800      	ldr	r0, [r0, #0]
   b5228:	f100 0110 	add.w	r1, r0, #16
   b522c:	f7ff fff1 	bl	b5212 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5230:	bd08      	pop	{r3, pc}
	...

000b5234 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5234:	b538      	push	{r3, r4, r5, lr}
   b5236:	2300      	movs	r3, #0
   b5238:	4604      	mov	r4, r0
   b523a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b523c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b523e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5240:	f7fe ff29 	bl	b4096 <_Znwj>
   b5244:	b128      	cbz	r0, b5252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5246:	2301      	movs	r3, #1
   b5248:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b524c:	4b02      	ldr	r3, [pc, #8]	; (b5258 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b524e:	6003      	str	r3, [r0, #0]
   b5250:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5252:	6020      	str	r0, [r4, #0]
	}
   b5254:	4620      	mov	r0, r4
   b5256:	bd38      	pop	{r3, r4, r5, pc}
   b5258:	000b69dc 	.word	0x000b69dc

000b525c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b525c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b525e:	2300      	movs	r3, #0
   b5260:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5262:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5264:	4604      	mov	r4, r0
   b5266:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5268:	b12b      	cbz	r3, b5276 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b526a:	2202      	movs	r2, #2
   b526c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b526e:	68eb      	ldr	r3, [r5, #12]
   b5270:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5272:	68ab      	ldr	r3, [r5, #8]
   b5274:	60a3      	str	r3, [r4, #8]
    }
   b5276:	4620      	mov	r0, r4
   b5278:	bd38      	pop	{r3, r4, r5, pc}
	...

000b527c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b527c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b527e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b5280:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5282:	4668      	mov	r0, sp
   b5284:	f7ff ff5a 	bl	b513c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5288:	f04f 0302 	mov.w	r3, #2
   b528c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5290:	2a00      	cmp	r2, #0
   b5292:	d103      	bne.n	b529c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5294:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5298:	2900      	cmp	r1, #0
   b529a:	d1f7      	bne.n	b528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b529c:	d125      	bne.n	b52ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b529e:	f104 050c 	add.w	r5, r4, #12
   b52a2:	4669      	mov	r1, sp
   b52a4:	4628      	mov	r0, r5
   b52a6:	f7ff ff49 	bl	b513c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b52aa:	f3bf 8f5b 	dmb	ish
   b52ae:	2301      	movs	r3, #1
   b52b0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b52b2:	2000      	movs	r0, #0
   b52b4:	f104 0308 	add.w	r3, r4, #8
   b52b8:	f3bf 8f5b 	dmb	ish
   b52bc:	e853 6f00 	ldrex	r6, [r3]
   b52c0:	e843 0200 	strex	r2, r0, [r3]
   b52c4:	2a00      	cmp	r2, #0
   b52c6:	d1f9      	bne.n	b52bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b52c8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b52cc:	b16e      	cbz	r6, b52ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b52ce:	f7ff faa1 	bl	b4814 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b52d2:	b178      	cbz	r0, b52f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b52d4:	4629      	mov	r1, r5
   b52d6:	4630      	mov	r0, r6
   b52d8:	f7ff ff8b 	bl	b51f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b52dc:	4630      	mov	r0, r6
   b52de:	f7ff fd14 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b52e2:	2110      	movs	r1, #16
   b52e4:	4630      	mov	r0, r6
   b52e6:	f7fe feda 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b52ea:	4668      	mov	r0, sp
   b52ec:	f7ff ff33 	bl	b5156 <_ZN8particle5ErrorD1Ev>
    }
   b52f0:	b009      	add	sp, #36	; 0x24
   b52f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b52f4:	4631      	mov	r1, r6
   b52f6:	a802      	add	r0, sp, #8
   b52f8:	f7ff ffb0 	bl	b525c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b52fc:	68e0      	ldr	r0, [r4, #12]
   b52fe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5302:	b108      	cbz	r0, b5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5304:	f001 fa16 	bl	b6734 <strdup>
        type_(type) {
   b5308:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b530a:	2010      	movs	r0, #16
   b530c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5310:	f7fe fec1 	bl	b4096 <_Znwj>
   b5314:	4605      	mov	r5, r0
   b5316:	b1e8      	cbz	r0, b5354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5318:	2700      	movs	r7, #0
   b531a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b531c:	2018      	movs	r0, #24
   b531e:	f7fe feba 	bl	b4096 <_Znwj>
   b5322:	4604      	mov	r4, r0
   b5324:	b188      	cbz	r0, b534a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5326:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5328:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b532a:	a802      	add	r0, sp, #8
   b532c:	f7ff fd12 	bl	b4d54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5330:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5332:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5334:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5336:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5338:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b533a:	a906      	add	r1, sp, #24
   b533c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b533e:	60e3      	str	r3, [r4, #12]
   b5340:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5344:	9205      	str	r2, [sp, #20]
   b5346:	f7ff fef9 	bl	b513c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b534a:	4b08      	ldr	r3, [pc, #32]	; (b536c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b534c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b534e:	4b08      	ldr	r3, [pc, #32]	; (b5370 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5350:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5352:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5354:	a806      	add	r0, sp, #24
   b5356:	f7ff fefe 	bl	b5156 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b535a:	a802      	add	r0, sp, #8
   b535c:	f7ff fcd5 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5360:	2200      	movs	r2, #0
   b5362:	4629      	mov	r1, r5
   b5364:	4803      	ldr	r0, [pc, #12]	; (b5374 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5366:	f7ff fa5d 	bl	b4824 <application_thread_invoke>
   b536a:	e7b7      	b.n	b52dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b536c:	000b5205 	.word	0x000b5205
   b5370:	000b5489 	.word	0x000b5489
   b5374:	000b5999 	.word	0x000b5999

000b5378 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b537c:	b08b      	sub	sp, #44	; 0x2c
   b537e:	4605      	mov	r5, r0
   b5380:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5384:	460f      	mov	r7, r1
   b5386:	4690      	mov	r8, r2
   b5388:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b538a:	f7ff fae9 	bl	b4960 <spark_cloud_flag_connected>
   b538e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5390:	4683      	mov	fp, r0
   b5392:	bb38      	cbnz	r0, b53e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5394:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5398:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b539a:	a905      	add	r1, sp, #20
   b539c:	4630      	mov	r0, r6
   b539e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b53a2:	f7ff fecb 	bl	b513c <_ZN8particle5ErrorC1EOS0_>
   b53a6:	2014      	movs	r0, #20
   b53a8:	f7fe fe75 	bl	b4096 <_Znwj>
   b53ac:	4604      	mov	r4, r0
   b53ae:	b148      	cbz	r0, b53c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b53b0:	2302      	movs	r3, #2
   b53b2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b53b4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b53b6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b53ba:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b53bc:	4631      	mov	r1, r6
   b53be:	300c      	adds	r0, #12
   b53c0:	f7ff febc 	bl	b513c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b53c4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b53c6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b53c8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b53cc:	f7ff ff32 	bl	b5234 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b53d0:	4630      	mov	r0, r6
   b53d2:	f7ff fec0 	bl	b5156 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b53d6:	a805      	add	r0, sp, #20
   b53d8:	f7ff febd 	bl	b5156 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b53dc:	4628      	mov	r0, r5
   b53de:	b00b      	add	sp, #44	; 0x2c
   b53e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b53e4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b53e6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b53e8:	2014      	movs	r0, #20
   b53ea:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b53ee:	9307      	str	r3, [sp, #28]
   b53f0:	f7fe fe51 	bl	b4096 <_Znwj>
   b53f4:	4601      	mov	r1, r0
   b53f6:	b118      	cbz	r0, b5400 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b53f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b53fc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b53fe:	7044      	strb	r4, [r0, #1]
   b5400:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5402:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5404:	f7ff ff16 	bl	b5234 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5408:	4b1e      	ldr	r3, [pc, #120]	; (b5484 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b540a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b540c:	2008      	movs	r0, #8
   b540e:	f7fe fe42 	bl	b4096 <_Znwj>
   b5412:	4604      	mov	r4, r0
   b5414:	b110      	cbz	r0, b541c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5416:	a903      	add	r1, sp, #12
   b5418:	f7ff fec7 	bl	b51aa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b541c:	9600      	str	r6, [sp, #0]
   b541e:	fa5f f38a 	uxtb.w	r3, sl
   b5422:	464a      	mov	r2, r9
   b5424:	4641      	mov	r1, r8
   b5426:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5428:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b542a:	f7ff faa1 	bl	b4970 <spark_send_event>
   b542e:	b9b8      	cbnz	r0, b5460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5430:	9b03      	ldr	r3, [sp, #12]
   b5432:	785b      	ldrb	r3, [r3, #1]
   b5434:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5438:	b993      	cbnz	r3, b5460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b543a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b543e:	a905      	add	r1, sp, #20
   b5440:	a803      	add	r0, sp, #12
   b5442:	9205      	str	r2, [sp, #20]
   b5444:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5448:	f7ff ff18 	bl	b527c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b544c:	a805      	add	r0, sp, #20
   b544e:	f7ff fe82 	bl	b5156 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5452:	a805      	add	r0, sp, #20
   b5454:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5456:	f7ff feb1 	bl	b51bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b545a:	a806      	add	r0, sp, #24
   b545c:	f7ff fc72 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5460:	a903      	add	r1, sp, #12
   b5462:	a805      	add	r0, sp, #20
   b5464:	f7ff fea1 	bl	b51aa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5468:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b546a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b546c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b546e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5470:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5472:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5474:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5476:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5478:	f7ff fc64 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b547c:	a804      	add	r0, sp, #16
   b547e:	f7ff fc61 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5482:	e7ab      	b.n	b53dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5484:	000b5505 	.word	0x000b5505

000b5488 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5488:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b548c:	4605      	mov	r5, r0
	switch (__op)
   b548e:	d103      	bne.n	b5498 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5490:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5492:	6003      	str	r3, [r0, #0]
      }
   b5494:	2000      	movs	r0, #0
   b5496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5498:	2a02      	cmp	r2, #2
   b549a:	d010      	beq.n	b54be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b549c:	2a03      	cmp	r2, #3
   b549e:	d1f9      	bne.n	b5494 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b54a0:	6804      	ldr	r4, [r0, #0]
   b54a2:	2c00      	cmp	r4, #0
   b54a4:	d0f6      	beq.n	b5494 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b54a6:	f104 0010 	add.w	r0, r4, #16
   b54aa:	f7ff fe54 	bl	b5156 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b54ae:	4620      	mov	r0, r4
   b54b0:	f7ff fc2b 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b54b4:	2118      	movs	r1, #24
   b54b6:	4620      	mov	r0, r4
   b54b8:	f7fe fdf1 	bl	b409e <_ZdlPvj>
   b54bc:	e7ea      	b.n	b5494 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b54be:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b54c0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b54c2:	f7fe fde8 	bl	b4096 <_Znwj>
   b54c6:	4604      	mov	r4, r0
   b54c8:	b150      	cbz	r0, b54e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b54ca:	4631      	mov	r1, r6
   b54cc:	f7ff fec6 	bl	b525c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b54d0:	6930      	ldr	r0, [r6, #16]
   b54d2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b54d6:	b108      	cbz	r0, b54dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b54d8:	f001 f92c 	bl	b6734 <strdup>
        type_(type) {
   b54dc:	6120      	str	r0, [r4, #16]
   b54de:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b54e0:	602c      	str	r4, [r5, #0]
	}
   b54e2:	e7d7      	b.n	b5494 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b54e4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b54e4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b54e6:	2300      	movs	r3, #0
   b54e8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b54ea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b54ec:	4604      	mov	r4, r0
   b54ee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b54f0:	b12b      	cbz	r3, b54fe <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b54f2:	2202      	movs	r2, #2
   b54f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b54f6:	68eb      	ldr	r3, [r5, #12]
   b54f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b54fa:	68ab      	ldr	r3, [r5, #8]
   b54fc:	60a3      	str	r3, [r4, #8]
    }
   b54fe:	4620      	mov	r0, r4
   b5500:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5504:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5506:	b089      	sub	sp, #36	; 0x24
   b5508:	4604      	mov	r4, r0
   b550a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b550c:	a801      	add	r0, sp, #4
   b550e:	4611      	mov	r1, r2
   b5510:	f7ff fe54 	bl	b51bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5514:	b1a4      	cbz	r4, b5540 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5516:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5518:	b11d      	cbz	r5, b5522 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b551a:	4628      	mov	r0, r5
   b551c:	f001 f90a 	bl	b6734 <strdup>
   b5520:	4605      	mov	r5, r0
   b5522:	a801      	add	r0, sp, #4
   b5524:	a903      	add	r1, sp, #12
        type_(type) {
   b5526:	9503      	str	r5, [sp, #12]
   b5528:	f8ad 4010 	strh.w	r4, [sp, #16]
   b552c:	f7ff fea6 	bl	b527c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5530:	a803      	add	r0, sp, #12
   b5532:	f7ff fe10 	bl	b5156 <_ZN8particle5ErrorD1Ev>
   b5536:	a802      	add	r0, sp, #8
   b5538:	f7ff fc04 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b553c:	b009      	add	sp, #36	; 0x24
   b553e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5540:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5542:	2301      	movs	r3, #1
   b5544:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5548:	2a00      	cmp	r2, #0
   b554a:	d103      	bne.n	b5554 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b554c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5550:	2900      	cmp	r1, #0
   b5552:	d1f7      	bne.n	b5544 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5554:	d1ef      	bne.n	b5536 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5556:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5558:	f3bf 8f5b 	dmb	ish
   b555c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b555e:	1d2b      	adds	r3, r5, #4
   b5560:	f3bf 8f5b 	dmb	ish
   b5564:	e853 6f00 	ldrex	r6, [r3]
   b5568:	e843 4200 	strex	r2, r4, [r3]
   b556c:	2a00      	cmp	r2, #0
   b556e:	d1f9      	bne.n	b5564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5570:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5574:	2e00      	cmp	r6, #0
   b5576:	d0de      	beq.n	b5536 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5578:	4620      	mov	r0, r4
   b557a:	f7ff f94b 	bl	b4814 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b557e:	4607      	mov	r7, r0
   b5580:	b160      	cbz	r0, b559c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5582:	f105 010c 	add.w	r1, r5, #12
   b5586:	4630      	mov	r0, r6
   b5588:	f7ff fe43 	bl	b5212 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b558c:	4630      	mov	r0, r6
   b558e:	f7ff fbbc 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5592:	2110      	movs	r1, #16
   b5594:	4630      	mov	r0, r6
   b5596:	f7fe fd82 	bl	b409e <_ZdlPvj>
   b559a:	e7cc      	b.n	b5536 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b559c:	4631      	mov	r1, r6
   b559e:	a803      	add	r0, sp, #12
   b55a0:	f7ff ffa0 	bl	b54e4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b55a4:	7b2b      	ldrb	r3, [r5, #12]
   b55a6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b55aa:	2010      	movs	r0, #16
   b55ac:	f7fe fd73 	bl	b4096 <_Znwj>
   b55b0:	4605      	mov	r5, r0
   b55b2:	b1d0      	cbz	r0, b55ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b55b4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55b6:	2014      	movs	r0, #20
   b55b8:	f7fe fd6d 	bl	b4096 <_Znwj>
   b55bc:	4604      	mov	r4, r0
   b55be:	b178      	cbz	r0, b55e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b55c0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b55c2:	4601      	mov	r1, r0
   b55c4:	a803      	add	r0, sp, #12
   b55c6:	f7ff fbc5 	bl	b4d54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b55cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b55ce:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55d0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b55d2:	9205      	str	r2, [sp, #20]
   b55d4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b55d6:	60e3      	str	r3, [r4, #12]
   b55d8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b55dc:	9206      	str	r2, [sp, #24]
   b55de:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b55e0:	4b06      	ldr	r3, [pc, #24]	; (b55fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b55e2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b55e4:	4b06      	ldr	r3, [pc, #24]	; (b5600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55e6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b55e8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b55ea:	a803      	add	r0, sp, #12
   b55ec:	f7ff fb8d 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b55f0:	2200      	movs	r2, #0
   b55f2:	4629      	mov	r1, r5
   b55f4:	4803      	ldr	r0, [pc, #12]	; (b5604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b55f6:	f7ff f915 	bl	b4824 <application_thread_invoke>
   b55fa:	e7c7      	b.n	b558c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b55fc:	000b5225 	.word	0x000b5225
   b5600:	000b5609 	.word	0x000b5609
   b5604:	000b5999 	.word	0x000b5999

000b5608 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5608:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b560a:	b570      	push	{r4, r5, r6, lr}
   b560c:	4604      	mov	r4, r0
	switch (__op)
   b560e:	d103      	bne.n	b5618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5610:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5612:	6003      	str	r3, [r0, #0]
      }
   b5614:	2000      	movs	r0, #0
   b5616:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5618:	2a02      	cmp	r2, #2
   b561a:	d00c      	beq.n	b5636 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b561c:	2a03      	cmp	r2, #3
   b561e:	d1f9      	bne.n	b5614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5620:	6804      	ldr	r4, [r0, #0]
   b5622:	2c00      	cmp	r4, #0
   b5624:	d0f6      	beq.n	b5614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5626:	4620      	mov	r0, r4
   b5628:	f7ff fb6f 	bl	b4d0a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b562c:	2114      	movs	r1, #20
   b562e:	4620      	mov	r0, r4
   b5630:	f7fe fd35 	bl	b409e <_ZdlPvj>
   b5634:	e7ee      	b.n	b5614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5636:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5638:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b563a:	f7fe fd2c 	bl	b4096 <_Znwj>
   b563e:	4605      	mov	r5, r0
   b5640:	b120      	cbz	r0, b564c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5642:	4631      	mov	r1, r6
   b5644:	f7ff ff4e 	bl	b54e4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5648:	7c33      	ldrb	r3, [r6, #16]
   b564a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b564c:	6025      	str	r5, [r4, #0]
	}
   b564e:	e7e1      	b.n	b5614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5650 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5650:	4770      	bx	lr

000b5652 <_ZN9IPAddressD0Ev>:
   b5652:	b510      	push	{r4, lr}
   b5654:	2118      	movs	r1, #24
   b5656:	4604      	mov	r4, r0
   b5658:	f7fe fd21 	bl	b409e <_ZdlPvj>
   b565c:	4620      	mov	r0, r4
   b565e:	bd10      	pop	{r4, pc}

000b5660 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5660:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5662:	7d03      	ldrb	r3, [r0, #20]
   b5664:	2b06      	cmp	r3, #6
{
   b5666:	b08d      	sub	sp, #52	; 0x34
   b5668:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b566a:	f100 0704 	add.w	r7, r0, #4
   b566e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5672:	d012      	beq.n	b569a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5674:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5678:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b567c:	220a      	movs	r2, #10
   b567e:	4630      	mov	r0, r6
   b5680:	f7ff fbc7 	bl	b4e12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5684:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5686:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5688:	d019      	beq.n	b56be <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b568a:	2c00      	cmp	r4, #0
   b568c:	d0f4      	beq.n	b5678 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b568e:	212e      	movs	r1, #46	; 0x2e
   b5690:	4630      	mov	r0, r6
   b5692:	f7ff fba5 	bl	b4de0 <_ZN5Print5printEc>
   b5696:	4404      	add	r4, r0
   b5698:	e7ee      	b.n	b5678 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b569a:	232f      	movs	r3, #47	; 0x2f
   b569c:	466a      	mov	r2, sp
   b569e:	4639      	mov	r1, r7
   b56a0:	200a      	movs	r0, #10
		buf[0] = 0;
   b56a2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b56a6:	f7fe ffad 	bl	b4604 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b56aa:	4668      	mov	r0, sp
   b56ac:	f001 f85f 	bl	b676e <strlen>
   b56b0:	6833      	ldr	r3, [r6, #0]
   b56b2:	4602      	mov	r2, r0
   b56b4:	68db      	ldr	r3, [r3, #12]
   b56b6:	4669      	mov	r1, sp
   b56b8:	4630      	mov	r0, r6
   b56ba:	4798      	blx	r3
   b56bc:	4604      	mov	r4, r0
    }
    return n;
}
   b56be:	4620      	mov	r0, r4
   b56c0:	b00d      	add	sp, #52	; 0x34
   b56c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b56c4:	b510      	push	{r4, lr}
   b56c6:	4b05      	ldr	r3, [pc, #20]	; (b56dc <_ZN9IPAddressC1Ev+0x18>)
   b56c8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b56ca:	2211      	movs	r2, #17
   b56cc:	f840 3b04 	str.w	r3, [r0], #4
   b56d0:	2100      	movs	r1, #0
   b56d2:	f000 fff1 	bl	b66b8 <memset>
}
   b56d6:	4620      	mov	r0, r4
   b56d8:	bd10      	pop	{r4, pc}
   b56da:	bf00      	nop
   b56dc:	000b69f8 	.word	0x000b69f8

000b56e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b56e0:	4603      	mov	r3, r0
   b56e2:	4a07      	ldr	r2, [pc, #28]	; (b5700 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b56e4:	b510      	push	{r4, lr}
   b56e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b56ea:	f101 0210 	add.w	r2, r1, #16
   b56ee:	f851 4b04 	ldr.w	r4, [r1], #4
   b56f2:	f843 4b04 	str.w	r4, [r3], #4
   b56f6:	4291      	cmp	r1, r2
   b56f8:	d1f9      	bne.n	b56ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b56fa:	780a      	ldrb	r2, [r1, #0]
   b56fc:	701a      	strb	r2, [r3, #0]
}
   b56fe:	bd10      	pop	{r4, pc}
   b5700:	000b69f8 	.word	0x000b69f8

000b5704 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5704:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5706:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b570a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b570e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5712:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5716:	2304      	movs	r3, #4
   b5718:	6041      	str	r1, [r0, #4]
   b571a:	7503      	strb	r3, [r0, #20]
}
   b571c:	bd10      	pop	{r4, pc}
	...

000b5720 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5720:	b507      	push	{r0, r1, r2, lr}
   b5722:	4b06      	ldr	r3, [pc, #24]	; (b573c <_ZN9IPAddressC1EPKh+0x1c>)
   b5724:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5726:	78cb      	ldrb	r3, [r1, #3]
   b5728:	9300      	str	r3, [sp, #0]
   b572a:	788b      	ldrb	r3, [r1, #2]
   b572c:	784a      	ldrb	r2, [r1, #1]
   b572e:	7809      	ldrb	r1, [r1, #0]
   b5730:	f7ff ffe8 	bl	b5704 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5734:	b003      	add	sp, #12
   b5736:	f85d fb04 	ldr.w	pc, [sp], #4
   b573a:	bf00      	nop
   b573c:	000b69f8 	.word	0x000b69f8

000b5740 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5740:	7441      	strb	r1, [r0, #17]
}
   b5742:	4770      	bx	lr

000b5744 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5744:	4770      	bx	lr

000b5746 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5746:	4770      	bx	lr

000b5748 <_ZN9USBSerial4readEv>:
{
   b5748:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b574a:	2100      	movs	r1, #0
   b574c:	7c00      	ldrb	r0, [r0, #16]
   b574e:	f7ff f821 	bl	b4794 <HAL_USB_USART_Receive_Data>
}
   b5752:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5756:	bd08      	pop	{r3, pc}

000b5758 <_ZN9USBSerial4peekEv>:
{
   b5758:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b575a:	2101      	movs	r1, #1
   b575c:	7c00      	ldrb	r0, [r0, #16]
   b575e:	f7ff f819 	bl	b4794 <HAL_USB_USART_Receive_Data>
}
   b5762:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5766:	bd08      	pop	{r3, pc}

000b5768 <_ZN9USBSerial17availableForWriteEv>:
{
   b5768:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b576a:	7c00      	ldrb	r0, [r0, #16]
   b576c:	f7ff f80a 	bl	b4784 <HAL_USB_USART_Available_Data_For_Write>
}
   b5770:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5774:	bd08      	pop	{r3, pc}

000b5776 <_ZN9USBSerial9availableEv>:
{
   b5776:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5778:	7c00      	ldrb	r0, [r0, #16]
   b577a:	f7fe fffb 	bl	b4774 <HAL_USB_USART_Available_Data>
}
   b577e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5782:	bd08      	pop	{r3, pc}

000b5784 <_ZN9USBSerial5writeEh>:
{
   b5784:	b513      	push	{r0, r1, r4, lr}
   b5786:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5788:	7c00      	ldrb	r0, [r0, #16]
{
   b578a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b578c:	f7fe fffa 	bl	b4784 <HAL_USB_USART_Available_Data_For_Write>
   b5790:	2800      	cmp	r0, #0
   b5792:	9901      	ldr	r1, [sp, #4]
   b5794:	dc01      	bgt.n	b579a <_ZN9USBSerial5writeEh+0x16>
   b5796:	7c60      	ldrb	r0, [r4, #17]
   b5798:	b120      	cbz	r0, b57a4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b579a:	7c20      	ldrb	r0, [r4, #16]
   b579c:	f7ff f802 	bl	b47a4 <HAL_USB_USART_Send_Data>
   b57a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b57a4:	b002      	add	sp, #8
   b57a6:	bd10      	pop	{r4, pc}

000b57a8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b57a8:	7c00      	ldrb	r0, [r0, #16]
   b57aa:	f7ff b803 	b.w	b47b4 <HAL_USB_USART_Flush_Data>

000b57ae <_ZN9USBSerialD0Ev>:
   b57ae:	b510      	push	{r4, lr}
   b57b0:	2114      	movs	r1, #20
   b57b2:	4604      	mov	r4, r0
   b57b4:	f7fe fc73 	bl	b409e <_ZdlPvj>
   b57b8:	4620      	mov	r0, r4
   b57ba:	bd10      	pop	{r4, pc}

000b57bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b57bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b57be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57c2:	4604      	mov	r4, r0
   b57c4:	4608      	mov	r0, r1
   b57c6:	2100      	movs	r1, #0
   b57c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b57cc:	4b04      	ldr	r3, [pc, #16]	; (b57e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b57ce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57d0:	2301      	movs	r3, #1
  _serial = serial;
   b57d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57d4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b57d6:	4611      	mov	r1, r2
   b57d8:	f7fe ffbc 	bl	b4754 <HAL_USB_USART_Init>
}
   b57dc:	4620      	mov	r0, r4
   b57de:	bd10      	pop	{r4, pc}
   b57e0:	000b6a0c 	.word	0x000b6a0c

000b57e4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b57e4:	7c00      	ldrb	r0, [r0, #16]
   b57e6:	2200      	movs	r2, #0
   b57e8:	f7fe bfbc 	b.w	b4764 <HAL_USB_USART_Begin>

000b57ec <_Z19acquireSerialBufferv>:
{
   b57ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b57ee:	2214      	movs	r2, #20
{
   b57f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b57f2:	2100      	movs	r1, #0
   b57f4:	f000 ff60 	bl	b66b8 <memset>
}
   b57f8:	4620      	mov	r0, r4
   b57fa:	bd10      	pop	{r4, pc}

000b57fc <_Z16_fetch_usbserialv>:
{
   b57fc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57fe:	4c0f      	ldr	r4, [pc, #60]	; (b583c <_Z16_fetch_usbserialv+0x40>)
{
   b5800:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5802:	a803      	add	r0, sp, #12
   b5804:	f7ff fff2 	bl	b57ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5808:	7821      	ldrb	r1, [r4, #0]
   b580a:	f3bf 8f5b 	dmb	ish
   b580e:	f011 0101 	ands.w	r1, r1, #1
   b5812:	d10f      	bne.n	b5834 <_Z16_fetch_usbserialv+0x38>
   b5814:	4620      	mov	r0, r4
   b5816:	9101      	str	r1, [sp, #4]
   b5818:	f7fe fc43 	bl	b40a2 <__cxa_guard_acquire>
   b581c:	9901      	ldr	r1, [sp, #4]
   b581e:	b148      	cbz	r0, b5834 <_Z16_fetch_usbserialv+0x38>
   b5820:	aa03      	add	r2, sp, #12
   b5822:	4807      	ldr	r0, [pc, #28]	; (b5840 <_Z16_fetch_usbserialv+0x44>)
   b5824:	f7ff ffca 	bl	b57bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5828:	4620      	mov	r0, r4
   b582a:	f7fe fc3f 	bl	b40ac <__cxa_guard_release>
   b582e:	4805      	ldr	r0, [pc, #20]	; (b5844 <_Z16_fetch_usbserialv+0x48>)
   b5830:	f000 ff2e 	bl	b6690 <atexit>
	return _usbserial;
}
   b5834:	4802      	ldr	r0, [pc, #8]	; (b5840 <_Z16_fetch_usbserialv+0x44>)
   b5836:	b008      	add	sp, #32
   b5838:	bd10      	pop	{r4, pc}
   b583a:	bf00      	nop
   b583c:	2003e6b4 	.word	0x2003e6b4
   b5840:	2003e6b8 	.word	0x2003e6b8
   b5844:	000b5745 	.word	0x000b5745

000b5848 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5848:	2200      	movs	r2, #0
   b584a:	6840      	ldr	r0, [r0, #4]
   b584c:	4611      	mov	r1, r2
   b584e:	f7ff b82f 	b.w	b48b0 <network_ready>

000b5852 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5852:	2200      	movs	r2, #0
   b5854:	6840      	ldr	r0, [r0, #4]
   b5856:	4611      	mov	r1, r2
   b5858:	f7ff b84a 	b.w	b48f0 <network_listening>

000b585c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b585c:	2200      	movs	r2, #0
   b585e:	6840      	ldr	r0, [r0, #4]
   b5860:	4611      	mov	r1, r2
   b5862:	f7ff b855 	b.w	b4910 <network_get_listen_timeout>

000b5866 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5866:	6840      	ldr	r0, [r0, #4]
   b5868:	2200      	movs	r2, #0
   b586a:	f7ff b849 	b.w	b4900 <network_set_listen_timeout>

000b586e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b586e:	6840      	ldr	r0, [r0, #4]
   b5870:	2200      	movs	r2, #0
   b5872:	f081 0101 	eor.w	r1, r1, #1
   b5876:	f7ff b833 	b.w	b48e0 <network_listen>

000b587a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b587a:	2300      	movs	r3, #0
   b587c:	6840      	ldr	r0, [r0, #4]
   b587e:	461a      	mov	r2, r3
   b5880:	4619      	mov	r1, r3
   b5882:	f7ff b825 	b.w	b48d0 <network_off>

000b5886 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5886:	2300      	movs	r3, #0
   b5888:	6840      	ldr	r0, [r0, #4]
   b588a:	461a      	mov	r2, r3
   b588c:	4619      	mov	r1, r3
   b588e:	f7ff b817 	b.w	b48c0 <network_on>

000b5892 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5892:	2200      	movs	r2, #0
   b5894:	6840      	ldr	r0, [r0, #4]
   b5896:	4611      	mov	r1, r2
   b5898:	f7fe bffa 	b.w	b4890 <network_connecting>

000b589c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b589c:	6840      	ldr	r0, [r0, #4]
   b589e:	2200      	movs	r2, #0
   b58a0:	2102      	movs	r1, #2
   b58a2:	f7fe bffd 	b.w	b48a0 <network_disconnect>

000b58a6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b58a6:	2300      	movs	r3, #0
   b58a8:	6840      	ldr	r0, [r0, #4]
   b58aa:	461a      	mov	r2, r3
   b58ac:	f7fe bfe8 	b.w	b4880 <network_connect>

000b58b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b58b0:	4b08      	ldr	r3, [pc, #32]	; (b58d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b58b2:	b510      	push	{r4, lr}
   b58b4:	2428      	movs	r4, #40	; 0x28
   b58b6:	4622      	mov	r2, r4
   b58b8:	4618      	mov	r0, r3
   b58ba:	2100      	movs	r1, #0
   b58bc:	f000 fefc 	bl	b66b8 <memset>
   b58c0:	4b05      	ldr	r3, [pc, #20]	; (b58d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b58c2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b58c4:	f04f 32ff 	mov.w	r2, #4294967295
   b58c8:	6042      	str	r2, [r0, #4]
   b58ca:	2204      	movs	r2, #4
   b58cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b58ce:	4a03      	ldr	r2, [pc, #12]	; (b58dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b58d0:	601a      	str	r2, [r3, #0]
   b58d2:	bd10      	pop	{r4, pc}
   b58d4:	2003e6d4 	.word	0x2003e6d4
   b58d8:	2003e6cc 	.word	0x2003e6cc
   b58dc:	000b6a3c 	.word	0x000b6a3c

000b58e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b58e0:	4770      	bx	lr

000b58e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b58e2:	7441      	strb	r1, [r0, #17]
}
   b58e4:	4770      	bx	lr

000b58e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b58e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b58e8:	7c00      	ldrb	r0, [r0, #16]
   b58ea:	f7fe fecb 	bl	b4684 <hal_usart_available_data_for_write>
}
   b58ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58f2:	bd08      	pop	{r3, pc}

000b58f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b58f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b58f6:	7c00      	ldrb	r0, [r0, #16]
   b58f8:	f7fe fe9c 	bl	b4634 <hal_usart_available>
}
   b58fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5900:	bd08      	pop	{r3, pc}

000b5902 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5902:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5904:	7c00      	ldrb	r0, [r0, #16]
   b5906:	f7fe fea5 	bl	b4654 <hal_usart_peek>
}
   b590a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b590e:	bd08      	pop	{r3, pc}

000b5910 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5910:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5912:	7c00      	ldrb	r0, [r0, #16]
   b5914:	f7fe fe96 	bl	b4644 <hal_usart_read>
}
   b5918:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b591c:	bd08      	pop	{r3, pc}

000b591e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b591e:	7c00      	ldrb	r0, [r0, #16]
   b5920:	f7fe bea0 	b.w	b4664 <hal_usart_flush>

000b5924 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5924:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5926:	7c45      	ldrb	r5, [r0, #17]
{
   b5928:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b592a:	b12d      	cbz	r5, b5938 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b592c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b592e:	b003      	add	sp, #12
   b5930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5934:	f7fe be76 	b.w	b4624 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5938:	7c00      	ldrb	r0, [r0, #16]
   b593a:	9101      	str	r1, [sp, #4]
   b593c:	f7fe fea2 	bl	b4684 <hal_usart_available_data_for_write>
   b5940:	2800      	cmp	r0, #0
   b5942:	9901      	ldr	r1, [sp, #4]
   b5944:	dcf2      	bgt.n	b592c <_ZN11USARTSerial5writeEh+0x8>
}
   b5946:	4628      	mov	r0, r5
   b5948:	b003      	add	sp, #12
   b594a:	bd30      	pop	{r4, r5, pc}

000b594c <_ZN11USARTSerialD0Ev>:
   b594c:	b510      	push	{r4, lr}
   b594e:	2114      	movs	r1, #20
   b5950:	4604      	mov	r4, r0
   b5952:	f7fe fba4 	bl	b409e <_ZdlPvj>
   b5956:	4620      	mov	r0, r4
   b5958:	bd10      	pop	{r4, pc}
	...

000b595c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b595c:	b510      	push	{r4, lr}
   b595e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5962:	4604      	mov	r4, r0
   b5964:	4608      	mov	r0, r1
   b5966:	4611      	mov	r1, r2
   b5968:	2200      	movs	r2, #0
   b596a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b596e:	4b04      	ldr	r3, [pc, #16]	; (b5980 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5970:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5972:	2301      	movs	r3, #1
  _serial = serial;
   b5974:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5976:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5978:	f7fe fe94 	bl	b46a4 <hal_usart_init_ex>
}
   b597c:	4620      	mov	r0, r4
   b597e:	bd10      	pop	{r4, pc}
   b5980:	000b6a78 	.word	0x000b6a78

000b5984 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5984:	7c00      	ldrb	r0, [r0, #16]
   b5986:	2300      	movs	r3, #0
   b5988:	f7fe be84 	b.w	b4694 <hal_usart_begin_config>

000b598c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b598c:	2200      	movs	r2, #0
   b598e:	f7ff bff9 	b.w	b5984 <_ZN11USARTSerial5beginEmm>

000b5992 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b5992:	7c00      	ldrb	r0, [r0, #16]
   b5994:	f7fe be3e 	b.w	b4614 <hal_usart_end>

000b5998 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5998:	b510      	push	{r4, lr}
      if (_M_empty())
   b599a:	6883      	ldr	r3, [r0, #8]
   b599c:	4604      	mov	r4, r0
   b599e:	b90b      	cbnz	r3, b59a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b59a0:	f000 fa54 	bl	b5e4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b59a4:	68c3      	ldr	r3, [r0, #12]
   b59a6:	4798      	blx	r3
      if (_M_manager)
   b59a8:	68a3      	ldr	r3, [r4, #8]
   b59aa:	b11b      	cbz	r3, b59b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b59ac:	2203      	movs	r2, #3
   b59ae:	4621      	mov	r1, r4
   b59b0:	4620      	mov	r0, r4
   b59b2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b59b4:	4620      	mov	r0, r4
   b59b6:	2110      	movs	r1, #16
}
   b59b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b59bc:	f7fe bb6f 	b.w	b409e <_ZdlPvj>

000b59c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b59c0:	4770      	bx	lr

000b59c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b59c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59c4:	4606      	mov	r6, r0
   b59c6:	4615      	mov	r5, r2
   b59c8:	460c      	mov	r4, r1
   b59ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b59cc:	42bc      	cmp	r4, r7
   b59ce:	d006      	beq.n	b59de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b59d0:	6833      	ldr	r3, [r6, #0]
   b59d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b59d6:	689b      	ldr	r3, [r3, #8]
   b59d8:	4630      	mov	r0, r6
   b59da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b59dc:	e7f6      	b.n	b59cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b59de:	4628      	mov	r0, r5
   b59e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b59e2:	7c00      	ldrb	r0, [r0, #16]
   b59e4:	2200      	movs	r2, #0
   b59e6:	f7fe be65 	b.w	b46b4 <hal_i2c_write>

000b59ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b59ea:	7c00      	ldrb	r0, [r0, #16]
   b59ec:	2100      	movs	r1, #0
   b59ee:	f7fe be69 	b.w	b46c4 <hal_i2c_available>

000b59f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b59f2:	7c00      	ldrb	r0, [r0, #16]
   b59f4:	2100      	movs	r1, #0
   b59f6:	f7fe be6d 	b.w	b46d4 <hal_i2c_read>

000b59fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b59fa:	7c00      	ldrb	r0, [r0, #16]
   b59fc:	2100      	movs	r1, #0
   b59fe:	f7fe be71 	b.w	b46e4 <hal_i2c_peek>

000b5a02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5a02:	7c00      	ldrb	r0, [r0, #16]
   b5a04:	2100      	movs	r1, #0
   b5a06:	f7fe be75 	b.w	b46f4 <hal_i2c_flush>

000b5a0a <_ZN7TwoWireD0Ev>:
   b5a0a:	b510      	push	{r4, lr}
   b5a0c:	2114      	movs	r1, #20
   b5a0e:	4604      	mov	r4, r0
   b5a10:	f7fe fb45 	bl	b409e <_ZdlPvj>
   b5a14:	4620      	mov	r0, r4
   b5a16:	bd10      	pop	{r4, pc}

000b5a18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a18:	b538      	push	{r3, r4, r5, lr}
   b5a1a:	4604      	mov	r4, r0
   b5a1c:	4615      	mov	r5, r2
   b5a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a22:	2200      	movs	r2, #0
   b5a24:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a28:	4b09      	ldr	r3, [pc, #36]	; (b5a50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5a2a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a2c:	4608      	mov	r0, r1
   b5a2e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5a30:	4629      	mov	r1, r5
   b5a32:	f7fe fe6f 	bl	b4714 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5a36:	30bf      	adds	r0, #191	; 0xbf
   b5a38:	d108      	bne.n	b5a4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5a3a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5a3c:	07db      	lsls	r3, r3, #31
   b5a3e:	d505      	bpl.n	b5a4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5a40:	6868      	ldr	r0, [r5, #4]
   b5a42:	f7fe ffb5 	bl	b49b0 <free>
    free(conf.tx_buffer);
   b5a46:	68e8      	ldr	r0, [r5, #12]
   b5a48:	f7fe ffb2 	bl	b49b0 <free>
}
   b5a4c:	4620      	mov	r0, r4
   b5a4e:	bd38      	pop	{r3, r4, r5, pc}
   b5a50:	000b6aa8 	.word	0x000b6aa8

000b5a54 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b5a54:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b5a56:	2100      	movs	r1, #0
   b5a58:	7c00      	ldrb	r0, [r0, #16]
   b5a5a:	f7fe fe63 	bl	b4724 <hal_i2c_lock>
}
   b5a5e:	fab0 f080 	clz	r0, r0
   b5a62:	0940      	lsrs	r0, r0, #5
   b5a64:	bd08      	pop	{r3, pc}

000b5a66 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a66:	2300      	movs	r3, #0
   b5a68:	6840      	ldr	r0, [r0, #4]
   b5a6a:	461a      	mov	r2, r3
   b5a6c:	f7fe bf08 	b.w	b4880 <network_connect>

000b5a70 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a70:	6840      	ldr	r0, [r0, #4]
   b5a72:	2200      	movs	r2, #0
   b5a74:	2102      	movs	r1, #2
   b5a76:	f7fe bf13 	b.w	b48a0 <network_disconnect>

000b5a7a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a7a:	2200      	movs	r2, #0
   b5a7c:	6840      	ldr	r0, [r0, #4]
   b5a7e:	4611      	mov	r1, r2
   b5a80:	f7fe bf06 	b.w	b4890 <network_connecting>

000b5a84 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a84:	2200      	movs	r2, #0
   b5a86:	6840      	ldr	r0, [r0, #4]
   b5a88:	4611      	mov	r1, r2
   b5a8a:	f7fe bf11 	b.w	b48b0 <network_ready>

000b5a8e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5a8e:	2300      	movs	r3, #0
   b5a90:	6840      	ldr	r0, [r0, #4]
   b5a92:	461a      	mov	r2, r3
   b5a94:	4619      	mov	r1, r3
   b5a96:	f7fe bf13 	b.w	b48c0 <network_on>

000b5a9a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5a9a:	2300      	movs	r3, #0
   b5a9c:	6840      	ldr	r0, [r0, #4]
   b5a9e:	461a      	mov	r2, r3
   b5aa0:	4619      	mov	r1, r3
   b5aa2:	f7fe bf15 	b.w	b48d0 <network_off>

000b5aa6 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5aa6:	6840      	ldr	r0, [r0, #4]
   b5aa8:	2100      	movs	r1, #0
   b5aaa:	f7fe bf39 	b.w	b4920 <network_is_on>

000b5aae <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5aae:	6840      	ldr	r0, [r0, #4]
   b5ab0:	2100      	movs	r1, #0
   b5ab2:	f7fe bf3d 	b.w	b4930 <network_is_off>

000b5ab6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5ab6:	6840      	ldr	r0, [r0, #4]
   b5ab8:	2200      	movs	r2, #0
   b5aba:	f081 0101 	eor.w	r1, r1, #1
   b5abe:	f7fe bf0f 	b.w	b48e0 <network_listen>

000b5ac2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5ac2:	6840      	ldr	r0, [r0, #4]
   b5ac4:	2200      	movs	r2, #0
   b5ac6:	f7fe bf1b 	b.w	b4900 <network_set_listen_timeout>

000b5aca <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5aca:	2200      	movs	r2, #0
   b5acc:	6840      	ldr	r0, [r0, #4]
   b5ace:	4611      	mov	r1, r2
   b5ad0:	f7fe bf1e 	b.w	b4910 <network_get_listen_timeout>

000b5ad4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ad4:	2200      	movs	r2, #0
   b5ad6:	6840      	ldr	r0, [r0, #4]
   b5ad8:	4611      	mov	r1, r2
   b5ada:	f7fe bf09 	b.w	b48f0 <network_listening>

000b5ade <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5ade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ae2:	b095      	sub	sp, #84	; 0x54
   b5ae4:	4614      	mov	r4, r2
   b5ae6:	460d      	mov	r5, r1
   b5ae8:	4607      	mov	r7, r0
    IPAddress addr;
   b5aea:	f7ff fdeb 	bl	b56c4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5aee:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5af0:	221c      	movs	r2, #28
   b5af2:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5af4:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5af6:	f000 fddf 	bl	b66b8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5afa:	2340      	movs	r3, #64	; 0x40
   b5afc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5afe:	4620      	mov	r0, r4
   b5b00:	466b      	mov	r3, sp
   b5b02:	aa0c      	add	r2, sp, #48	; 0x30
   b5b04:	2100      	movs	r1, #0
   b5b06:	f7fe fd25 	bl	b4554 <netdb_getaddrinfo>
    if (!r) {
   b5b0a:	4604      	mov	r4, r0
   b5b0c:	2800      	cmp	r0, #0
   b5b0e:	d14b      	bne.n	b5ba8 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b10:	4602      	mov	r2, r0
   b5b12:	2101      	movs	r1, #1
   b5b14:	6868      	ldr	r0, [r5, #4]
   b5b16:	f7fe fecb 	bl	b48b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b1a:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b1c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b1e:	4622      	mov	r2, r4
   b5b20:	6868      	ldr	r0, [r5, #4]
   b5b22:	f7fe fec5 	bl	b48b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b26:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b28:	4681      	mov	r9, r0
        bool ok = false;
   b5b2a:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b2c:	2e00      	cmp	r6, #0
   b5b2e:	d03b      	beq.n	b5ba8 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5b30:	2900      	cmp	r1, #0
   b5b32:	d139      	bne.n	b5ba8 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5b34:	6873      	ldr	r3, [r6, #4]
   b5b36:	2b02      	cmp	r3, #2
   b5b38:	d003      	beq.n	b5b42 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5b3a:	2b0a      	cmp	r3, #10
   b5b3c:	d011      	beq.n	b5b62 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b3e:	69f6      	ldr	r6, [r6, #28]
   b5b40:	e7f4      	b.n	b5b2c <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5b42:	f1b8 0f00 	cmp.w	r8, #0
   b5b46:	d0fa      	beq.n	b5b3e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5b48:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5b4a:	a806      	add	r0, sp, #24
   b5b4c:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5b4e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5b50:	f7ff fde6 	bl	b5720 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b56:	1d3c      	adds	r4, r7, #4
   b5b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b5a:	682b      	ldr	r3, [r5, #0]
   b5b5c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b5e:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5b60:	e7ed      	b.n	b5b3e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b62:	f1b9 0f00 	cmp.w	r9, #0
   b5b66:	d0ea      	beq.n	b5b3e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b68:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b6a:	2210      	movs	r2, #16
   b5b6c:	a801      	add	r0, sp, #4
   b5b6e:	f000 fda3 	bl	b66b8 <memset>
                    a.v = 6;
   b5b72:	2306      	movs	r3, #6
   b5b74:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b78:	ad01      	add	r5, sp, #4
   b5b7a:	f104 0308 	add.w	r3, r4, #8
   b5b7e:	3418      	adds	r4, #24
   b5b80:	6818      	ldr	r0, [r3, #0]
   b5b82:	6859      	ldr	r1, [r3, #4]
   b5b84:	462a      	mov	r2, r5
   b5b86:	c203      	stmia	r2!, {r0, r1}
   b5b88:	3308      	adds	r3, #8
   b5b8a:	42a3      	cmp	r3, r4
   b5b8c:	4615      	mov	r5, r2
   b5b8e:	d1f7      	bne.n	b5b80 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5b90:	a901      	add	r1, sp, #4
   b5b92:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5b94:	ad07      	add	r5, sp, #28
   b5b96:	f7ff fda3 	bl	b56e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b9c:	1d3c      	adds	r4, r7, #4
   b5b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ba0:	682b      	ldr	r3, [r5, #0]
   b5ba2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ba4:	4649      	mov	r1, r9
   b5ba6:	e7ca      	b.n	b5b3e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5ba8:	9800      	ldr	r0, [sp, #0]
   b5baa:	f7fe fccb 	bl	b4544 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5bae:	4638      	mov	r0, r7
   b5bb0:	b015      	add	sp, #84	; 0x54
   b5bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b5bb8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5bb8:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5bba:	4a03      	ldr	r2, [pc, #12]	; (b5bc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5bbc:	601a      	str	r2, [r3, #0]
   b5bbe:	2200      	movs	r2, #0
   b5bc0:	605a      	str	r2, [r3, #4]

} // spark
   b5bc2:	4770      	bx	lr
   b5bc4:	2003e6fc 	.word	0x2003e6fc
   b5bc8:	000b6ad0 	.word	0x000b6ad0

000b5bcc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5bcc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5bce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5bd0:	d902      	bls.n	b5bd8 <pinAvailable+0xc>
    return false;
   b5bd2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5bd4:	b002      	add	sp, #8
   b5bd6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5bd8:	f1a0 030b 	sub.w	r3, r0, #11
   b5bdc:	2b02      	cmp	r3, #2
   b5bde:	d81a      	bhi.n	b5c16 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5be0:	4c17      	ldr	r4, [pc, #92]	; (b5c40 <pinAvailable+0x74>)
   b5be2:	7821      	ldrb	r1, [r4, #0]
   b5be4:	f3bf 8f5b 	dmb	ish
   b5be8:	f011 0101 	ands.w	r1, r1, #1
   b5bec:	d10b      	bne.n	b5c06 <pinAvailable+0x3a>
   b5bee:	4620      	mov	r0, r4
   b5bf0:	9101      	str	r1, [sp, #4]
   b5bf2:	f7fe fa56 	bl	b40a2 <__cxa_guard_acquire>
   b5bf6:	9901      	ldr	r1, [sp, #4]
   b5bf8:	b128      	cbz	r0, b5c06 <pinAvailable+0x3a>
   b5bfa:	4812      	ldr	r0, [pc, #72]	; (b5c44 <pinAvailable+0x78>)
   b5bfc:	f7fe ff56 	bl	b4aac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5c00:	4620      	mov	r0, r4
   b5c02:	f7fe fa53 	bl	b40ac <__cxa_guard_release>
   b5c06:	4b0f      	ldr	r3, [pc, #60]	; (b5c44 <pinAvailable+0x78>)
   b5c08:	7818      	ldrb	r0, [r3, #0]
   b5c0a:	f7fe fd9b 	bl	b4744 <hal_spi_is_enabled>
   b5c0e:	2800      	cmp	r0, #0
   b5c10:	d1df      	bne.n	b5bd2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5c12:	2001      	movs	r0, #1
   b5c14:	e7de      	b.n	b5bd4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5c16:	2801      	cmp	r0, #1
   b5c18:	d809      	bhi.n	b5c2e <pinAvailable+0x62>
   b5c1a:	f000 f8cb 	bl	b5db4 <_Z19__fetch_global_Wirev>
   b5c1e:	2100      	movs	r1, #0
   b5c20:	7c00      	ldrb	r0, [r0, #16]
   b5c22:	f7fe fd6f 	bl	b4704 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5c26:	f080 0001 	eor.w	r0, r0, #1
   b5c2a:	b2c0      	uxtb	r0, r0
   b5c2c:	e7d2      	b.n	b5bd4 <pinAvailable+0x8>
   b5c2e:	3809      	subs	r0, #9
   b5c30:	2801      	cmp	r0, #1
   b5c32:	d8ee      	bhi.n	b5c12 <pinAvailable+0x46>
   b5c34:	f000 f864 	bl	b5d00 <_Z22__fetch_global_Serial1v>
   b5c38:	7c00      	ldrb	r0, [r0, #16]
   b5c3a:	f7fe fd1b 	bl	b4674 <hal_usart_is_enabled>
   b5c3e:	e7f2      	b.n	b5c26 <pinAvailable+0x5a>
   b5c40:	2003e704 	.word	0x2003e704
   b5c44:	2003e708 	.word	0x2003e708

000b5c48 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5c48:	2823      	cmp	r0, #35	; 0x23
{
   b5c4a:	b538      	push	{r3, r4, r5, lr}
   b5c4c:	4604      	mov	r4, r0
   b5c4e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5c50:	d80a      	bhi.n	b5c68 <pinMode+0x20>
   b5c52:	29ff      	cmp	r1, #255	; 0xff
   b5c54:	d008      	beq.n	b5c68 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5c56:	f7ff ffb9 	bl	b5bcc <pinAvailable>
   b5c5a:	b128      	cbz	r0, b5c68 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5c5c:	4629      	mov	r1, r5
   b5c5e:	4620      	mov	r0, r4
}
   b5c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5c64:	f7fe bc86 	b.w	b4574 <HAL_Pin_Mode>
}
   b5c68:	bd38      	pop	{r3, r4, r5, pc}

000b5c6a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5c6a:	b538      	push	{r3, r4, r5, lr}
   b5c6c:	4604      	mov	r4, r0
   b5c6e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5c70:	f7fe fc88 	bl	b4584 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5c74:	28ff      	cmp	r0, #255	; 0xff
   b5c76:	d010      	beq.n	b5c9a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5c78:	2806      	cmp	r0, #6
   b5c7a:	d804      	bhi.n	b5c86 <digitalWrite+0x1c>
   b5c7c:	234d      	movs	r3, #77	; 0x4d
   b5c7e:	fa23 f000 	lsr.w	r0, r3, r0
   b5c82:	07c3      	lsls	r3, r0, #31
   b5c84:	d409      	bmi.n	b5c9a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5c86:	4620      	mov	r0, r4
   b5c88:	f7ff ffa0 	bl	b5bcc <pinAvailable>
   b5c8c:	b128      	cbz	r0, b5c9a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5c8e:	4629      	mov	r1, r5
   b5c90:	4620      	mov	r0, r4
}
   b5c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5c96:	f7fe bc7d 	b.w	b4594 <HAL_GPIO_Write>
}
   b5c9a:	bd38      	pop	{r3, r4, r5, pc}

000b5c9c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5c9c:	280d      	cmp	r0, #13
{
   b5c9e:	b510      	push	{r4, lr}
   b5ca0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5ca2:	bf9c      	itt	ls
   b5ca4:	340e      	addls	r4, #14
   b5ca6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5ca8:	4620      	mov	r0, r4
   b5caa:	f7ff ff8f 	bl	b5bcc <pinAvailable>
   b5cae:	b150      	cbz	r0, b5cc6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5cb0:	2103      	movs	r1, #3
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	f7fe fc56 	bl	b4564 <HAL_Validate_Pin_Function>
   b5cb8:	2803      	cmp	r0, #3
   b5cba:	d104      	bne.n	b5cc6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5cbc:	4620      	mov	r0, r4
}
   b5cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5cc2:	f7fe bc6f 	b.w	b45a4 <hal_adc_read>
}
   b5cc6:	2000      	movs	r0, #0
   b5cc8:	bd10      	pop	{r4, pc}

000b5cca <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5cca:	4770      	bx	lr

000b5ccc <_Z20acquireSerial1Bufferv>:
{
   b5ccc:	b538      	push	{r3, r4, r5, lr}
   b5cce:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5cd0:	2514      	movs	r5, #20
   b5cd2:	462a      	mov	r2, r5
   b5cd4:	2100      	movs	r1, #0
   b5cd6:	f000 fcef 	bl	b66b8 <memset>
   b5cda:	8025      	strh	r5, [r4, #0]
   b5cdc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5cde:	4907      	ldr	r1, [pc, #28]	; (b5cfc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5ce0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ce2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5ce4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ce6:	f000 f8af 	bl	b5e48 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5cea:	4904      	ldr	r1, [pc, #16]	; (b5cfc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5cec:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5cee:	4628      	mov	r0, r5
   b5cf0:	f000 f8aa 	bl	b5e48 <_ZnajRKSt9nothrow_t>
    };
   b5cf4:	60e0      	str	r0, [r4, #12]
}
   b5cf6:	4620      	mov	r0, r4
   b5cf8:	bd38      	pop	{r3, r4, r5, pc}
   b5cfa:	bf00      	nop
   b5cfc:	000b6b04 	.word	0x000b6b04

000b5d00 <_Z22__fetch_global_Serial1v>:
{
   b5d00:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d02:	4d0e      	ldr	r5, [pc, #56]	; (b5d3c <_Z22__fetch_global_Serial1v+0x3c>)
   b5d04:	7829      	ldrb	r1, [r5, #0]
   b5d06:	f3bf 8f5b 	dmb	ish
   b5d0a:	f011 0401 	ands.w	r4, r1, #1
{
   b5d0e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d10:	d111      	bne.n	b5d36 <_Z22__fetch_global_Serial1v+0x36>
   b5d12:	4628      	mov	r0, r5
   b5d14:	f7fe f9c5 	bl	b40a2 <__cxa_guard_acquire>
   b5d18:	b168      	cbz	r0, b5d36 <_Z22__fetch_global_Serial1v+0x36>
   b5d1a:	a801      	add	r0, sp, #4
   b5d1c:	f7ff ffd6 	bl	b5ccc <_Z20acquireSerial1Bufferv>
   b5d20:	aa01      	add	r2, sp, #4
   b5d22:	4621      	mov	r1, r4
   b5d24:	4806      	ldr	r0, [pc, #24]	; (b5d40 <_Z22__fetch_global_Serial1v+0x40>)
   b5d26:	f7ff fe19 	bl	b595c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5d2a:	4628      	mov	r0, r5
   b5d2c:	f7fe f9be 	bl	b40ac <__cxa_guard_release>
   b5d30:	4804      	ldr	r0, [pc, #16]	; (b5d44 <_Z22__fetch_global_Serial1v+0x44>)
   b5d32:	f000 fcad 	bl	b6690 <atexit>
    return serial1;
}
   b5d36:	4802      	ldr	r0, [pc, #8]	; (b5d40 <_Z22__fetch_global_Serial1v+0x40>)
   b5d38:	b007      	add	sp, #28
   b5d3a:	bd30      	pop	{r4, r5, pc}
   b5d3c:	2003e710 	.word	0x2003e710
   b5d40:	2003e714 	.word	0x2003e714
   b5d44:	000b5ccb 	.word	0x000b5ccb

000b5d48 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d48:	4770      	bx	lr

000b5d4a <__tcf_1>:
   b5d4a:	4770      	bx	lr

000b5d4c <_Z17acquireWireBufferv>:
{
   b5d4c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5d4e:	4b0a      	ldr	r3, [pc, #40]	; (b5d78 <_Z17acquireWireBufferv+0x2c>)
   b5d50:	6003      	str	r3, [r0, #0]
   b5d52:	2301      	movs	r3, #1
{
   b5d54:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5d56:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d58:	4908      	ldr	r1, [pc, #32]	; (b5d7c <_Z17acquireWireBufferv+0x30>)
   b5d5a:	2020      	movs	r0, #32
   b5d5c:	f000 f874 	bl	b5e48 <_ZnajRKSt9nothrow_t>
	};
   b5d60:	2520      	movs	r5, #32
   b5d62:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d64:	4905      	ldr	r1, [pc, #20]	; (b5d7c <_Z17acquireWireBufferv+0x30>)
	};
   b5d66:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d68:	4628      	mov	r0, r5
   b5d6a:	f000 f86d 	bl	b5e48 <_ZnajRKSt9nothrow_t>
	};
   b5d6e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5d72:	4620      	mov	r0, r4
   b5d74:	bd38      	pop	{r3, r4, r5, pc}
   b5d76:	bf00      	nop
   b5d78:	00010018 	.word	0x00010018
   b5d7c:	000b6b04 	.word	0x000b6b04

000b5d80 <_Z18acquireWire1Bufferv>:
{
   b5d80:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5d82:	4b0a      	ldr	r3, [pc, #40]	; (b5dac <_Z18acquireWire1Bufferv+0x2c>)
   b5d84:	6003      	str	r3, [r0, #0]
   b5d86:	2301      	movs	r3, #1
{
   b5d88:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5d8a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d8c:	4908      	ldr	r1, [pc, #32]	; (b5db0 <_Z18acquireWire1Bufferv+0x30>)
   b5d8e:	2020      	movs	r0, #32
   b5d90:	f000 f85a 	bl	b5e48 <_ZnajRKSt9nothrow_t>
	};
   b5d94:	2520      	movs	r5, #32
   b5d96:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d98:	4905      	ldr	r1, [pc, #20]	; (b5db0 <_Z18acquireWire1Bufferv+0x30>)
	};
   b5d9a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d9c:	4628      	mov	r0, r5
   b5d9e:	f000 f853 	bl	b5e48 <_ZnajRKSt9nothrow_t>
	};
   b5da2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5da6:	4620      	mov	r0, r4
   b5da8:	bd38      	pop	{r3, r4, r5, pc}
   b5daa:	bf00      	nop
   b5dac:	00010018 	.word	0x00010018
   b5db0:	000b6b04 	.word	0x000b6b04

000b5db4 <_Z19__fetch_global_Wirev>:
{
   b5db4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5db6:	4d0e      	ldr	r5, [pc, #56]	; (b5df0 <_Z19__fetch_global_Wirev+0x3c>)
   b5db8:	7829      	ldrb	r1, [r5, #0]
   b5dba:	f3bf 8f5b 	dmb	ish
   b5dbe:	f011 0401 	ands.w	r4, r1, #1
{
   b5dc2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5dc4:	d111      	bne.n	b5dea <_Z19__fetch_global_Wirev+0x36>
   b5dc6:	4628      	mov	r0, r5
   b5dc8:	f7fe f96b 	bl	b40a2 <__cxa_guard_acquire>
   b5dcc:	b168      	cbz	r0, b5dea <_Z19__fetch_global_Wirev+0x36>
   b5dce:	4668      	mov	r0, sp
   b5dd0:	f7ff ffbc 	bl	b5d4c <_Z17acquireWireBufferv>
   b5dd4:	466a      	mov	r2, sp
   b5dd6:	4621      	mov	r1, r4
   b5dd8:	4806      	ldr	r0, [pc, #24]	; (b5df4 <_Z19__fetch_global_Wirev+0x40>)
   b5dda:	f7ff fe1d 	bl	b5a18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5dde:	4628      	mov	r0, r5
   b5de0:	f7fe f964 	bl	b40ac <__cxa_guard_release>
   b5de4:	4804      	ldr	r0, [pc, #16]	; (b5df8 <_Z19__fetch_global_Wirev+0x44>)
   b5de6:	f000 fc53 	bl	b6690 <atexit>
	return wire;
}
   b5dea:	4802      	ldr	r0, [pc, #8]	; (b5df4 <_Z19__fetch_global_Wirev+0x40>)
   b5dec:	b007      	add	sp, #28
   b5dee:	bd30      	pop	{r4, r5, pc}
   b5df0:	2003e72c 	.word	0x2003e72c
   b5df4:	2003e734 	.word	0x2003e734
   b5df8:	000b5d49 	.word	0x000b5d49

000b5dfc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b5dfc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b5dfe:	4c0e      	ldr	r4, [pc, #56]	; (b5e38 <_Z20__fetch_global_Wire1v+0x3c>)
   b5e00:	7823      	ldrb	r3, [r4, #0]
   b5e02:	f3bf 8f5b 	dmb	ish
   b5e06:	07db      	lsls	r3, r3, #31
{
   b5e08:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b5e0a:	d411      	bmi.n	b5e30 <_Z20__fetch_global_Wire1v+0x34>
   b5e0c:	4620      	mov	r0, r4
   b5e0e:	f7fe f948 	bl	b40a2 <__cxa_guard_acquire>
   b5e12:	b168      	cbz	r0, b5e30 <_Z20__fetch_global_Wire1v+0x34>
   b5e14:	4668      	mov	r0, sp
   b5e16:	f7ff ffb3 	bl	b5d80 <_Z18acquireWire1Bufferv>
   b5e1a:	466a      	mov	r2, sp
   b5e1c:	2101      	movs	r1, #1
   b5e1e:	4807      	ldr	r0, [pc, #28]	; (b5e3c <_Z20__fetch_global_Wire1v+0x40>)
   b5e20:	f7ff fdfa 	bl	b5a18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5e24:	4620      	mov	r0, r4
   b5e26:	f7fe f941 	bl	b40ac <__cxa_guard_release>
   b5e2a:	4805      	ldr	r0, [pc, #20]	; (b5e40 <_Z20__fetch_global_Wire1v+0x44>)
   b5e2c:	f000 fc30 	bl	b6690 <atexit>
	return wire;
}
   b5e30:	4802      	ldr	r0, [pc, #8]	; (b5e3c <_Z20__fetch_global_Wire1v+0x40>)
   b5e32:	b006      	add	sp, #24
   b5e34:	bd10      	pop	{r4, pc}
   b5e36:	bf00      	nop
   b5e38:	2003e730 	.word	0x2003e730
   b5e3c:	2003e748 	.word	0x2003e748
   b5e40:	000b5d4b 	.word	0x000b5d4b

000b5e44 <_ZnwjRKSt9nothrow_t>:
   b5e44:	f7fe b927 	b.w	b4096 <_Znwj>

000b5e48 <_ZnajRKSt9nothrow_t>:
   b5e48:	f7fe b927 	b.w	b409a <_Znaj>

000b5e4c <_ZSt25__throw_bad_function_callv>:
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	f7fe fdcf 	bl	b49f0 <abort>
	...

000b5e54 <__aeabi_drsub>:
   b5e54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5e58:	e002      	b.n	b5e60 <__adddf3>
   b5e5a:	bf00      	nop

000b5e5c <__aeabi_dsub>:
   b5e5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5e60 <__adddf3>:
   b5e60:	b530      	push	{r4, r5, lr}
   b5e62:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5e66:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5e6a:	ea94 0f05 	teq	r4, r5
   b5e6e:	bf08      	it	eq
   b5e70:	ea90 0f02 	teqeq	r0, r2
   b5e74:	bf1f      	itttt	ne
   b5e76:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5e7a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5e7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5e82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5e86:	f000 80e2 	beq.w	b604e <__adddf3+0x1ee>
   b5e8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5e8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5e92:	bfb8      	it	lt
   b5e94:	426d      	neglt	r5, r5
   b5e96:	dd0c      	ble.n	b5eb2 <__adddf3+0x52>
   b5e98:	442c      	add	r4, r5
   b5e9a:	ea80 0202 	eor.w	r2, r0, r2
   b5e9e:	ea81 0303 	eor.w	r3, r1, r3
   b5ea2:	ea82 0000 	eor.w	r0, r2, r0
   b5ea6:	ea83 0101 	eor.w	r1, r3, r1
   b5eaa:	ea80 0202 	eor.w	r2, r0, r2
   b5eae:	ea81 0303 	eor.w	r3, r1, r3
   b5eb2:	2d36      	cmp	r5, #54	; 0x36
   b5eb4:	bf88      	it	hi
   b5eb6:	bd30      	pophi	{r4, r5, pc}
   b5eb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5ebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5ec0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5ec4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5ec8:	d002      	beq.n	b5ed0 <__adddf3+0x70>
   b5eca:	4240      	negs	r0, r0
   b5ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5ed0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5ed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5ed8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5edc:	d002      	beq.n	b5ee4 <__adddf3+0x84>
   b5ede:	4252      	negs	r2, r2
   b5ee0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5ee4:	ea94 0f05 	teq	r4, r5
   b5ee8:	f000 80a7 	beq.w	b603a <__adddf3+0x1da>
   b5eec:	f1a4 0401 	sub.w	r4, r4, #1
   b5ef0:	f1d5 0e20 	rsbs	lr, r5, #32
   b5ef4:	db0d      	blt.n	b5f12 <__adddf3+0xb2>
   b5ef6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5efa:	fa22 f205 	lsr.w	r2, r2, r5
   b5efe:	1880      	adds	r0, r0, r2
   b5f00:	f141 0100 	adc.w	r1, r1, #0
   b5f04:	fa03 f20e 	lsl.w	r2, r3, lr
   b5f08:	1880      	adds	r0, r0, r2
   b5f0a:	fa43 f305 	asr.w	r3, r3, r5
   b5f0e:	4159      	adcs	r1, r3
   b5f10:	e00e      	b.n	b5f30 <__adddf3+0xd0>
   b5f12:	f1a5 0520 	sub.w	r5, r5, #32
   b5f16:	f10e 0e20 	add.w	lr, lr, #32
   b5f1a:	2a01      	cmp	r2, #1
   b5f1c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5f20:	bf28      	it	cs
   b5f22:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5f26:	fa43 f305 	asr.w	r3, r3, r5
   b5f2a:	18c0      	adds	r0, r0, r3
   b5f2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5f34:	d507      	bpl.n	b5f46 <__adddf3+0xe6>
   b5f36:	f04f 0e00 	mov.w	lr, #0
   b5f3a:	f1dc 0c00 	rsbs	ip, ip, #0
   b5f3e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5f42:	eb6e 0101 	sbc.w	r1, lr, r1
   b5f46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5f4a:	d31b      	bcc.n	b5f84 <__adddf3+0x124>
   b5f4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5f50:	d30c      	bcc.n	b5f6c <__adddf3+0x10c>
   b5f52:	0849      	lsrs	r1, r1, #1
   b5f54:	ea5f 0030 	movs.w	r0, r0, rrx
   b5f58:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5f5c:	f104 0401 	add.w	r4, r4, #1
   b5f60:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5f64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5f68:	f080 809a 	bcs.w	b60a0 <__adddf3+0x240>
   b5f6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5f70:	bf08      	it	eq
   b5f72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5f76:	f150 0000 	adcs.w	r0, r0, #0
   b5f7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5f7e:	ea41 0105 	orr.w	r1, r1, r5
   b5f82:	bd30      	pop	{r4, r5, pc}
   b5f84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5f88:	4140      	adcs	r0, r0
   b5f8a:	eb41 0101 	adc.w	r1, r1, r1
   b5f8e:	3c01      	subs	r4, #1
   b5f90:	bf28      	it	cs
   b5f92:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5f96:	d2e9      	bcs.n	b5f6c <__adddf3+0x10c>
   b5f98:	f091 0f00 	teq	r1, #0
   b5f9c:	bf04      	itt	eq
   b5f9e:	4601      	moveq	r1, r0
   b5fa0:	2000      	moveq	r0, #0
   b5fa2:	fab1 f381 	clz	r3, r1
   b5fa6:	bf08      	it	eq
   b5fa8:	3320      	addeq	r3, #32
   b5faa:	f1a3 030b 	sub.w	r3, r3, #11
   b5fae:	f1b3 0220 	subs.w	r2, r3, #32
   b5fb2:	da0c      	bge.n	b5fce <__adddf3+0x16e>
   b5fb4:	320c      	adds	r2, #12
   b5fb6:	dd08      	ble.n	b5fca <__adddf3+0x16a>
   b5fb8:	f102 0c14 	add.w	ip, r2, #20
   b5fbc:	f1c2 020c 	rsb	r2, r2, #12
   b5fc0:	fa01 f00c 	lsl.w	r0, r1, ip
   b5fc4:	fa21 f102 	lsr.w	r1, r1, r2
   b5fc8:	e00c      	b.n	b5fe4 <__adddf3+0x184>
   b5fca:	f102 0214 	add.w	r2, r2, #20
   b5fce:	bfd8      	it	le
   b5fd0:	f1c2 0c20 	rsble	ip, r2, #32
   b5fd4:	fa01 f102 	lsl.w	r1, r1, r2
   b5fd8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5fdc:	bfdc      	itt	le
   b5fde:	ea41 010c 	orrle.w	r1, r1, ip
   b5fe2:	4090      	lslle	r0, r2
   b5fe4:	1ae4      	subs	r4, r4, r3
   b5fe6:	bfa2      	ittt	ge
   b5fe8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5fec:	4329      	orrge	r1, r5
   b5fee:	bd30      	popge	{r4, r5, pc}
   b5ff0:	ea6f 0404 	mvn.w	r4, r4
   b5ff4:	3c1f      	subs	r4, #31
   b5ff6:	da1c      	bge.n	b6032 <__adddf3+0x1d2>
   b5ff8:	340c      	adds	r4, #12
   b5ffa:	dc0e      	bgt.n	b601a <__adddf3+0x1ba>
   b5ffc:	f104 0414 	add.w	r4, r4, #20
   b6000:	f1c4 0220 	rsb	r2, r4, #32
   b6004:	fa20 f004 	lsr.w	r0, r0, r4
   b6008:	fa01 f302 	lsl.w	r3, r1, r2
   b600c:	ea40 0003 	orr.w	r0, r0, r3
   b6010:	fa21 f304 	lsr.w	r3, r1, r4
   b6014:	ea45 0103 	orr.w	r1, r5, r3
   b6018:	bd30      	pop	{r4, r5, pc}
   b601a:	f1c4 040c 	rsb	r4, r4, #12
   b601e:	f1c4 0220 	rsb	r2, r4, #32
   b6022:	fa20 f002 	lsr.w	r0, r0, r2
   b6026:	fa01 f304 	lsl.w	r3, r1, r4
   b602a:	ea40 0003 	orr.w	r0, r0, r3
   b602e:	4629      	mov	r1, r5
   b6030:	bd30      	pop	{r4, r5, pc}
   b6032:	fa21 f004 	lsr.w	r0, r1, r4
   b6036:	4629      	mov	r1, r5
   b6038:	bd30      	pop	{r4, r5, pc}
   b603a:	f094 0f00 	teq	r4, #0
   b603e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6042:	bf06      	itte	eq
   b6044:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6048:	3401      	addeq	r4, #1
   b604a:	3d01      	subne	r5, #1
   b604c:	e74e      	b.n	b5eec <__adddf3+0x8c>
   b604e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6052:	bf18      	it	ne
   b6054:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6058:	d029      	beq.n	b60ae <__adddf3+0x24e>
   b605a:	ea94 0f05 	teq	r4, r5
   b605e:	bf08      	it	eq
   b6060:	ea90 0f02 	teqeq	r0, r2
   b6064:	d005      	beq.n	b6072 <__adddf3+0x212>
   b6066:	ea54 0c00 	orrs.w	ip, r4, r0
   b606a:	bf04      	itt	eq
   b606c:	4619      	moveq	r1, r3
   b606e:	4610      	moveq	r0, r2
   b6070:	bd30      	pop	{r4, r5, pc}
   b6072:	ea91 0f03 	teq	r1, r3
   b6076:	bf1e      	ittt	ne
   b6078:	2100      	movne	r1, #0
   b607a:	2000      	movne	r0, #0
   b607c:	bd30      	popne	{r4, r5, pc}
   b607e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6082:	d105      	bne.n	b6090 <__adddf3+0x230>
   b6084:	0040      	lsls	r0, r0, #1
   b6086:	4149      	adcs	r1, r1
   b6088:	bf28      	it	cs
   b608a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b608e:	bd30      	pop	{r4, r5, pc}
   b6090:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6094:	bf3c      	itt	cc
   b6096:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b609a:	bd30      	popcc	{r4, r5, pc}
   b609c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b60a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b60a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b60a8:	f04f 0000 	mov.w	r0, #0
   b60ac:	bd30      	pop	{r4, r5, pc}
   b60ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b60b2:	bf1a      	itte	ne
   b60b4:	4619      	movne	r1, r3
   b60b6:	4610      	movne	r0, r2
   b60b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b60bc:	bf1c      	itt	ne
   b60be:	460b      	movne	r3, r1
   b60c0:	4602      	movne	r2, r0
   b60c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b60c6:	bf06      	itte	eq
   b60c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b60cc:	ea91 0f03 	teqeq	r1, r3
   b60d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b60d4:	bd30      	pop	{r4, r5, pc}
   b60d6:	bf00      	nop

000b60d8 <__aeabi_ui2d>:
   b60d8:	f090 0f00 	teq	r0, #0
   b60dc:	bf04      	itt	eq
   b60de:	2100      	moveq	r1, #0
   b60e0:	4770      	bxeq	lr
   b60e2:	b530      	push	{r4, r5, lr}
   b60e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b60e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b60ec:	f04f 0500 	mov.w	r5, #0
   b60f0:	f04f 0100 	mov.w	r1, #0
   b60f4:	e750      	b.n	b5f98 <__adddf3+0x138>
   b60f6:	bf00      	nop

000b60f8 <__aeabi_i2d>:
   b60f8:	f090 0f00 	teq	r0, #0
   b60fc:	bf04      	itt	eq
   b60fe:	2100      	moveq	r1, #0
   b6100:	4770      	bxeq	lr
   b6102:	b530      	push	{r4, r5, lr}
   b6104:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6108:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b610c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6110:	bf48      	it	mi
   b6112:	4240      	negmi	r0, r0
   b6114:	f04f 0100 	mov.w	r1, #0
   b6118:	e73e      	b.n	b5f98 <__adddf3+0x138>
   b611a:	bf00      	nop

000b611c <__aeabi_f2d>:
   b611c:	0042      	lsls	r2, r0, #1
   b611e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6122:	ea4f 0131 	mov.w	r1, r1, rrx
   b6126:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b612a:	bf1f      	itttt	ne
   b612c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6130:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6134:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6138:	4770      	bxne	lr
   b613a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b613e:	bf08      	it	eq
   b6140:	4770      	bxeq	lr
   b6142:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6146:	bf04      	itt	eq
   b6148:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b614c:	4770      	bxeq	lr
   b614e:	b530      	push	{r4, r5, lr}
   b6150:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b615c:	e71c      	b.n	b5f98 <__adddf3+0x138>
   b615e:	bf00      	nop

000b6160 <__aeabi_ul2d>:
   b6160:	ea50 0201 	orrs.w	r2, r0, r1
   b6164:	bf08      	it	eq
   b6166:	4770      	bxeq	lr
   b6168:	b530      	push	{r4, r5, lr}
   b616a:	f04f 0500 	mov.w	r5, #0
   b616e:	e00a      	b.n	b6186 <__aeabi_l2d+0x16>

000b6170 <__aeabi_l2d>:
   b6170:	ea50 0201 	orrs.w	r2, r0, r1
   b6174:	bf08      	it	eq
   b6176:	4770      	bxeq	lr
   b6178:	b530      	push	{r4, r5, lr}
   b617a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b617e:	d502      	bpl.n	b6186 <__aeabi_l2d+0x16>
   b6180:	4240      	negs	r0, r0
   b6182:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6186:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b618a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b618e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6192:	f43f aed8 	beq.w	b5f46 <__adddf3+0xe6>
   b6196:	f04f 0203 	mov.w	r2, #3
   b619a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b619e:	bf18      	it	ne
   b61a0:	3203      	addne	r2, #3
   b61a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b61a6:	bf18      	it	ne
   b61a8:	3203      	addne	r2, #3
   b61aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b61ae:	f1c2 0320 	rsb	r3, r2, #32
   b61b2:	fa00 fc03 	lsl.w	ip, r0, r3
   b61b6:	fa20 f002 	lsr.w	r0, r0, r2
   b61ba:	fa01 fe03 	lsl.w	lr, r1, r3
   b61be:	ea40 000e 	orr.w	r0, r0, lr
   b61c2:	fa21 f102 	lsr.w	r1, r1, r2
   b61c6:	4414      	add	r4, r2
   b61c8:	e6bd      	b.n	b5f46 <__adddf3+0xe6>
   b61ca:	bf00      	nop

000b61cc <__aeabi_dmul>:
   b61cc:	b570      	push	{r4, r5, r6, lr}
   b61ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b61d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b61d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b61da:	bf1d      	ittte	ne
   b61dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b61e0:	ea94 0f0c 	teqne	r4, ip
   b61e4:	ea95 0f0c 	teqne	r5, ip
   b61e8:	f000 f8de 	bleq	b63a8 <__aeabi_dmul+0x1dc>
   b61ec:	442c      	add	r4, r5
   b61ee:	ea81 0603 	eor.w	r6, r1, r3
   b61f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b61f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b61fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b61fe:	bf18      	it	ne
   b6200:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b620c:	d038      	beq.n	b6280 <__aeabi_dmul+0xb4>
   b620e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6212:	f04f 0500 	mov.w	r5, #0
   b6216:	fbe1 e502 	umlal	lr, r5, r1, r2
   b621a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b621e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6222:	f04f 0600 	mov.w	r6, #0
   b6226:	fbe1 5603 	umlal	r5, r6, r1, r3
   b622a:	f09c 0f00 	teq	ip, #0
   b622e:	bf18      	it	ne
   b6230:	f04e 0e01 	orrne.w	lr, lr, #1
   b6234:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6238:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b623c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6240:	d204      	bcs.n	b624c <__aeabi_dmul+0x80>
   b6242:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6246:	416d      	adcs	r5, r5
   b6248:	eb46 0606 	adc.w	r6, r6, r6
   b624c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6250:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6254:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6258:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b625c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6260:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6264:	bf88      	it	hi
   b6266:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b626a:	d81e      	bhi.n	b62aa <__aeabi_dmul+0xde>
   b626c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6270:	bf08      	it	eq
   b6272:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6276:	f150 0000 	adcs.w	r0, r0, #0
   b627a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b627e:	bd70      	pop	{r4, r5, r6, pc}
   b6280:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6284:	ea46 0101 	orr.w	r1, r6, r1
   b6288:	ea40 0002 	orr.w	r0, r0, r2
   b628c:	ea81 0103 	eor.w	r1, r1, r3
   b6290:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6294:	bfc2      	ittt	gt
   b6296:	ebd4 050c 	rsbsgt	r5, r4, ip
   b629a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b629e:	bd70      	popgt	{r4, r5, r6, pc}
   b62a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b62a4:	f04f 0e00 	mov.w	lr, #0
   b62a8:	3c01      	subs	r4, #1
   b62aa:	f300 80ab 	bgt.w	b6404 <__aeabi_dmul+0x238>
   b62ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b62b2:	bfde      	ittt	le
   b62b4:	2000      	movle	r0, #0
   b62b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b62ba:	bd70      	pople	{r4, r5, r6, pc}
   b62bc:	f1c4 0400 	rsb	r4, r4, #0
   b62c0:	3c20      	subs	r4, #32
   b62c2:	da35      	bge.n	b6330 <__aeabi_dmul+0x164>
   b62c4:	340c      	adds	r4, #12
   b62c6:	dc1b      	bgt.n	b6300 <__aeabi_dmul+0x134>
   b62c8:	f104 0414 	add.w	r4, r4, #20
   b62cc:	f1c4 0520 	rsb	r5, r4, #32
   b62d0:	fa00 f305 	lsl.w	r3, r0, r5
   b62d4:	fa20 f004 	lsr.w	r0, r0, r4
   b62d8:	fa01 f205 	lsl.w	r2, r1, r5
   b62dc:	ea40 0002 	orr.w	r0, r0, r2
   b62e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b62e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b62e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b62ec:	fa21 f604 	lsr.w	r6, r1, r4
   b62f0:	eb42 0106 	adc.w	r1, r2, r6
   b62f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b62f8:	bf08      	it	eq
   b62fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b62fe:	bd70      	pop	{r4, r5, r6, pc}
   b6300:	f1c4 040c 	rsb	r4, r4, #12
   b6304:	f1c4 0520 	rsb	r5, r4, #32
   b6308:	fa00 f304 	lsl.w	r3, r0, r4
   b630c:	fa20 f005 	lsr.w	r0, r0, r5
   b6310:	fa01 f204 	lsl.w	r2, r1, r4
   b6314:	ea40 0002 	orr.w	r0, r0, r2
   b6318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b631c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6320:	f141 0100 	adc.w	r1, r1, #0
   b6324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6328:	bf08      	it	eq
   b632a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b632e:	bd70      	pop	{r4, r5, r6, pc}
   b6330:	f1c4 0520 	rsb	r5, r4, #32
   b6334:	fa00 f205 	lsl.w	r2, r0, r5
   b6338:	ea4e 0e02 	orr.w	lr, lr, r2
   b633c:	fa20 f304 	lsr.w	r3, r0, r4
   b6340:	fa01 f205 	lsl.w	r2, r1, r5
   b6344:	ea43 0302 	orr.w	r3, r3, r2
   b6348:	fa21 f004 	lsr.w	r0, r1, r4
   b634c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6350:	fa21 f204 	lsr.w	r2, r1, r4
   b6354:	ea20 0002 	bic.w	r0, r0, r2
   b6358:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b635c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6360:	bf08      	it	eq
   b6362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6366:	bd70      	pop	{r4, r5, r6, pc}
   b6368:	f094 0f00 	teq	r4, #0
   b636c:	d10f      	bne.n	b638e <__aeabi_dmul+0x1c2>
   b636e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6372:	0040      	lsls	r0, r0, #1
   b6374:	eb41 0101 	adc.w	r1, r1, r1
   b6378:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b637c:	bf08      	it	eq
   b637e:	3c01      	subeq	r4, #1
   b6380:	d0f7      	beq.n	b6372 <__aeabi_dmul+0x1a6>
   b6382:	ea41 0106 	orr.w	r1, r1, r6
   b6386:	f095 0f00 	teq	r5, #0
   b638a:	bf18      	it	ne
   b638c:	4770      	bxne	lr
   b638e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6392:	0052      	lsls	r2, r2, #1
   b6394:	eb43 0303 	adc.w	r3, r3, r3
   b6398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b639c:	bf08      	it	eq
   b639e:	3d01      	subeq	r5, #1
   b63a0:	d0f7      	beq.n	b6392 <__aeabi_dmul+0x1c6>
   b63a2:	ea43 0306 	orr.w	r3, r3, r6
   b63a6:	4770      	bx	lr
   b63a8:	ea94 0f0c 	teq	r4, ip
   b63ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b63b0:	bf18      	it	ne
   b63b2:	ea95 0f0c 	teqne	r5, ip
   b63b6:	d00c      	beq.n	b63d2 <__aeabi_dmul+0x206>
   b63b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b63bc:	bf18      	it	ne
   b63be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b63c2:	d1d1      	bne.n	b6368 <__aeabi_dmul+0x19c>
   b63c4:	ea81 0103 	eor.w	r1, r1, r3
   b63c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b63cc:	f04f 0000 	mov.w	r0, #0
   b63d0:	bd70      	pop	{r4, r5, r6, pc}
   b63d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b63d6:	bf06      	itte	eq
   b63d8:	4610      	moveq	r0, r2
   b63da:	4619      	moveq	r1, r3
   b63dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b63e0:	d019      	beq.n	b6416 <__aeabi_dmul+0x24a>
   b63e2:	ea94 0f0c 	teq	r4, ip
   b63e6:	d102      	bne.n	b63ee <__aeabi_dmul+0x222>
   b63e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b63ec:	d113      	bne.n	b6416 <__aeabi_dmul+0x24a>
   b63ee:	ea95 0f0c 	teq	r5, ip
   b63f2:	d105      	bne.n	b6400 <__aeabi_dmul+0x234>
   b63f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b63f8:	bf1c      	itt	ne
   b63fa:	4610      	movne	r0, r2
   b63fc:	4619      	movne	r1, r3
   b63fe:	d10a      	bne.n	b6416 <__aeabi_dmul+0x24a>
   b6400:	ea81 0103 	eor.w	r1, r1, r3
   b6404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6408:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b640c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6410:	f04f 0000 	mov.w	r0, #0
   b6414:	bd70      	pop	{r4, r5, r6, pc}
   b6416:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b641a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b641e:	bd70      	pop	{r4, r5, r6, pc}

000b6420 <__aeabi_ddiv>:
   b6420:	b570      	push	{r4, r5, r6, lr}
   b6422:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6426:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b642a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b642e:	bf1d      	ittte	ne
   b6430:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6434:	ea94 0f0c 	teqne	r4, ip
   b6438:	ea95 0f0c 	teqne	r5, ip
   b643c:	f000 f8a7 	bleq	b658e <__aeabi_ddiv+0x16e>
   b6440:	eba4 0405 	sub.w	r4, r4, r5
   b6444:	ea81 0e03 	eor.w	lr, r1, r3
   b6448:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b644c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6450:	f000 8088 	beq.w	b6564 <__aeabi_ddiv+0x144>
   b6454:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6458:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b645c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6460:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6464:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6468:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b646c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6470:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6474:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6478:	429d      	cmp	r5, r3
   b647a:	bf08      	it	eq
   b647c:	4296      	cmpeq	r6, r2
   b647e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6482:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6486:	d202      	bcs.n	b648e <__aeabi_ddiv+0x6e>
   b6488:	085b      	lsrs	r3, r3, #1
   b648a:	ea4f 0232 	mov.w	r2, r2, rrx
   b648e:	1ab6      	subs	r6, r6, r2
   b6490:	eb65 0503 	sbc.w	r5, r5, r3
   b6494:	085b      	lsrs	r3, r3, #1
   b6496:	ea4f 0232 	mov.w	r2, r2, rrx
   b649a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b649e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b64a2:	ebb6 0e02 	subs.w	lr, r6, r2
   b64a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b64aa:	bf22      	ittt	cs
   b64ac:	1ab6      	subcs	r6, r6, r2
   b64ae:	4675      	movcs	r5, lr
   b64b0:	ea40 000c 	orrcs.w	r0, r0, ip
   b64b4:	085b      	lsrs	r3, r3, #1
   b64b6:	ea4f 0232 	mov.w	r2, r2, rrx
   b64ba:	ebb6 0e02 	subs.w	lr, r6, r2
   b64be:	eb75 0e03 	sbcs.w	lr, r5, r3
   b64c2:	bf22      	ittt	cs
   b64c4:	1ab6      	subcs	r6, r6, r2
   b64c6:	4675      	movcs	r5, lr
   b64c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b64cc:	085b      	lsrs	r3, r3, #1
   b64ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b64d2:	ebb6 0e02 	subs.w	lr, r6, r2
   b64d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b64da:	bf22      	ittt	cs
   b64dc:	1ab6      	subcs	r6, r6, r2
   b64de:	4675      	movcs	r5, lr
   b64e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b64e4:	085b      	lsrs	r3, r3, #1
   b64e6:	ea4f 0232 	mov.w	r2, r2, rrx
   b64ea:	ebb6 0e02 	subs.w	lr, r6, r2
   b64ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   b64f2:	bf22      	ittt	cs
   b64f4:	1ab6      	subcs	r6, r6, r2
   b64f6:	4675      	movcs	r5, lr
   b64f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b64fc:	ea55 0e06 	orrs.w	lr, r5, r6
   b6500:	d018      	beq.n	b6534 <__aeabi_ddiv+0x114>
   b6502:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6506:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b650a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b650e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6512:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6516:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b651a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b651e:	d1c0      	bne.n	b64a2 <__aeabi_ddiv+0x82>
   b6520:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6524:	d10b      	bne.n	b653e <__aeabi_ddiv+0x11e>
   b6526:	ea41 0100 	orr.w	r1, r1, r0
   b652a:	f04f 0000 	mov.w	r0, #0
   b652e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6532:	e7b6      	b.n	b64a2 <__aeabi_ddiv+0x82>
   b6534:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6538:	bf04      	itt	eq
   b653a:	4301      	orreq	r1, r0
   b653c:	2000      	moveq	r0, #0
   b653e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6542:	bf88      	it	hi
   b6544:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6548:	f63f aeaf 	bhi.w	b62aa <__aeabi_dmul+0xde>
   b654c:	ebb5 0c03 	subs.w	ip, r5, r3
   b6550:	bf04      	itt	eq
   b6552:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6556:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b655a:	f150 0000 	adcs.w	r0, r0, #0
   b655e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6562:	bd70      	pop	{r4, r5, r6, pc}
   b6564:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6568:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b656c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6570:	bfc2      	ittt	gt
   b6572:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6576:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b657a:	bd70      	popgt	{r4, r5, r6, pc}
   b657c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6580:	f04f 0e00 	mov.w	lr, #0
   b6584:	3c01      	subs	r4, #1
   b6586:	e690      	b.n	b62aa <__aeabi_dmul+0xde>
   b6588:	ea45 0e06 	orr.w	lr, r5, r6
   b658c:	e68d      	b.n	b62aa <__aeabi_dmul+0xde>
   b658e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6592:	ea94 0f0c 	teq	r4, ip
   b6596:	bf08      	it	eq
   b6598:	ea95 0f0c 	teqeq	r5, ip
   b659c:	f43f af3b 	beq.w	b6416 <__aeabi_dmul+0x24a>
   b65a0:	ea94 0f0c 	teq	r4, ip
   b65a4:	d10a      	bne.n	b65bc <__aeabi_ddiv+0x19c>
   b65a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b65aa:	f47f af34 	bne.w	b6416 <__aeabi_dmul+0x24a>
   b65ae:	ea95 0f0c 	teq	r5, ip
   b65b2:	f47f af25 	bne.w	b6400 <__aeabi_dmul+0x234>
   b65b6:	4610      	mov	r0, r2
   b65b8:	4619      	mov	r1, r3
   b65ba:	e72c      	b.n	b6416 <__aeabi_dmul+0x24a>
   b65bc:	ea95 0f0c 	teq	r5, ip
   b65c0:	d106      	bne.n	b65d0 <__aeabi_ddiv+0x1b0>
   b65c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b65c6:	f43f aefd 	beq.w	b63c4 <__aeabi_dmul+0x1f8>
   b65ca:	4610      	mov	r0, r2
   b65cc:	4619      	mov	r1, r3
   b65ce:	e722      	b.n	b6416 <__aeabi_dmul+0x24a>
   b65d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b65d4:	bf18      	it	ne
   b65d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b65da:	f47f aec5 	bne.w	b6368 <__aeabi_dmul+0x19c>
   b65de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b65e2:	f47f af0d 	bne.w	b6400 <__aeabi_dmul+0x234>
   b65e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b65ea:	f47f aeeb 	bne.w	b63c4 <__aeabi_dmul+0x1f8>
   b65ee:	e712      	b.n	b6416 <__aeabi_dmul+0x24a>

000b65f0 <__aeabi_d2f>:
   b65f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b65f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b65f8:	bf24      	itt	cs
   b65fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b65fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6602:	d90d      	bls.n	b6620 <__aeabi_d2f+0x30>
   b6604:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6608:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b660c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6610:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6614:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6618:	bf08      	it	eq
   b661a:	f020 0001 	biceq.w	r0, r0, #1
   b661e:	4770      	bx	lr
   b6620:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6624:	d121      	bne.n	b666a <__aeabi_d2f+0x7a>
   b6626:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b662a:	bfbc      	itt	lt
   b662c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6630:	4770      	bxlt	lr
   b6632:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6636:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b663a:	f1c2 0218 	rsb	r2, r2, #24
   b663e:	f1c2 0c20 	rsb	ip, r2, #32
   b6642:	fa10 f30c 	lsls.w	r3, r0, ip
   b6646:	fa20 f002 	lsr.w	r0, r0, r2
   b664a:	bf18      	it	ne
   b664c:	f040 0001 	orrne.w	r0, r0, #1
   b6650:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6654:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6658:	fa03 fc0c 	lsl.w	ip, r3, ip
   b665c:	ea40 000c 	orr.w	r0, r0, ip
   b6660:	fa23 f302 	lsr.w	r3, r3, r2
   b6664:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6668:	e7cc      	b.n	b6604 <__aeabi_d2f+0x14>
   b666a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b666e:	d107      	bne.n	b6680 <__aeabi_d2f+0x90>
   b6670:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6674:	bf1e      	ittt	ne
   b6676:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b667a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b667e:	4770      	bxne	lr
   b6680:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6684:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6688:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b668c:	4770      	bx	lr
   b668e:	bf00      	nop

000b6690 <atexit>:
   b6690:	2300      	movs	r3, #0
   b6692:	4601      	mov	r1, r0
   b6694:	461a      	mov	r2, r3
   b6696:	4618      	mov	r0, r3
   b6698:	f000 b872 	b.w	b6780 <__register_exitproc>

000b669c <memcpy>:
   b669c:	440a      	add	r2, r1
   b669e:	4291      	cmp	r1, r2
   b66a0:	f100 33ff 	add.w	r3, r0, #4294967295
   b66a4:	d100      	bne.n	b66a8 <memcpy+0xc>
   b66a6:	4770      	bx	lr
   b66a8:	b510      	push	{r4, lr}
   b66aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b66ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   b66b2:	4291      	cmp	r1, r2
   b66b4:	d1f9      	bne.n	b66aa <memcpy+0xe>
   b66b6:	bd10      	pop	{r4, pc}

000b66b8 <memset>:
   b66b8:	4402      	add	r2, r0
   b66ba:	4603      	mov	r3, r0
   b66bc:	4293      	cmp	r3, r2
   b66be:	d100      	bne.n	b66c2 <memset+0xa>
   b66c0:	4770      	bx	lr
   b66c2:	f803 1b01 	strb.w	r1, [r3], #1
   b66c6:	e7f9      	b.n	b66bc <memset+0x4>

000b66c8 <srand>:
   b66c8:	b538      	push	{r3, r4, r5, lr}
   b66ca:	4b10      	ldr	r3, [pc, #64]	; (b670c <srand+0x44>)
   b66cc:	681d      	ldr	r5, [r3, #0]
   b66ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b66d0:	4604      	mov	r4, r0
   b66d2:	b9b3      	cbnz	r3, b6702 <srand+0x3a>
   b66d4:	2018      	movs	r0, #24
   b66d6:	f7fe f963 	bl	b49a0 <malloc>
   b66da:	4602      	mov	r2, r0
   b66dc:	63a8      	str	r0, [r5, #56]	; 0x38
   b66de:	b920      	cbnz	r0, b66ea <srand+0x22>
   b66e0:	4b0b      	ldr	r3, [pc, #44]	; (b6710 <srand+0x48>)
   b66e2:	480c      	ldr	r0, [pc, #48]	; (b6714 <srand+0x4c>)
   b66e4:	2142      	movs	r1, #66	; 0x42
   b66e6:	f7fe f993 	bl	b4a10 <__assert_func>
   b66ea:	490b      	ldr	r1, [pc, #44]	; (b6718 <srand+0x50>)
   b66ec:	4b0b      	ldr	r3, [pc, #44]	; (b671c <srand+0x54>)
   b66ee:	e9c0 1300 	strd	r1, r3, [r0]
   b66f2:	4b0b      	ldr	r3, [pc, #44]	; (b6720 <srand+0x58>)
   b66f4:	6083      	str	r3, [r0, #8]
   b66f6:	230b      	movs	r3, #11
   b66f8:	8183      	strh	r3, [r0, #12]
   b66fa:	2100      	movs	r1, #0
   b66fc:	2001      	movs	r0, #1
   b66fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6702:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6704:	2200      	movs	r2, #0
   b6706:	611c      	str	r4, [r3, #16]
   b6708:	615a      	str	r2, [r3, #20]
   b670a:	bd38      	pop	{r3, r4, r5, pc}
   b670c:	2003e55c 	.word	0x2003e55c
   b6710:	000b6b05 	.word	0x000b6b05
   b6714:	000b6b1c 	.word	0x000b6b1c
   b6718:	abcd330e 	.word	0xabcd330e
   b671c:	e66d1234 	.word	0xe66d1234
   b6720:	0005deec 	.word	0x0005deec

000b6724 <strcpy>:
   b6724:	4603      	mov	r3, r0
   b6726:	f811 2b01 	ldrb.w	r2, [r1], #1
   b672a:	f803 2b01 	strb.w	r2, [r3], #1
   b672e:	2a00      	cmp	r2, #0
   b6730:	d1f9      	bne.n	b6726 <strcpy+0x2>
   b6732:	4770      	bx	lr

000b6734 <strdup>:
   b6734:	4b02      	ldr	r3, [pc, #8]	; (b6740 <strdup+0xc>)
   b6736:	4601      	mov	r1, r0
   b6738:	6818      	ldr	r0, [r3, #0]
   b673a:	f000 b803 	b.w	b6744 <_strdup_r>
   b673e:	bf00      	nop
   b6740:	2003e55c 	.word	0x2003e55c

000b6744 <_strdup_r>:
   b6744:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6746:	4604      	mov	r4, r0
   b6748:	4608      	mov	r0, r1
   b674a:	460d      	mov	r5, r1
   b674c:	f000 f80f 	bl	b676e <strlen>
   b6750:	1c42      	adds	r2, r0, #1
   b6752:	4611      	mov	r1, r2
   b6754:	4620      	mov	r0, r4
   b6756:	9201      	str	r2, [sp, #4]
   b6758:	f7fe f952 	bl	b4a00 <_malloc_r>
   b675c:	4604      	mov	r4, r0
   b675e:	b118      	cbz	r0, b6768 <_strdup_r+0x24>
   b6760:	9a01      	ldr	r2, [sp, #4]
   b6762:	4629      	mov	r1, r5
   b6764:	f7ff ff9a 	bl	b669c <memcpy>
   b6768:	4620      	mov	r0, r4
   b676a:	b003      	add	sp, #12
   b676c:	bd30      	pop	{r4, r5, pc}

000b676e <strlen>:
   b676e:	4603      	mov	r3, r0
   b6770:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6774:	2a00      	cmp	r2, #0
   b6776:	d1fb      	bne.n	b6770 <strlen+0x2>
   b6778:	1a18      	subs	r0, r3, r0
   b677a:	3801      	subs	r0, #1
   b677c:	4770      	bx	lr
	...

000b6780 <__register_exitproc>:
   b6780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6784:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6840 <__register_exitproc+0xc0>
   b6788:	4606      	mov	r6, r0
   b678a:	f8d8 0000 	ldr.w	r0, [r8]
   b678e:	461f      	mov	r7, r3
   b6790:	460d      	mov	r5, r1
   b6792:	4691      	mov	r9, r2
   b6794:	f000 f856 	bl	b6844 <__retarget_lock_acquire_recursive>
   b6798:	4b25      	ldr	r3, [pc, #148]	; (b6830 <__register_exitproc+0xb0>)
   b679a:	681c      	ldr	r4, [r3, #0]
   b679c:	b934      	cbnz	r4, b67ac <__register_exitproc+0x2c>
   b679e:	4c25      	ldr	r4, [pc, #148]	; (b6834 <__register_exitproc+0xb4>)
   b67a0:	601c      	str	r4, [r3, #0]
   b67a2:	4b25      	ldr	r3, [pc, #148]	; (b6838 <__register_exitproc+0xb8>)
   b67a4:	b113      	cbz	r3, b67ac <__register_exitproc+0x2c>
   b67a6:	681b      	ldr	r3, [r3, #0]
   b67a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b67ac:	6863      	ldr	r3, [r4, #4]
   b67ae:	2b1f      	cmp	r3, #31
   b67b0:	dd07      	ble.n	b67c2 <__register_exitproc+0x42>
   b67b2:	f8d8 0000 	ldr.w	r0, [r8]
   b67b6:	f000 f847 	bl	b6848 <__retarget_lock_release_recursive>
   b67ba:	f04f 30ff 	mov.w	r0, #4294967295
   b67be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b67c2:	b34e      	cbz	r6, b6818 <__register_exitproc+0x98>
   b67c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b67c8:	b988      	cbnz	r0, b67ee <__register_exitproc+0x6e>
   b67ca:	4b1c      	ldr	r3, [pc, #112]	; (b683c <__register_exitproc+0xbc>)
   b67cc:	b923      	cbnz	r3, b67d8 <__register_exitproc+0x58>
   b67ce:	f8d8 0000 	ldr.w	r0, [r8]
   b67d2:	f000 f838 	bl	b6846 <__retarget_lock_release>
   b67d6:	e7f0      	b.n	b67ba <__register_exitproc+0x3a>
   b67d8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b67dc:	f7fe f8e0 	bl	b49a0 <malloc>
   b67e0:	2800      	cmp	r0, #0
   b67e2:	d0f4      	beq.n	b67ce <__register_exitproc+0x4e>
   b67e4:	2300      	movs	r3, #0
   b67e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b67ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b67ee:	6863      	ldr	r3, [r4, #4]
   b67f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b67f4:	2201      	movs	r2, #1
   b67f6:	409a      	lsls	r2, r3
   b67f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b67fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6800:	4313      	orrs	r3, r2
   b6802:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6806:	2e02      	cmp	r6, #2
   b6808:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b680c:	bf02      	ittt	eq
   b680e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6812:	4313      	orreq	r3, r2
   b6814:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6818:	6863      	ldr	r3, [r4, #4]
   b681a:	f8d8 0000 	ldr.w	r0, [r8]
   b681e:	1c5a      	adds	r2, r3, #1
   b6820:	3302      	adds	r3, #2
   b6822:	6062      	str	r2, [r4, #4]
   b6824:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6828:	f000 f80e 	bl	b6848 <__retarget_lock_release_recursive>
   b682c:	2000      	movs	r0, #0
   b682e:	e7c6      	b.n	b67be <__register_exitproc+0x3e>
   b6830:	2003e7e8 	.word	0x2003e7e8
   b6834:	2003e75c 	.word	0x2003e75c
   b6838:	00000000 	.word	0x00000000
   b683c:	000b49a1 	.word	0x000b49a1
   b6840:	2003e5c0 	.word	0x2003e5c0

000b6844 <__retarget_lock_acquire_recursive>:
   b6844:	4770      	bx	lr

000b6846 <__retarget_lock_release>:
   b6846:	4770      	bx	lr

000b6848 <__retarget_lock_release_recursive>:
   b6848:	4770      	bx	lr

000b684a <link_code_end>:
	...

000b684c <dynalib_user>:
   b684c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b685c:	0000 0000 6c53 6565 6970 676e 6620 726f     ....Sleeping for
   b686c:	0020 6c25 2c69 7325 252c 302e 6632 5400      .%li,%s,%.02f.T
   b687c:	7972 6e69 2067 6f74 6320 6e6f 656e 7463     rying to connect
   b688c:	7000 6275 696c 6873 6e69 2067 6164 6174     .publishing data
   b689c:	7000 6275 696c 6873 7220 7365 6c75 2074     .publish result 
   b68ac:	6425 6d00 7861 7420 6d69 2065 6f66 2072     %d.max time for 
   b68bc:	7570 6c62 7369 6968 676e 7220 6165 6863     publishing reach
   b68cc:	6465 7720 7469 6f68 7475 7320 6375 6563     ed without succe
   b68dc:	7373 203b 6f67 7420 206f 6c73 6565 0070     ss; go to sleep.
   b68ec:	6f4e 2074 616d 2078 6974 656d 202c 7274     Not max time, tr
   b68fc:	2079 6761 6961 206e 6f74 6320 6e6f 656e     y again to conne
   b690c:	7463 6120 646e 7020 6275 696c 6873 6700     ct and publish.g
   b691c:	696f 676e 7420 206f 6c73 6565 0070 6546     oing to sleep.Fe
   b692c:	6c65 6e69 2067 6572 7473 656c 7373 4600     eling restless.F
   b693c:	6f6c 646f 726f 6f4e 0000 0000               loodorNo....

000b6948 <_ZTVN5spark13EthernetClassE>:
	...
   b6950:	4a8f 000b 4a85 000b 4a7b 000b 4a71 000b     .J...J..{J..qJ..
   b6960:	4a65 000b 4a59 000b 5aa7 000b 5aaf 000b     eJ..YJ...Z...Z..
   b6970:	4a4d 000b 4a45 000b 4a3b 000b 4a31 000b     MJ..EJ..;J..1J..
   b6980:	5adf 000b 6977 6972 676e 5300 7379 6574     .Z..wiring.Syste
   b6990:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b69a0:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b69b0:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b69c0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b69d0:	0065 0000                                   e...

000b69d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b69dc:	5121 000b 5127 000b 5165 000b 5135 000b     !Q..'Q..eQ..5Q..
   b69ec:	5123 000b                                   #Q..

000b69f0 <_ZTV9IPAddress>:
	...
   b69f8:	5661 000b 5651 000b 5653 000b               aV..QV..SV..

000b6a04 <_ZTV9USBSerial>:
	...
   b6a0c:	5747 000b 57af 000b 5785 000b 4d89 000b     GW...W...W...M..
   b6a1c:	5777 000b 5749 000b 5759 000b 57a9 000b     wW..IW..YW...W..
   b6a2c:	5769 000b 5741 000b                         iW..AW..

000b6a34 <_ZTVN5spark13CellularClassE>:
	...
   b6a3c:	58a7 000b 589d 000b 5893 000b 5849 000b     .X...X...X..IX..
   b6a4c:	5887 000b 587b 000b 5aa7 000b 5aaf 000b     .X..{X...Z...Z..
   b6a5c:	586f 000b 5867 000b 585d 000b 5853 000b     oX..gX..]X..SX..
   b6a6c:	5adf 000b                                   .Z..

000b6a70 <_ZTV11USARTSerial>:
	...
   b6a78:	58e1 000b 594d 000b 5925 000b 4d89 000b     .X..MY..%Y...M..
   b6a88:	58f5 000b 5911 000b 5903 000b 591f 000b     .X...Y...Y...Y..
   b6a98:	58e3 000b 58e7 000b                         .X...X..

000b6aa0 <_ZTV7TwoWire>:
	...
   b6aa8:	59c1 000b 5a0b 000b 59e3 000b 59c3 000b     .Y...Z...Y...Y..
   b6ab8:	59eb 000b 59f3 000b 59fb 000b 5a03 000b     .Y...Y...Y...Z..

000b6ac8 <_ZTVN5spark12NetworkClassE>:
	...
   b6ad0:	5a67 000b 5a71 000b 5a7b 000b 5a85 000b     gZ..qZ..{Z...Z..
   b6ae0:	5a8f 000b 5a9b 000b 5aa7 000b 5aaf 000b     .Z...Z...Z...Z..
   b6af0:	5ab7 000b 5ac3 000b 5acb 000b 5ad5 000b     .Z...Z...Z...Z..
   b6b00:	5adf 000b                                   .Z..

000b6b04 <_ZSt7nothrow>:
   b6b04:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6b14:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6b24:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6b34:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6b44:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6b54:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6b64:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6b74:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6b84:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6b94:	646e 632e                                    nd.c.

000b6b99 <link_const_variable_data_end>:
   b6b99:	00          	.byte	0x00
	...

000b6b9c <link_constructors_location>:
   b6b9c:	000b44e5 	.word	0x000b44e5
   b6ba0:	000b4a99 	.word	0x000b4a99
   b6ba4:	000b4be1 	.word	0x000b4be1
   b6ba8:	000b4d79 	.word	0x000b4d79
   b6bac:	000b4f09 	.word	0x000b4f09
   b6bb0:	000b4f8d 	.word	0x000b4f8d
   b6bb4:	000b4fa9 	.word	0x000b4fa9
   b6bb8:	000b58b1 	.word	0x000b58b1
   b6bbc:	000b5bb9 	.word	0x000b5bb9
